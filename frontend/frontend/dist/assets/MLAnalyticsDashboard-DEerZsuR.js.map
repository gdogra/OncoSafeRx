{"version":3,"file":"MLAnalyticsDashboard-DEerZsuR.js","sources":["../../src/components/Analytics/MLAnalyticsDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { usePatient } from '../../context/PatientContext';\nimport Card from '../UI/Card';\nimport Tooltip from '../UI/Tooltip';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport { \n  BarChart3, \n  TrendingUp,\n  TrendingDown,\n  Target,\n  Brain,\n  Activity,\n  Users,\n  Clock,\n  Zap,\n  Shield,\n  Database,\n  Eye,\n  Filter,\n  Download,\n  RefreshCw,\n  Settings,\n  AlertTriangle,\n  CheckCircle,\n  Star,\n  Award,\n  Calendar,\n  Lightbulb\n} from 'lucide-react';\n\ninterface MLInsight {\n  id: string;\n  category: 'predictive' | 'diagnostic' | 'optimization' | 'risk_assessment' | 'outcome_prediction';\n  title: string;\n  description: string;\n  confidence: number;\n  impact_score: number;\n  model_used: string;\n  data_sources: string[];\n  recommendation: string;\n  time_horizon: string;\n  last_updated: string;\n}\n\ninterface PredictiveModel {\n  name: string;\n  type: 'survival' | 'response' | 'toxicity' | 'cost' | 'quality_of_life';\n  accuracy: number;\n  prediction: {\n    value: number;\n    confidence_interval: [number, number];\n    probability: number;\n    risk_factors: string[];\n    protective_factors: string[];\n  };\n  training_data_size: number;\n  last_trained: string;\n}\n\ninterface PopulationBenchmark {\n  metric: string;\n  patient_value: number;\n  population_mean: number;\n  population_percentile: number;\n  category: 'better' | 'average' | 'worse';\n  sample_size: number;\n}\n\ninterface TrendAnalysis {\n  metric: string;\n  current_value: number;\n  trend_direction: 'improving' | 'stable' | 'declining';\n  rate_of_change: number;\n  time_period: string;\n  prediction_30_days: number;\n  confidence: number;\n}\n\nconst MLAnalyticsDashboard: React.FC = () => {\n  const { state } = usePatient();\n  const { currentPatient } = state;\n  const [mlInsights, setMlInsights] = useState<MLInsight[]>([]);\n  const [predictiveModels, setPredictiveModels] = useState<PredictiveModel[]>([]);\n  const [populationBenchmarks, setPopulationBenchmarks] = useState<PopulationBenchmark[]>([]);\n  const [trendAnalysis, setTrendAnalysis] = useState<TrendAnalysis[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'7d' | '30d' | '90d' | '1y'>('30d');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [autoRefresh, setAutoRefresh] = useState(false);\n\n  const generateMLInsights = async () => {\n    if (!currentPatient) return;\n\n    setIsAnalyzing(true);\n    await new Promise(resolve => setTimeout(resolve, 3000)); // Simulate ML processing\n\n    // Generate realistic ML insights\n    const insights: MLInsight[] = [\n      {\n        id: 'ml-1',\n        category: 'predictive',\n        title: 'Treatment Response Prediction',\n        description: 'Advanced ML model predicts 89% likelihood of achieving partial response or better within 12 weeks',\n        confidence: 89,\n        impact_score: 95,\n        model_used: 'Deep Neural Network v3.2',\n        data_sources: ['Clinical trials database (n=45,000)', 'Real-world evidence', 'Genomic markers'],\n        recommendation: 'Continue current regimen with enhanced monitoring for early response indicators',\n        time_horizon: '12 weeks',\n        last_updated: new Date().toISOString()\n      },\n      {\n        id: 'ml-2',\n        category: 'risk_assessment',\n        title: 'Toxicity Risk Stratification',\n        description: 'ML algorithm identifies patient as moderate risk (34%) for Grade 3+ toxicity based on multifactorial analysis',\n        confidence: 76,\n        impact_score: 82,\n        model_used: 'Random Forest Classifier v2.1',\n        data_sources: ['Historical toxicity data', 'Patient genetics', 'Comorbidity profiles'],\n        recommendation: 'Implement weekly CBC monitoring and consider prophylactic supportive care',\n        time_horizon: '6 months',\n        last_updated: new Date().toISOString()\n      },\n      {\n        id: 'ml-3',\n        category: 'optimization',\n        title: 'Dosing Optimization',\n        description: 'Pharmacokinetic modeling suggests 15% dose increase could improve efficacy without significant toxicity increase',\n        confidence: 71,\n        impact_score: 78,\n        model_used: 'Population PK/PD Model v1.8',\n        data_sources: ['PK data (n=12,000)', 'Patient covariates', 'Therapeutic drug monitoring'],\n        recommendation: 'Consider dose escalation to 115% of current dose with TDM guidance',\n        time_horizon: '4 weeks',\n        last_updated: new Date().toISOString()\n      },\n      {\n        id: 'ml-4',\n        category: 'diagnostic',\n        title: 'Biomarker Pattern Recognition',\n        description: 'AI pattern analysis of serial biomarkers suggests early molecular response consistent with treatment efficacy',\n        confidence: 83,\n        impact_score: 88,\n        model_used: 'Convolutional Neural Network v4.0',\n        data_sources: ['Serial biomarker data', 'Imaging correlates', 'Response patterns'],\n        recommendation: 'Continue current therapy; consider extending treatment duration based on molecular response',\n        time_horizon: '8 weeks',\n        last_updated: new Date().toISOString()\n      },\n      {\n        id: 'ml-5',\n        category: 'outcome_prediction',\n        title: 'Long-term Survival Projection',\n        description: '5-year overall survival estimated at 78% based on comprehensive prognostic modeling',\n        confidence: 69,\n        impact_score: 92,\n        model_used: 'Cox Proportional Hazards with ML Enhancement',\n        data_sources: ['Survival databases', 'Treatment history', 'Molecular markers'],\n        recommendation: 'Excellent prognosis; focus on quality of life and long-term surveillance planning',\n        time_horizon: '5 years',\n        last_updated: new Date().toISOString()\n      }\n    ];\n\n    // Generate predictive models\n    const models: PredictiveModel[] = [\n      {\n        name: 'Survival Predictor Pro',\n        type: 'survival',\n        accuracy: 0.87,\n        prediction: {\n          value: 78,\n          confidence_interval: [68, 88],\n          probability: 0.78,\n          risk_factors: ['Age >65', 'Multiple comorbidities', 'Previous treatment lines'],\n          protective_factors: ['Good performance status', 'Favorable genetics', 'Early stage']\n        },\n        training_data_size: 125000,\n        last_trained: '2024-01-15'\n      },\n      {\n        name: 'Response Predictor Elite',\n        type: 'response',\n        accuracy: 0.82,\n        prediction: {\n          value: 89,\n          confidence_interval: [82, 96],\n          probability: 0.89,\n          risk_factors: ['Large tumor burden', 'Multiple metastases'],\n          protective_factors: ['Biomarker positive', 'Treatment naive', 'Young age']\n        },\n        training_data_size: 89000,\n        last_trained: '2024-01-10'\n      },\n      {\n        name: 'Toxicity Guard AI',\n        type: 'toxicity',\n        accuracy: 0.79,\n        prediction: {\n          value: 34,\n          confidence_interval: [24, 44],\n          probability: 0.34,\n          risk_factors: ['Baseline organ dysfunction', 'Concomitant medications', 'Genetic variants'],\n          protective_factors: ['Good nutritional status', 'No prior severe toxicity', 'Optimal supportive care']\n        },\n        training_data_size: 67000,\n        last_trained: '2024-01-08'\n      }\n    ];\n\n    // Generate population benchmarks\n    const benchmarks: PopulationBenchmark[] = [\n      {\n        metric: 'Treatment Response Rate',\n        patient_value: 89,\n        population_mean: 72,\n        population_percentile: 85,\n        category: 'better',\n        sample_size: 45000\n      },\n      {\n        metric: 'Quality of Life Score',\n        patient_value: 78,\n        population_mean: 71,\n        population_percentile: 68,\n        category: 'better',\n        sample_size: 23000\n      },\n      {\n        metric: 'Time to Progression (months)',\n        patient_value: 14.2,\n        population_mean: 11.8,\n        population_percentile: 72,\n        category: 'better',\n        sample_size: 38000\n      },\n      {\n        metric: 'Toxicity Incidence (%)',\n        patient_value: 34,\n        population_mean: 42,\n        population_percentile: 32,\n        category: 'better',\n        sample_size: 56000\n      }\n    ];\n\n    // Generate trend analysis\n    const trends: TrendAnalysis[] = [\n      {\n        metric: 'Tumor Markers',\n        current_value: 8.5,\n        trend_direction: 'declining',\n        rate_of_change: -12.5,\n        time_period: '8 weeks',\n        prediction_30_days: 6.8,\n        confidence: 0.82\n      },\n      {\n        metric: 'Performance Status',\n        current_value: 1,\n        trend_direction: 'stable',\n        rate_of_change: 0,\n        time_period: '12 weeks',\n        prediction_30_days: 1,\n        confidence: 0.76\n      },\n      {\n        metric: 'Quality of Life',\n        current_value: 78,\n        trend_direction: 'improving',\n        rate_of_change: 8.3,\n        time_period: '6 weeks',\n        prediction_30_days: 82,\n        confidence: 0.71\n      }\n    ];\n\n    setMlInsights(insights);\n    setPredictiveModels(models);\n    setPopulationBenchmarks(benchmarks);\n    setTrendAnalysis(trends);\n    setIsAnalyzing(false);\n  };\n\n  const filteredInsights = useMemo(() => {\n    return mlInsights.filter(insight => \n      selectedCategory === 'all' || insight.category === selectedCategory\n    );\n  }, [mlInsights, selectedCategory]);\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return 'text-green-600';\n    if (confidence >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getConfidenceIcon = (confidence: number) => {\n    if (confidence >= 80) return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n    if (confidence >= 60) return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n    return <AlertTriangle className=\"w-4 h-4 text-red-600\" />;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'predictive': return <Brain className=\"w-4 h-4\" />;\n      case 'diagnostic': return <Eye className=\"w-4 h-4\" />;\n      case 'optimization': return <Target className=\"w-4 h-4\" />;\n      case 'risk_assessment': return <Shield className=\"w-4 h-4\" />;\n      case 'outcome_prediction': return <TrendingUp className=\"w-4 h-4\" />;\n      default: return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getBenchmarkColor = (category: string) => {\n    switch (category) {\n      case 'better': return 'text-green-600 bg-green-50';\n      case 'average': return 'text-blue-600 bg-blue-50';\n      case 'worse': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getTrendIcon = (direction: string) => {\n    switch (direction) {\n      case 'improving': return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'declining': return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default: return <Activity className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  if (!currentPatient) {\n    return (\n      <Card>\n        <div className=\"text-center py-12\">\n          <BarChart3 className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n          <h3 className=\"text-xl font-semibold text-gray-500 mb-2\">ML Analytics Dashboard</h3>\n          <p className=\"text-gray-400 max-w-md mx-auto\">\n            Select a patient to access advanced machine learning analytics and insights\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n              <Brain className=\"w-6 h-6 text-purple-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">ML Analytics Dashboard</h1>\n              <p className=\"text-gray-600\">\n                Advanced machine learning insights for {currentPatient.demographics.firstName} {currentPatient.demographics.lastName}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={generateMLInsights}\n              disabled={isAnalyzing}\n              className=\"flex items-center space-x-2 px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n            >\n              {isAnalyzing ? <LoadingSpinner size=\"sm\" /> : <Brain className=\"w-5 h-5\" />}\n              <span>{isAnalyzing ? 'Analyzing...' : 'Run ML Analysis'}</span>\n            </button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Processing Status */}\n      {isAnalyzing && (\n        <Card>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              <LoadingSpinner size=\"lg\" />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">ML Processing in Progress</h3>\n              <p className=\"text-gray-600 mb-2\">\n                Running advanced machine learning models across multiple data sources...\n              </p>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs text-gray-500\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n                  <span>Deep learning models</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span>Population comparisons</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\n                  <span>Predictive modeling</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-pulse\"></div>\n                  <span>Trend analysis</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Controls */}\n      {mlInsights.length > 0 && (\n        <Card>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4 text-gray-400\" />\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                >\n                  <option value=\"all\">All Categories</option>\n                  <option value=\"predictive\">Predictive</option>\n                  <option value=\"diagnostic\">Diagnostic</option>\n                  <option value=\"optimization\">Optimization</option>\n                  <option value=\"risk_assessment\">Risk Assessment</option>\n                  <option value=\"outcome_prediction\">Outcome Prediction</option>\n                </select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-4 h-4 text-gray-400\" />\n                <select\n                  value={selectedTimeframe}\n                  onChange={(e) => setSelectedTimeframe(e.target.value as any)}\n                  className=\"border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                >\n                  <option value=\"7d\">Last 7 days</option>\n                  <option value=\"30d\">Last 30 days</option>\n                  <option value=\"90d\">Last 90 days</option>\n                  <option value=\"1y\">Last year</option>\n                </select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RefreshCw className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-sm text-gray-600\">Auto-refresh:</span>\n                <button\n                  onClick={() => setAutoRefresh(!autoRefresh)}\n                  className={`relative w-12 h-6 rounded-full transition-colors ${\n                    autoRefresh ? 'bg-purple-500' : 'bg-gray-300'\n                  }`}\n                >\n                  <div className={`absolute w-5 h-5 bg-white rounded-full top-0.5 transition-transform ${\n                    autoRefresh ? 'translate-x-6' : 'translate-x-0.5'\n                  }`} />\n                </button>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Database className=\"w-4 h-4\" />\n              <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Predictive Models Overview */}\n      {predictiveModels.length > 0 && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Target className=\"w-6 h-6 text-blue-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Predictive Models</h2>\n            <Tooltip content=\"AI-powered predictive models trained on large clinical datasets\">\n              <Lightbulb className=\"w-4 h-4 text-gray-400\" />\n            </Tooltip>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {predictiveModels.map((model, index) => (\n              <div key={index} className=\"p-4 border border-gray-200 rounded-lg bg-gradient-to-br from-white to-gray-50\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-semibold text-gray-900\">{model.name}</h3>\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-3 h-3 text-yellow-500\" />\n                    <span className=\"text-xs font-medium text-gray-600\">{Math.round(model.accuracy * 100)}%</span>\n                  </div>\n                </div>\n                \n                <div className=\"mb-3\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm text-gray-600\">Prediction:</span>\n                    <span className=\"font-bold text-lg text-blue-600\">{model.prediction.value}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full\"\n                      style={{ width: `${model.prediction.value}%` }}\n                    />\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    CI: {model.prediction.confidence_interval[0]}% - {model.prediction.confidence_interval[1]}%\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 text-xs\">\n                  <div>\n                    <span className=\"font-medium text-red-600\">Risk factors:</span>\n                    <div className=\"text-gray-600\">\n                      {model.prediction.risk_factors.slice(0, 2).map(factor => `• ${factor}`).join(' ')}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-green-600\">Protective factors:</span>\n                    <div className=\"text-gray-600\">\n                      {model.prediction.protective_factors.slice(0, 2).map(factor => `• ${factor}`).join(' ')}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-3 pt-3 border-t border-gray-200 text-xs text-gray-500\">\n                  <div>Training data: {model.training_data_size.toLocaleString()} patients</div>\n                  <div>Last trained: {new Date(model.last_trained).toLocaleDateString()}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Population Benchmarks */}\n      {populationBenchmarks.length > 0 && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Users className=\"w-6 h-6 text-green-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Population Benchmarks</h2>\n            <Tooltip content=\"How this patient compares to similar patients in large clinical databases\">\n              <Award className=\"w-4 h-4 text-gray-400\" />\n            </Tooltip>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {populationBenchmarks.map((benchmark, index) => (\n              <div key={index} className={`p-4 rounded-lg border ${getBenchmarkColor(benchmark.category)}`}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-semibold text-gray-900\">{benchmark.metric}</h3>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    benchmark.category === 'better' ? 'bg-green-100 text-green-800' :\n                    benchmark.category === 'average' ? 'bg-blue-100 text-blue-800' :\n                    'bg-red-100 text-red-800'\n                  }`}>\n                    {benchmark.category === 'better' ? 'Above Average' :\n                     benchmark.category === 'average' ? 'Average' : 'Below Average'}\n                  </span>\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-gray-600\">Patient</div>\n                    <div className=\"font-bold text-lg\">{benchmark.patient_value}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-600\">Population</div>\n                    <div className=\"font-medium\">{benchmark.population_mean}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-gray-600\">Percentile</div>\n                    <div className=\"font-medium\">{benchmark.population_percentile}th</div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-3 text-xs text-gray-500\">\n                  Based on {benchmark.sample_size.toLocaleString()} similar patients\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Trend Analysis */}\n      {trendAnalysis.length > 0 && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <TrendingUp className=\"w-6 h-6 text-purple-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Trend Analysis</h2>\n            <Tooltip content=\"AI-powered trend analysis and 30-day predictions\">\n              <Activity className=\"w-4 h-4 text-gray-400\" />\n            </Tooltip>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            {trendAnalysis.map((trend, index) => (\n              <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-semibold text-gray-900\">{trend.metric}</h3>\n                  {getTrendIcon(trend.trend_direction)}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Current:</span>\n                    <span className=\"font-medium\">{trend.current_value}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">30-day forecast:</span>\n                    <span className=\"font-medium\">{trend.prediction_30_days}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Change rate:</span>\n                    <span className={`font-medium ${\n                      trend.rate_of_change > 0 ? 'text-green-600' :\n                      trend.rate_of_change < 0 ? 'text-red-600' : 'text-gray-600'\n                    }`}>\n                      {trend.rate_of_change > 0 ? '+' : ''}{trend.rate_of_change}%\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>Confidence: {Math.round(trend.confidence * 100)}%</span>\n                    <span>Period: {trend.time_period}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* ML Insights */}\n      <div className=\"space-y-4\">\n        {filteredInsights.length === 0 && mlInsights.length === 0 && !isAnalyzing && (\n          <Card>\n            <div className=\"text-center py-12\">\n              <Brain className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium text-gray-500 mb-2\">No ML Analysis Available</h3>\n              <p className=\"text-gray-400\">Click \"Run ML Analysis\" to generate advanced insights</p>\n            </div>\n          </Card>\n        )}\n\n        {filteredInsights.map((insight) => (\n          <Card key={insight.id} className=\"border-l-4 border-purple-500\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"flex-shrink-0 w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                {getCategoryIcon(insight.category)}\n              </div>\n              \n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <span className=\"px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium capitalize\">\n                    {insight.category.replace('_', ' ')}\n                  </span>\n                  <div className=\"flex items-center space-x-1\">\n                    {getConfidenceIcon(insight.confidence)}\n                    <span className={`text-sm font-medium ${getConfidenceColor(insight.confidence)}`}>\n                      {insight.confidence}% confidence\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-3 h-3 text-yellow-500\" />\n                    <span className=\"text-sm font-medium text-gray-600\">\n                      Impact: {insight.impact_score}%\n                    </span>\n                  </div>\n                </div>\n\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{insight.title}</h3>\n                <p className=\"text-gray-700 mb-3\">{insight.description}</p>\n                \n                <div className=\"bg-purple-50 p-3 rounded-lg mb-3\">\n                  <div className=\"text-sm font-medium text-purple-800 mb-1\">AI Recommendation:</div>\n                  <p className=\"text-sm text-purple-700\">{insight.recommendation}</p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"font-medium text-gray-700 mb-1\">Model Used:</div>\n                    <p className=\"text-gray-600\">{insight.model_used}</p>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-gray-700 mb-1\">Time Horizon:</div>\n                    <p className=\"text-gray-600\">{insight.time_horizon}</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-3\">\n                  <div className=\"text-sm font-medium text-gray-700 mb-1\">Data Sources:</div>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {insight.data_sources.map((source, idx) => (\n                      <span key={idx} className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs\">\n                        {source}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"mt-3 text-xs text-gray-500\">\n                  Last updated: {new Date(insight.last_updated).toLocaleString()}\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Summary Statistics */}\n      {mlInsights.length > 0 && (\n        <Card className=\"bg-gray-50\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-gray-400\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">ML Analysis Summary</h3>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">{mlInsights.length}</div>\n              <div className=\"text-sm text-gray-600\">Total Insights</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {Math.round(mlInsights.reduce((sum, i) => sum + i.confidence, 0) / mlInsights.length)}%\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg. Confidence</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {Math.round(mlInsights.reduce((sum, i) => sum + i.impact_score, 0) / mlInsights.length)}%\n              </div>\n              <div className=\"text-sm text-gray-600\">Avg. Impact</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {mlInsights.filter(i => i.confidence >= 80).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">High Confidence</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {mlInsights.filter(i => i.impact_score >= 85).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">High Impact</div>\n            </div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default MLAnalyticsDashboard;"],"names":["MLAnalyticsDashboard","state","usePatient","currentPatient","mlInsights","setMlInsights","useState","predictiveModels","setPredictiveModels","populationBenchmarks","setPopulationBenchmarks","trendAnalysis","setTrendAnalysis","isAnalyzing","setIsAnalyzing","selectedTimeframe","setSelectedTimeframe","selectedCategory","setSelectedCategory","autoRefresh","setAutoRefresh","generateMLInsights","resolve","insights","models","benchmarks","trends","filteredInsights","useMemo","insight","getConfidenceColor","confidence","getConfidenceIcon","jsx","CheckCircle","Clock","AlertTriangle","getCategoryIcon","category","Brain","Eye","Target","Shield","TrendingUp","Activity","getBenchmarkColor","getTrendIcon","direction","TrendingDown","jsxs","Card","LoadingSpinner","Filter","e","Calendar","RefreshCw","Database","Tooltip","Lightbulb","model","index","Star","factor","Users","Award","benchmark","trend","source","idx","BarChart3","sum","i"],"mappings":"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"}