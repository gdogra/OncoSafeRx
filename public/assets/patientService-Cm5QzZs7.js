class m{constructor(){this.STORAGE_KEY="oncosaferx_patients",this.TREATMENT_HISTORY_KEY="oncosaferx_treatment_history",this.API_BASE_URL="/api/patients"}getAuthToken(){try{const t=localStorage.getItem("osrx_auth_tokens");return t&&JSON.parse(t).access_token||""}catch{return""}}async getPatients(){try{const t={"Content-Type":"application/json"},e=await fetch(this.API_BASE_URL,{headers:t});if(e.ok){const a=await e.json();return console.log(`✅ Loaded ${a.patients?.length||0} patients from database`),(a.patients||[]).map(s=>this.transformApiPatient(s))}else return console.error(`❌ API call failed with status ${e.status}: ${e.statusText}`),console.error("🔄 Loading patients from localStorage instead"),this.getPatientsFromLocalStorage()}catch(t){return console.error("❌ Network error loading patients from API:",t),console.error("🔄 Loading patients from localStorage instead"),this.getPatientsFromLocalStorage()}}getPatientsFromLocalStorage(){try{const t=localStorage.getItem(this.STORAGE_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error retrieving patients from localStorage:",t),[]}}async getPatient(t){try{const e={"Content-Type":"application/json"},a=await fetch(`${this.API_BASE_URL}/${t}`,{headers:e});if(a.ok){const s=await a.json(),r=s.patient?.data||s.patient;return r?this.transformApiPatient(r):null}else return console.warn("API failed, falling back to localStorage"),this.getPatientsFromLocalStorage().find(r=>r.id===t)||null}catch(e){return console.error("Error retrieving patient from API:",e),this.getPatientsFromLocalStorage().find(s=>s.id===t)||null}}async savePatient(t){try{console.log("🚀 savePatient called with:",{id:t.id,name:`${t.firstName} ${t.lastName}`}),console.log("🌐 API_BASE_URL:",this.API_BASE_URL);const e={"Content-Type":"application/json"},a={id:t.id,demographics:{firstName:t.firstName,lastName:t.lastName,dateOfBirth:t.dateOfBirth,sex:t.gender,mrn:t.mrn,heightCm:t.height,weightKg:t.weight},allergies:t.allergies||[],medications:t.currentMedications||[],conditions:t.contraindications?.map(r=>({condition:r}))||[],labValues:t.labValues||[],genetics:t.genomicProfile?.variants||[],vitals:[],treatmentHistory:t.treatmentHistory||[],notes:[],preferences:{},lastUpdated:new Date().toISOString(),isActive:!0};console.log("🔄 Transforming patient data:",{original:t,transformed:a}),console.log("📤 Making POST request to:",this.API_BASE_URL),console.log("📤 Request payload:",{patient:a});const s=await fetch(this.API_BASE_URL,{method:"POST",headers:e,body:JSON.stringify({patient:a})});if(console.log("📨 Response status:",s.status,s.statusText),s.ok){const r=await s.json();console.log("✅ Patient saved to database successfully");const o=r.patient;if(o?.data||o?.demographics){const c=o.data?.demographics||o.demographics;return{...t,id:o.id||t.id,firstName:c?.firstName||t.firstName,lastName:c?.lastName||t.lastName,dateOfBirth:c?.dateOfBirth||t.dateOfBirth,gender:c?.sex||t.gender,mrn:c?.mrn||t.mrn,height:c?.heightCm||t.height,weight:c?.weightKg||t.weight}}return t}else{const r=await s.text();return console.error(`❌ API call failed with status ${s.status}: ${s.statusText}`),console.error("❌ Error response body:",r),console.error("🔄 Falling back to localStorage - data will NOT persist across sessions"),this.savePatientToLocalStorage(t),t}}catch(e){return console.error("❌ Network error saving patient to API:",e),console.error("🔄 Falling back to localStorage - data will NOT persist across sessions"),this.savePatientToLocalStorage(t),t}}savePatientToLocalStorage(t){try{const e=this.getPatientsFromLocalStorage(),a=e.findIndex(s=>s.id===t.id);a!==-1?e[a]=t:e.push(t),localStorage.setItem(this.STORAGE_KEY,JSON.stringify(e))}catch(e){throw console.error("Error saving patient to localStorage:",e),new Error("Failed to save patient")}}async deletePatient(t){try{const e={"Content-Type":"application/json"};(await fetch(`${this.API_BASE_URL}/${t}`,{method:"DELETE",headers:e})).ok?console.log("✅ Patient deleted from database"):(console.warn("API failed, falling back to localStorage"),this.deletePatientFromLocalStorage(t))}catch(e){console.error("Error deleting patient from API:",e),this.deletePatientFromLocalStorage(t)}}deletePatientFromLocalStorage(t){try{const a=this.getPatientsFromLocalStorage().filter(s=>s.id!==t);localStorage.setItem(this.STORAGE_KEY,JSON.stringify(a))}catch(e){throw console.error("Error deleting patient from localStorage:",e),new Error("Failed to delete patient")}}async searchPatients(t){try{const e={"Content-Type":"application/json"},a=await fetch(`${this.API_BASE_URL}?q=${encodeURIComponent(t)}`,{headers:e});return a.ok?((await a.json()).patients||[]).map(r=>this.transformApiPatient(r)):(console.warn("API failed, falling back to localStorage"),this.searchPatientsInLocalStorage(t))}catch(e){return console.error("Error searching patients from API:",e),this.searchPatientsInLocalStorage(t)}}searchPatientsInLocalStorage(t){const e=this.getPatientsFromLocalStorage(),a=t.toLowerCase();return e.filter(s=>s.firstName.toLowerCase().includes(a)||s.lastName.toLowerCase().includes(a)||s.mrn?.toLowerCase().includes(a)||s.diagnosis.toLowerCase().includes(a))}async addTreatmentCourse(t,e){const a=await this.getPatient(t);if(!a)throw new Error("Patient not found");a.treatmentHistory=a.treatmentHistory||[],a.treatmentHistory.push(e),await this.savePatient(a)}async updateTreatmentCourse(t,e,a){const s=await this.getPatient(t);if(!s)throw new Error("Patient not found");const r=s.treatmentHistory.findIndex(o=>o.id===e);if(r===-1)throw new Error("Treatment course not found");s.treatmentHistory[r]={...s.treatmentHistory[r],...a},await this.savePatient(s)}async addToxicity(t,e,a){const s=await this.getPatient(t);if(!s)throw new Error("Patient not found");const r=s.treatmentHistory.find(o=>o.id===e);if(!r)throw new Error("Treatment course not found");r.toxicities=r.toxicities||[],r.toxicities.push(a),await this.savePatient(s)}async updateLabValues(t,e){const a=await this.getPatient(t);if(!a)throw new Error("Patient not found");a.labValues=a.labValues||[],a.labValues.push(e),a.labValues=a.labValues.sort((s,r)=>new Date(r.date).getTime()-new Date(s.date).getTime()).slice(0,50),await this.savePatient(a)}async updateGenomicProfile(t,e){const a=await this.getPatient(t);if(!a)throw new Error("Patient not found");a.genomicProfile=e,await this.savePatient(a)}async addBiomarker(t,e){const a=await this.getPatient(t);if(!a)throw new Error("Patient not found");a.biomarkers=a.biomarkers||[],a.biomarkers.push(e),await this.savePatient(a)}async getTreatmentTimeline(t){const e=await this.getPatient(t);if(!e)return[];const a=[];return e.treatmentHistory?.forEach(s=>{if(a.push({date:s.startDate,type:"treatment",title:`Started ${s.regimenName}`,description:`Treatment course initiated (${s.cycles} cycles planned)`,severity:"medium"}),s.endDate&&a.push({date:s.endDate,type:"treatment",title:`Completed ${s.regimenName}`,description:`Treatment course completed (${s.cycles} cycles)`,severity:"low"}),s.response){const r=s.endDate||new Date().toISOString().split("T")[0];a.push({date:r,type:"response",title:`Response Assessment: ${s.response}`,description:"Treatment response evaluated",severity:s.response==="CR"||s.response==="PR"?"low":"medium"})}s.toxicities?.forEach(r=>{a.push({date:r.onset,type:"toxicity",title:`${r.name} (Grade ${r.grade})`,description:`Toxicity event - ${r.attribution} attribution`,severity:r.grade>=3?"high":"medium"})})}),e.labValues.forEach(s=>{s.anc<1&&a.push({date:s.date,type:"lab",title:"Neutropenia",description:`ANC: ${s.anc} x10³/μL`,severity:s.anc<.5?"high":"medium"}),s.platelets<100&&a.push({date:s.date,type:"lab",title:"Thrombocytopenia",description:`Platelets: ${s.platelets} x10³/μL`,severity:s.platelets<50?"high":"medium"})}),a.sort((s,r)=>new Date(r.date).getTime()-new Date(s.date).getTime())}async getPatientStats(){const t=await this.getPatients(),e=t.length,a=t.filter(n=>n.treatmentHistory?.some(i=>!i.endDate)).length,s=t.filter(n=>n.treatmentHistory?.some(i=>!i.endDate)).length,r=t.reduce((n,i)=>n+(i.treatmentHistory?.filter(g=>g.endDate).length||0),0),o=t.filter(n=>n.dateOfBirth).map(n=>this.calculateAge(n.dateOfBirth)),c=o.length>0?Math.round(o.reduce((n,i)=>n+i,0)/o.length):0,l={};t.forEach(n=>{n.diagnosis&&(l[n.diagnosis]=(l[n.diagnosis]||0)+1)});const d=Object.entries(l).map(([n,i])=>({diagnosis:n,count:i})).sort((n,i)=>i.count-n.count).slice(0,5);return{totalPatients:e,activePatients:a,patientsOnTreatment:s,completedTreatments:r,averageAge:c,commonDiagnoses:d}}calculateAge(t){const e=new Date,a=new Date(t);let s=e.getFullYear()-a.getFullYear();const r=e.getMonth()-a.getMonth();return(r<0||r===0&&e.getDate()<a.getDate())&&s--,s}transformApiPatient(t){return{id:t.id,mrn:t.demographics?.mrn||`MRN${Math.random().toString().slice(2,8)}`,firstName:t.demographics?.firstName||"Unknown",lastName:t.demographics?.lastName||"Patient",dateOfBirth:t.demographics?.dateOfBirth||"1980-01-01",gender:t.demographics?.sex||t.demographics?.gender||"unknown",height:t.demographics?.heightCm||170,weight:t.demographics?.weightKg||70,diagnosis:t.conditions?.[0]?.name||"Unknown diagnosis",stage:t.conditions?.[0]?.stage||"Unknown",ecogPerformanceStatus:t.vitals?.[0]?.performanceStatus||1,renalFunction:{creatinine:t.labValues?.find(e=>e.labType==="creatinine")?.value||1},hepaticFunction:{alt:t.labValues?.find(e=>e.labType==="alt")?.value||25,ast:t.labValues?.find(e=>e.labType==="ast")?.value||25,bilirubin:t.labValues?.find(e=>e.labType==="bilirubin")?.value||1},allergies:(t.allergies||[]).map(e=>e.allergen),currentMedications:(t.medications||[]).filter(e=>e.isActive).map(e=>e.drugName||e.drug),treatmentHistory:t.treatmentHistory||[],labValues:t.labValues||[],biomarkers:t.biomarkers||[],genomicProfile:{variants:t.genetics||[],testDate:t.genetics?.[0]?.testDate||new Date().toISOString(),testingLab:"Unknown Lab"}}}generateSamplePatients(){const t=[{id:"patient_001",mrn:"MRN001234",firstName:"John",lastName:"Doe",dateOfBirth:"1965-03-15",gender:"male",height:175,weight:80,diagnosis:"Non-small cell lung cancer, stage IV",stage:"IV",ecogPerformanceStatus:1,renalFunction:{creatinine:1.1},hepaticFunction:{bilirubin:.8,alt:32,ast:28,albumin:4.2},labValues:[{date:"2024-09-15",hemoglobin:12.5,platelets:250,anc:3.2,wbc:6.8}],allergies:["penicillin"],contraindications:[],currentMedications:[{name:"Pembrolizumab",dose:"200mg",frequency:"Every 3 weeks",startDate:"2024-08-01"}],treatmentHistory:[{id:"tx_001",regimenName:"Pembrolizumab",startDate:"2024-08-01",cycles:4,response:"PR",toxicities:[],doseModifications:[]}],biomarkers:[{name:"PD-L1",value:"85%",date:"2024-07-15",method:"22C3 pharmDx"}]},{id:"patient_002",mrn:"MRN005678",firstName:"Jane",lastName:"Smith",dateOfBirth:"1958-11-22",gender:"female",height:162,weight:65,diagnosis:"Invasive ductal carcinoma, HER2+",stage:"IIIA",ecogPerformanceStatus:0,renalFunction:{creatinine:.9},hepaticFunction:{bilirubin:.6,alt:25,ast:22,albumin:4},labValues:[{date:"2024-09-15",hemoglobin:11.8,platelets:180,anc:2.8,wbc:5.4}],allergies:[],contraindications:[],currentMedications:[{name:"Trastuzumab",dose:"6mg/kg",frequency:"Every 3 weeks",startDate:"2024-07-15"}],treatmentHistory:[{id:"tx_002",regimenName:"AC-T + Trastuzumab",startDate:"2024-04-01",endDate:"2024-07-15",cycles:8,response:"CR",toxicities:[{name:"Neuropathy",grade:2,onset:"2024-06-15",attribution:"probable"}],doseModifications:[]}],biomarkers:[{name:"HER2",value:"3+",date:"2024-03-20",method:"IHC"}]}];this.getPatients().length===0&&t.forEach(a=>this.savePatient(a))}exportPatientData(t){const e=t?[this.getPatient(t)]:this.getPatients();return JSON.stringify({patients:e,exportDate:new Date().toISOString(),version:"1.0"},null,2)}importPatientData(t){try{const e=JSON.parse(t);e.patients&&Array.isArray(e.patients)&&e.patients.forEach(a=>this.savePatient(a))}catch{throw new Error("Invalid patient data format")}}}const u=new m;export{u as p};
