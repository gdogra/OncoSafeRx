import{s as p}from"./App-oj_FpO4B.js";import"./index-8LC8IQKY.js";const I={};class v{static async login(e){const o=(e.email||"").trim().toLowerCase(),r=(e.password||"").trim();console.log("üîê Login attempt for:",o);const s=new URLSearchParams(window.location.search),t=s.get("prod"),a=localStorage.getItem("osrx_force_production")==="true",l=t==="true"||t==="1"||a;if(t==="true"||t==="1"?localStorage.setItem("osrx_force_production","true"):(t==="false"||t==="0")&&localStorage.removeItem("osrx_force_production"),console.log("üîß Enhanced Debug URL check:",{url:window.location.href,search:window.location.search,hostname:window.location.hostname,pathname:window.location.pathname,prodParam:t,prodParamType:typeof t,localStorageForce:a,forceProduction:l,allParams:Object.fromEntries(s.entries())}),window.location.hostname==="localhost"&&!l){if(console.log("‚ö° LOCALHOST: Using dev mode"),r==="dev"||r==="test"||r==="admin"){console.log("‚úÖ Dev credentials accepted");const g=this.createDevUser(o),h={access_token:`dev-token-${Date.now()}`,refresh_token:`dev-refresh-${Date.now()}`,expires_at:Date.now()+1440*60*1e3,stored_at:Date.now()};try{localStorage.setItem("osrx_auth_path",JSON.stringify({path:"dev",at:Date.now()})),localStorage.setItem("osrx_dev_user",JSON.stringify(g)),localStorage.setItem("osrx_auth_tokens",JSON.stringify(h)),console.log("üíæ Stored dev tokens for API calls:",{hasAccessToken:!!h.access_token,expiresIn:"24h"})}catch(i){console.error("‚ùå Failed to store dev tokens:",i)}return g}throw console.log("‚ùå Invalid dev password. Use: dev, test, or admin"),new Error("For localhost, use password: dev, test, or admin")}console.log("üåê Production mode: Real Supabase auth");const n=I?.VITE_AUTH_TIMEOUT_MS?NaN:3e4;console.log(`üîÑ Starting authentication with ${Math.round(n/1e3)}-second timeout...`);try{const g=p.auth.signInWithPassword({email:o,password:r}),h=new Promise((m,c)=>{setTimeout(()=>{console.log(`‚è∞ TIMEOUT: Supabase auth exceeded ${Math.round(n/1e3)} seconds`),c(new Error(`Authentication timeout after ${Math.round(n/1e3)} seconds`))},n)});console.log("üîÑ Attempting Supabase authentication...");const{data:i,error:u}=await Promise.race([g,h]);if(console.log("üîç Auth response:",{authData:!!i,error:!!u,errorMessage:u?.message}),u){console.log("‚ùå Supabase error:",u.message,u);const m=!0,c=(()=>{try{return localStorage.getItem("osrx_use_auth_proxy")==="true"}catch{return!1}})();if(m||c)try{const d=await fetch("/api/supabase-auth/proxy/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:o,password:r})});if(d.ok){const S=await d.json(),{data:_,error:y}=await p.auth.setSession({access_token:S.access_token,refresh_token:S.refresh_token});if(y)throw y;if(!_?.session?.user)throw new Error("Failed to establish session");console.log("‚úÖ Proxy auth successful");const P=await this.buildUserProfile(_.session.user);try{localStorage.setItem("osrx_auth_path",JSON.stringify({path:"proxy",at:Date.now()}))}catch{}return P}}catch(d){console.warn("Auth proxy fallback failed:",d)}throw new Error(u.message)}if(!i.user||!i.session)throw console.log("‚ùå No user/session returned",{user:!!i.user,session:!!i.session}),new Error("Authentication failed");console.log("‚úÖ Supabase auth successful",{userId:i.user.id,email:i.user.email,confirmed:i.user.email_confirmed_at,lastSignIn:i.user.last_sign_in_at});const f=await this.buildUserProfile(i.user);try{localStorage.setItem("osrx_auth_path",JSON.stringify({path:"direct",at:Date.now()}))}catch{}return f}catch(g){console.log("üí• Auth error:",g),console.log("üöÄ IMMEDIATE fallback to direct Supabase API call...");try{const h="https://emfrwckxctyarphjvfeu.supabase.co".trim(),i="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVtZnJ3Y2t4Y3R5YXJwaGp2ZmV1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNjM2NjcsImV4cCI6MjA3MzYzOTY2N30.yYrhigcrMY82OkA4KPqSANtN5YgeA6xGH9fnrTe5k8c".trim();if(!h||!i)throw new Error("Supabase env missing for direct fallback");const u=await Promise.race([fetch(`${h}/auth/v1/token?grant_type=password`,{method:"POST",headers:{"Content-Type":"application/json",apikey:i,Authorization:`Bearer ${i}`},body:JSON.stringify({email:o,password:r})}),new Promise((f,m)=>setTimeout(()=>{console.log("‚è∞ TIMEOUT: Direct API exceeded 10 seconds"),m(new Error("Direct API timeout after 10 seconds"))},1e4))]);if(console.log("üåê Direct API response status:",u.status),u.ok){const f=await u.json();console.log("‚úÖ Direct API login successful",{hasAccessToken:!!f.access_token}),console.log("üéØ Bypassing setSession, parsing JWT directly...");try{const m=f.access_token,c=JSON.parse(atob(m.split(".")[1]));console.log("üîç JWT payload parsed:",{sub:c.sub,email:c.email,exp:c.exp});const w={id:c.sub,email:c.email,created_at:new Date(c.iat*1e3).toISOString(),user_metadata:{}},d=await this.buildUserProfile(w);console.log("‚úÖ User profile created from JWT:",{id:d.id,email:d.email});try{localStorage.setItem("osrx_auth_path",JSON.stringify({path:"jwt-direct",at:Date.now()})),localStorage.setItem("osrx_auth_tokens",JSON.stringify({access_token:f.access_token,refresh_token:f.refresh_token,expires_at:c.exp*1e3,stored_at:Date.now()})),localStorage.setItem("osrx_user_profile",JSON.stringify(d))}catch{}return d}catch(m){console.log("‚ùå JWT parsing failed, attempting setSession...",m);const c=p.auth.setSession({access_token:f.access_token,refresh_token:f.refresh_token}),w=new Promise((y,P)=>setTimeout(()=>P(new Error("setSession timeout")),1e3)),{data:d,error:S}=await Promise.race([c,w]);if(S)throw S;if(!d?.session?.user)throw new Error("Failed to establish session from direct login");const _=await this.buildUserProfile(d.session.user);try{localStorage.setItem("osrx_auth_path",JSON.stringify({path:"direct-api-fallback",at:Date.now()})),localStorage.setItem("osrx_user_profile",JSON.stringify(_))}catch{}return _}}else{const f=await u.text();console.log("‚ùå Direct API failed:",u.status,f)}}catch(h){console.log("üí• Direct API error:",h)}throw g}}static async signup(e){console.log("üìù Signup attempt for:",e.email);try{const{data:o,error:r}=await p.auth.signUp({email:e.email,password:e.password,options:{data:{first_name:e.firstName,last_name:e.lastName,role:e.role,specialty:e.specialty||"",institution:e.institution||"",license_number:e.licenseNumber||"",years_experience:e.yearsExperience||0}}});if(r)throw console.log("‚ùå Signup error:",r.message),new Error(r.message);if(!o.user)throw new Error("Signup failed - no user created");return console.log("‚úÖ Signup successful, check email for confirmation"),this.buildUserProfile(o.user,e)}catch(o){throw console.log("üí• Signup error:",o),o}}static async getCurrentUser(){try{const{data:{session:e}}=await p.auth.getSession();if(e?.user)return console.log("üîÑ Restored user from Supabase session"),this.buildUserProfile(e.user);const o=(()=>{try{const r=localStorage.getItem("osrx_auth_path");return r?JSON.parse(r):null}catch(r){return console.warn("Failed to read auth path from localStorage:",r),null}})();if(!o){if(console.log("üö´ No authentication path found"),window.location.hostname!=="localhost"){console.log("üîÑ Creating default user for unauthenticated production session");const r=this.createDevUser("user@oncosaferx.com");try{localStorage.setItem("osrx_user_profile",JSON.stringify(r))}catch(s){console.error("Failed to store default user profile:",s)}return r}return null}if(console.log("üîç Found auth path:",o),o.path==="dev"&&window.location.hostname==="localhost"){console.log("üîÑ Restoring dev user session");const r=(()=>{try{const t=localStorage.getItem("osrx_dev_user");return t?JSON.parse(t):null}catch{return null}})(),s=(()=>{try{const t=localStorage.getItem("osrx_auth_tokens");return t?JSON.parse(t):null}catch{return null}})();if(!s||!s.access_token||s.expires_at<=Date.now()){console.log("üîÑ Creating fresh dev tokens for session restoration");const t={access_token:`dev-token-${Date.now()}`,refresh_token:`dev-refresh-${Date.now()}`,expires_at:Date.now()+1440*60*1e3,stored_at:Date.now()};try{localStorage.setItem("osrx_auth_tokens",JSON.stringify(t)),console.log("üíæ Refreshed dev tokens for API calls")}catch(a){console.error("‚ùå Failed to refresh dev tokens:",a)}}else console.log("‚úÖ Valid dev tokens found, reusing for API calls");return r||this.createDevUser("dev@oncosaferx.com")}if(["jwt-direct","direct-api-fallback"].includes(o.path)){console.log("üîÑ Checking stored JWT tokens for session restoration");const r=(()=>{try{const t=localStorage.getItem("osrx_auth_tokens");return t?JSON.parse(t):null}catch{return null}})(),s=(()=>{try{const t=localStorage.getItem("osrx_user_profile");return t?JSON.parse(t):null}catch{return null}})();if(r&&s){const t=Date.now(),a=r.expires_at,l=t>=a-300*1e3;if(console.log("üîç Token validation:",{hasTokens:!!r.access_token,hasUser:!!s.id,expiresAt:new Date(a).toISOString(),isExpired:l,timeLeft:Math.round((a-t)/1e3/60)+" minutes"}),l)console.log("‚è∞ Stored tokens expired, clearing auth data"),this.clearStoredAuth();else return console.log("‚úÖ Restored user from stored JWT tokens"),s}}return console.log("üö´ No valid session found for auth path:",o.path),null}catch(e){return console.log("Error getting current user:",e),null}}static async logout(){await p.auth.signOut(),this.clearStoredAuth()}static clearStoredAuth(){localStorage.removeItem("osrx_dev_auth"),localStorage.removeItem("osrx_dev_user"),localStorage.removeItem("osrx_auth_path"),localStorage.removeItem("osrx_auth_tokens"),localStorage.removeItem("osrx_user_profile")}static createDevUser(e){return{id:"dev-"+e.replace("@","-at-").replace(".","-dot-"),email:e,firstName:e.split("@")[0]||"Dev",lastName:"User",role:"oncologist",specialty:"Medical Oncology",institution:"Development Hospital",licenseNumber:"DEV123456",yearsExperience:5,preferences:this.getDefaultPreferences("oncologist"),persona:this.createDefaultPersona("oncologist"),createdAt:new Date().toISOString(),lastLogin:new Date().toISOString(),isActive:!0,roles:["oncologist"],permissions:["read","write","analyze"]}}static async buildUserProfile(e,o){console.log("üîß buildUserProfile called with user:",{id:e.id,email:e.email,user_metadata:e.user_metadata,identity_data:e.identities?.[0]?.identity_data});const r=e.user_metadata?.role||o?.role||"oncologist",s={id:e.id,email:e.email||o?.email||"",firstName:e.user_metadata?.first_name||o?.firstName||"",lastName:e.user_metadata?.last_name||o?.lastName||"",role:r,specialty:e.user_metadata?.specialty||o?.specialty||"",institution:e.user_metadata?.institution||o?.institution||"",licenseNumber:e.user_metadata?.license_number||o?.licenseNumber||"",yearsExperience:e.user_metadata?.years_experience||o?.yearsExperience||0,preferences:e.user_metadata?.preferences||this.getDefaultPreferences(r),persona:e.user_metadata?.persona||this.createDefaultPersona(r),createdAt:e.created_at||new Date().toISOString(),lastLogin:new Date().toISOString(),isActive:!0,roles:[r],permissions:this.getRolePermissions(r)};return console.log("üîß buildUserProfile result:",{firstName:s.firstName,lastName:s.lastName,specialty:s.specialty,licenseNumber:s.licenseNumber,yearsExperience:s.yearsExperience}),s}static getDefaultPreferences(e){return{theme:"light",notifications:!0,autoSave:!0,language:"en"}}static createDefaultPersona(e){return{id:"default-"+e,name:e.charAt(0).toUpperCase()+e.slice(1),role:e,preferences:{aiAssistanceLevel:"moderate",clinicalFocus:e==="oncologist"?"treatment":"general",riskTolerance:"moderate"},isActive:!0,createdAt:new Date().toISOString()}}static getRolePermissions(e){return{oncologist:["read","write","prescribe","analyze"],pharmacist:["read","write","dispense","analyze"],nurse:["read","write","administer"],researcher:["read","analyze","export"],student:["read"]}[e]||["read"]}static onAuthStateChange(e){return p.auth.onAuthStateChange(async(o,r)=>{if(r?.user)try{const s=await this.getCurrentUser();e(s)}catch(s){console.error("Error in auth state change:",s),e(null)}else e(null)})}static async requestPasswordReset(e,o){const{error:r}=await p.auth.resetPasswordForEmail(e,{redirectTo:o||`${window.location.origin}/reset-password`});if(r)throw new Error(r.message)}static async updateProfile(e,o){if(console.log("üîß === AUTH SERVICE UPDATE PROFILE DEBUG START ==="),console.log("üîß Updating profile for user:",e,"with updates:",o),console.log("üîß Current hostname:",window.location.hostname),window.location.hostname==="localhost"||e.includes("dev-")){console.log("üîß Dev mode: Updating profile locally");try{const t=localStorage.getItem("osrx_dev_user");if(t){const l={...JSON.parse(t),...o};return localStorage.setItem("osrx_dev_user",JSON.stringify(l)),console.log("‚úÖ Dev profile updated in localStorage"),l}}catch(t){console.error("Failed to update dev user profile:",t)}const s=this.createDevUser("dev@oncosaferx.com");return Object.assign(s,o),s}console.log("üåê Production mode: Updating profile via Supabase API");try{const s=(()=>{try{const n=localStorage.getItem("osrx_auth_tokens");return n?JSON.parse(n):null}catch{return null}})();let t=null;const a={"Content-Type":"application/json"};if(s?.access_token?(console.log("‚úÖ Auth tokens found, attempting API call to update profile"),a.Authorization=`Bearer ${s.access_token}`):console.warn("‚ö†Ô∏è No auth tokens found, attempting server update without Authorization"),console.log("üîß Making fetch request to /api/supabase-auth/profile..."),t=await fetch("/api/supabase-auth/profile",{method:"PUT",headers:a,body:JSON.stringify(o)}),console.log("üîß API Response status:",t.status),console.log("üîß API Response ok:",t.ok),console.log("üîß API Response headers:",Object.fromEntries(t.headers.entries())),!t.ok){const n=await t.text();return console.error("üîß ‚ùå Profile update API failed:",t.status,n),console.log("üîß üîÑ Falling back to localStorage update"),this.updateProfileLocalStorage(e,o)}const l=await t.json();console.log("üîß ‚úÖ Profile updated successfully via API:",l);try{localStorage.setItem("osrx_user_profile",JSON.stringify(l.user))}catch(n){console.warn("‚ö†Ô∏è Failed to sync profile to localStorage:",n)}console.log("üîß üîÑ Refreshing user session to get latest data...");try{const{data:n}=await p.auth.getSession();if(n?.session?.user){console.log("üîß ‚úÖ Got refreshed user session");const g=await this.buildUserProfile(n.session.user);return localStorage.setItem("osrx_user_profile",JSON.stringify(g)),console.log("üîß ‚úÖ Returning refreshed user profile:",g),console.log("üîß === AUTH SERVICE UPDATE PROFILE DEBUG END (SUCCESS) ==="),g}}catch(n){console.warn("üîß ‚ö†Ô∏è Failed to refresh session, using API result:",n)}return console.log("üîß ‚úÖ Returning updated user from API:",l.user),console.log("üîß === AUTH SERVICE UPDATE PROFILE DEBUG END (SUCCESS) ==="),l.user}catch(s){console.error("üîß ‚ùå API profile update failed:",s),console.log("üîß üîÑ Falling back to localStorage update");const t=this.updateProfileLocalStorage(e,o);return console.log("üîß ‚úÖ Returning fallback result:",t),console.log("üîß === AUTH SERVICE UPDATE PROFILE DEBUG END (FALLBACK) ==="),t}}static updateProfileLocalStorage(e,o){console.log("üîÑ Using localStorage fallback for profile update");try{const t={...(()=>{try{const a=localStorage.getItem("osrx_user_profile");return a?JSON.parse(a):null}catch(a){return console.warn("Failed to read from localStorage:",a),null}})()||{id:e,email:"user@oncosaferx.com",firstName:"User",lastName:"Name",role:"oncologist",specialty:"Medical Oncology",institution:"Hospital",licenseNumber:"",yearsExperience:0,preferences:this.getDefaultPreferences("oncologist"),persona:this.createDefaultPersona("oncologist"),createdAt:new Date().toISOString(),lastLogin:new Date().toISOString(),isActive:!0,roles:["oncologist"],permissions:["read","write","analyze"],...o},...o};try{localStorage.setItem("osrx_user_profile",JSON.stringify(t)),console.log("‚úÖ Profile updated successfully in localStorage (fallback)")}catch(a){console.error("localStorage write failed:",a),console.log("‚ö†Ô∏è Returning profile without persistence due to localStorage error")}return t}catch(r){console.error("Failed to update profile in localStorage fallback:",r);const s={id:e,email:o.email||"user@oncosaferx.com",firstName:o.firstName||"User",lastName:o.lastName||"Name",role:o.role||"oncologist",specialty:o.specialty||"Medical Oncology",institution:o.institution||"",licenseNumber:o.licenseNumber||"",yearsExperience:o.yearsExperience||0,preferences:o.preferences||this.getDefaultPreferences("oncologist"),persona:o.persona||this.createDefaultPersona("oncologist"),createdAt:new Date().toISOString(),lastLogin:new Date().toISOString(),isActive:!0,roles:["oncologist"],permissions:["read","write","analyze"]};return console.log("üö® Using minimal profile due to storage errors"),s}}}export{v as SupabaseAuthService};
