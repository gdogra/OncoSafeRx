{"version":3,"file":"InteractionChecker-ppLmqfz8.js","sources":["../../src/components/Interactions/InteractionResults.tsx","../../src/components/DrugSearch/DrugSearchBar.tsx","../../src/components/Interactions/DrugSelector.tsx","../../src/components/Interactions/AdvancedInteractionChecker.tsx","../../src/components/Interactions/InteractionChecker.tsx"],"sourcesContent":["import React from 'react';\nimport { InteractionCheckResult, DrugInteraction } from '../../types';\nimport Card from '../UI/Card';\nimport Alert from '../UI/Alert';\nimport { AlertTriangle, Info, Database, Globe, MapPinned } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { inferBiomarkerForDrug } from '../../utils/biomarkers';\n\ninterface InteractionResultsProps {\n  results: InteractionCheckResult;\n}\n\nconst InteractionResults: React.FC<InteractionResultsProps> = ({ results }) => {\n  const getSeverityIcon = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'major':\n        return <AlertTriangle className=\"w-5 h-5 text-red-600\" />;\n      case 'moderate':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />;\n      case 'minor':\n        return <Info className=\"w-5 h-5 text-blue-600\" />;\n      default:\n        return <Info className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'major':\n        return 'border-l-red-500 bg-red-50';\n      case 'moderate':\n        return 'border-l-yellow-500 bg-yellow-50';\n      case 'minor':\n        return 'border-l-blue-500 bg-blue-50';\n      default:\n        return 'border-l-gray-500 bg-gray-50';\n    }\n  };\n\n  const getEvidenceColor = (level?: string) => {\n    if (!level) return 'bg-gray-100 text-gray-700';\n    \n    switch (level.toUpperCase()) {\n      case 'A':\n        return 'bg-green-100 text-green-800';\n      case 'B':\n        return 'bg-blue-100 text-blue-800';\n      case 'C':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'D':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const navigate = useNavigate();\n\n  const renderInteractionCard = (interaction: DrugInteraction, source: 'stored' | 'external', index: number) => (\n    <Card \n      key={`${interaction.drug1_rxcui || 'unknown'}-${interaction.drug2_rxcui || 'unknown'}-${source}-${index}`}\n      className={`border-l-4 ${getSeverityColor(interaction.severity)}`}\n      padding=\"md\"\n    >\n      <div className=\"space-y-4\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {getSeverityIcon(interaction.severity)}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">\n                {interaction.severity} Interaction\n              </h3>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                {source === 'stored' ? (\n                  <Database className=\"w-4 h-4 text-gray-400\" />\n                ) : (\n                  <Globe className=\"w-4 h-4 text-gray-400\" />\n                )}\n                <span className=\"text-sm text-gray-500\">\n                  {source === 'stored' ? 'Database' : 'External Source'}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            {interaction.evidence_level && (\n              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getEvidenceColor(interaction.evidence_level)}`}>\n                Evidence Level {interaction.evidence_level}\n              </span>\n            )}\n            <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${\n              interaction.severity === 'major' \n                ? 'bg-red-100 text-red-800'\n                : interaction.severity === 'moderate'\n                ? 'bg-yellow-100 text-yellow-800'\n                : 'bg-blue-100 text-blue-800'\n            }`}>\n              {interaction.riskLevel || interaction.severity.toUpperCase()}\n            </span>\n          </div>\n        </div>\n\n        {/* Drug Pair */}\n        <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n          <div className=\"flex items-center justify-center space-x-4\">\n            <div className=\"text-center\">\n              <p className=\"font-medium text-gray-900\">\n                {interaction.drug1?.name || `Drug ${interaction.drug1_rxcui}`}\n              </p>\n              <p className=\"text-sm text-gray-500\">RXCUI: {interaction.drug1_rxcui}</p>\n            </div>\n            <div className=\"text-2xl text-gray-400\">Ã—</div>\n            <div className=\"text-center\">\n              <p className=\"font-medium text-gray-900\">\n                {interaction.drug2?.name || `Drug ${interaction.drug2_rxcui}`}\n              </p>\n              <p className=\"text-sm text-gray-500\">RXCUI: {interaction.drug2_rxcui}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Interaction Details */}\n        <div className=\"space-y-3\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Effect</h4>\n            <p className=\"text-gray-700\">{interaction.effect}</p>\n          </div>\n          \n          {interaction.mechanism && (\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Mechanism</h4>\n              <p className=\"text-gray-700\">{interaction.mechanism}</p>\n            </div>\n          )}\n          \n          {interaction.management && (\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Management</h4>\n              <p className=\"text-gray-700\">{interaction.management}</p>\n            </div>\n          )}\n          \n          {interaction.sources && interaction.sources.length > 0 && (\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Sources</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {interaction.sources.map((source, index) => (\n                  <span\n                    key={index}\n                    className=\"inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-700\"\n                  >\n                    {source}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Quick Trials link */}\n          <div>\n            <button\n              type=\"button\"\n              onClick={() => {\n                const name1 = interaction.drug1?.name;\n                const name2 = interaction.drug2?.name;\n                const m = inferBiomarkerForDrug(name1 || '') || inferBiomarkerForDrug(name2 || '');\n                if (m) navigate(`/trials?biomarker=${encodeURIComponent(m)}`);\n                else navigate('/trials');\n              }}\n              className=\"inline-flex items-center px-3 py-1.5 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200\"\n            >\n              <MapPinned className=\"w-3 h-3 mr-1\" /> Find Trials\n            </button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const allInteractions = [\n    ...results.interactions.stored.map(i => ({ ...i, source: 'stored' as const })),\n    ...results.interactions.external.map(i => ({ ...i, source: 'external' as const }))\n  ];\n\n  // Group by severity\n  const groupedInteractions = allInteractions.reduce((groups, interaction) => {\n    const severity = interaction.severity;\n    if (!groups[severity]) {\n      groups[severity] = [];\n    }\n    groups[severity].push(interaction);\n    return groups;\n  }, {} as Record<string, Array<DrugInteraction & { source: 'stored' | 'external' }>>);\n\n  const severityOrder = ['major', 'moderate', 'minor', 'unknown'];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Detailed Interaction Analysis</h2>\n        \n        {allInteractions.length === 0 ? (\n          <Alert type=\"success\" title=\"No Interactions Found\">\n            No known interactions were detected between the selected medications.\n          </Alert>\n        ) : (\n          <div className=\"space-y-6\">\n            {severityOrder.map(severity => {\n              const interactions = groupedInteractions[severity];\n              if (!interactions || interactions.length === 0) return null;\n              \n              return (\n                <div key={severity}>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-3 capitalize flex items-center space-x-2\">\n                    {getSeverityIcon(severity)}\n                    <span>{severity} Interactions ({interactions.length})</span>\n                  </h3>\n                  <div className=\"space-y-4\">\n                    {interactions.map((interaction, index) => \n                      renderInteractionCard(interaction, interaction.source, index)\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Disclaimer */}\n      <Alert type=\"warning\" title=\"Important Disclaimer\">\n        This interaction checker is for informational purposes only and should not replace professional medical advice. \n        Always consult with a healthcare provider before making any changes to your medication regimen.\n      </Alert>\n    </div>\n  );\n};\n\nexport default InteractionResults;\n","import React, { useState } from 'react';\nimport { Search, X } from 'lucide-react';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\ninterface DrugSearchBarProps {\n  onSearch: (query: string) => void;\n  loading?: boolean;\n  placeholder?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  inputId?: string;\n}\n\nconst DrugSearchBar: React.FC<DrugSearchBarProps> = ({\n  onSearch,\n  loading = false,\n  placeholder = \"Search drugs by name (e.g., aspirin, ibuprofen)...\",\n  value,\n  onChange,\n  inputId,\n}) => {\n  const [localValue, setLocalValue] = useState(value || '');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setLocalValue(newValue);\n    onChange?.(newValue);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (localValue.trim()) {\n      onSearch(localValue.trim());\n    }\n  };\n\n  const handleClear = () => {\n    setLocalValue('');\n    onChange?.('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"w-full\">\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <Search className=\"h-5 w-5 text-gray-400\" />\n        </div>\n        <input\n          id={inputId}\n          type=\"text\"\n          value={value !== undefined ? value : localValue}\n          onChange={handleInputChange}\n          onKeyDown={(e) => {\n            if (e.key === 'Escape') {\n              e.preventDefault();\n              handleClear();\n              (e.target as HTMLInputElement).blur();\n            }\n          }}\n          placeholder={placeholder}\n          className=\"block w-full pl-10 pr-16 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm\"\n          disabled={loading}\n        />\n        <div className=\"absolute inset-y-0 right-0 flex items-center\">\n          {(value || localValue) && !loading && (\n            <button\n              type=\"button\"\n              onClick={handleClear}\n              className=\"p-2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          )}\n          {loading ? (\n            <div className=\"pr-3\">\n              <LoadingSpinner size=\"sm\" />\n            </div>\n          ) : (\n            <button\n              type=\"submit\"\n              disabled={!localValue.trim()}\n              className=\"mr-2 px-4 py-2 bg-primary-600 text-white text-sm font-medium rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Search\n            </button>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default DrugSearchBar;\n","import React, { useState, useCallback } from 'react';\nimport { Drug, DrugSearchResult } from '../../types';\nimport { drugService } from '../../services/api';\nimport DrugSearchBar from '../DrugSearch/DrugSearchBar';\nimport Alert from '../UI/Alert';\nimport Tooltip from '../UI/Tooltip';\nimport { Pill, Plus, Info, Clock, Search, Tag } from 'lucide-react';\n\ninterface DrugSelectorProps {\n  onDrugSelect: (drug: Drug) => void;\n}\n\n// Common drug shortcuts for quick access\nconst drugShortcuts = [\n  { term: 'aspirin', label: 'Aspirin', category: 'Pain Relief' },\n  { term: 'ibuprofen', label: 'Ibuprofen', category: 'Pain Relief' },\n  { term: 'warfarin', label: 'Warfarin', category: 'Anticoagulant' },\n  { term: 'metformin', label: 'Metformin', category: 'Diabetes' },\n  { term: 'atorvastatin', label: 'Atorvastatin', category: 'Cholesterol' },\n  { term: 'omeprazole', label: 'Omeprazole', category: 'Acid Reducer' },\n  { term: 'lisinopril', label: 'Lisinopril', category: 'Blood Pressure' },\n  { term: 'amlodipine', label: 'Amlodipine', category: 'Blood Pressure' },\n  { term: 'levothyroxine', label: 'Levothyroxine', category: 'Thyroid' },\n  { term: 'clopidogrel', label: 'Clopidogrel', category: 'Antiplatelet' },\n  { term: 'fluorouracil', label: 'Fluorouracil', category: 'Oncology' },\n  { term: 'cisplatin', label: 'Cisplatin', category: 'Oncology' },\n];\n\nconst DrugSelector: React.FC<DrugSelectorProps> = ({ onDrugSelect }) => {\n  const [searchResults, setSearchResults] = useState<DrugSearchResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearch = useCallback(async (query: string) => {\n    if (query.length < 2) {\n      setError('Please enter at least 2 characters');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const results = await drugService.searchDrugs(query);\n      setSearchResults(results);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to search drugs');\n      setSearchResults(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const handleDrugSelect = (drug: Drug) => {\n    onDrugSelect(drug);\n    setSearchResults(null);\n    setSearchQuery('');\n  };\n\n  // Handle shortcut selection\n  const handleShortcutClick = (term: string) => {\n    setSearchQuery(term);\n    handleSearch(term);\n  };\n\n  // Get drug type tooltip content\n  const getDrugTypeTooltip = (drug: Drug) => (\n    <div className=\"space-y-1 text-xs\">\n      <div className=\"font-semibold\">Drug Information:</div>\n      <div>RXCUI: {drug.rxcui}</div>\n      {drug.tty && <div>Type: {drug.tty}</div>}\n      <div className=\"mt-2 pt-2 border-t border-gray-200\">\n        <div className=\"text-gray-300\">Click to add to interaction analysis</div>\n      </div>\n    </div>\n  );\n\n  // Get clinical considerations tooltip\n  const getClinicalConsiderations = () => (\n    <div className=\"space-y-2 text-xs\">\n      <div className=\"font-semibold text-purple-200\">Clinical Considerations:</div>\n      <ul className=\"space-y-1 list-disc list-inside\">\n        <li>Verify drug name and strength</li>\n        <li>Check for generic/brand equivalents</li>\n        <li>Consider patient allergies</li>\n        <li>Review indication and dosing</li>\n      </ul>\n    </div>\n  );\n\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-2 mb-4\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Add Medication</h3>\n        <Tooltip\n          content={getClinicalConsiderations()}\n          type=\"clinical\"\n          iconOnly\n          position=\"right\"\n        />\n      </div>\n\n      <DrugSearchBar\n        onSearch={handleSearch}\n        loading={loading}\n        placeholder=\"Search for a medication to add...\"\n        value={searchQuery}\n        onChange={setSearchQuery}\n      />\n\n      {/* Quick Drug Shortcuts */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center space-x-2\">\n          <Tag className=\"w-4 h-4 text-gray-500\" />\n          <span className=\"text-sm font-medium text-gray-700\">Quick Access:</span>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n          {drugShortcuts.map((shortcut) => (\n            <button\n              key={shortcut.term}\n              onClick={() => handleShortcutClick(shortcut.term)}\n              className=\"flex flex-col items-start p-2 text-left border border-gray-200 rounded-md hover:bg-gray-50 hover:border-gray-300 transition-colors\"\n            >\n              <span className=\"text-sm font-medium text-gray-900\">{shortcut.label}</span>\n              <span className=\"text-xs text-gray-500\">{shortcut.category}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {error && (\n        <Alert type=\"error\">\n          {error}\n        </Alert>\n      )}\n\n      {searchResults && searchResults.count > 0 && (\n        <div className=\"border border-gray-200 rounded-lg max-h-96 overflow-y-auto\">\n          <div className=\"p-3 bg-gray-50 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm font-medium text-gray-700\">\n                Found {searchResults.count} results for \"{searchResults.query}\"\n              </p>\n              <Tooltip\n                content=\"Click on any medication to add it to your interaction analysis\"\n                type=\"info\"\n                iconOnly\n                position=\"left\"\n              />\n            </div>\n          </div>\n          <div className=\"divide-y divide-gray-200\">\n            {searchResults.results.slice(0, 10).map((drug) => (\n              <Tooltip\n                key={`${drug.rxcui}-${drug.tty}`}\n                content={getDrugTypeTooltip(drug)}\n                position=\"right\"\n                maxWidth=\"max-w-xs\"\n              >\n                <div\n                  className=\"p-4 hover:bg-gray-50 cursor-pointer transition-colors\"\n                  onClick={() => handleDrugSelect(drug)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\n                        <Pill className=\"w-4 h-4 text-primary-600\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {drug.name}\n                        </p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <p className=\"text-xs text-gray-500\">RXCUI: {drug.rxcui}</p>\n                          {drug.tty && (\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800\">\n                              {drug.tty}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <Plus className=\"w-4 h-4 text-gray-400\" />\n                  </div>\n                </div>\n              </Tooltip>\n            ))}\n          </div>\n          {searchResults.count > 10 && (\n            <div className=\"p-3 bg-gray-50 border-t border-gray-200 text-center\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-gray-400\" />\n                <p className=\"text-xs text-gray-500\">\n                  Showing first 10 results. Refine your search for more specific results.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {searchResults && searchResults.count === 0 && (\n        <Alert type=\"info\">\n          No drugs found matching \"{searchResults.query}\". Try a different search term.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default DrugSelector;","import React, { useState, useEffect, useMemo } from 'react';\nimport { AlertTriangle, Shield, Brain, Activity, Clock, Users, FileText, ExternalLink, CheckCircle, XCircle, AlertCircle } from 'lucide-react';\nimport Card from '../UI/Card';\nimport { Drug } from '../../types';\n\ninterface DrugInteraction {\n  id: string;\n  drug1: string;\n  drug2: string;\n  severity: 'major' | 'moderate' | 'minor';\n  mechanism: string;\n  clinicalEffect: string;\n  recommendation: string;\n  evidence: 'established' | 'probable' | 'possible' | 'theoretical';\n  references: string[];\n  alternatives?: string[];\n  monitoring?: string[];\n  doseAdjustment?: string;\n  contraindicated?: boolean;\n  onsetTime?: string;\n  duration?: string;\n  prevalence?: number;\n}\n\ninterface ClinicalRecommendation {\n  type: 'avoid' | 'monitor' | 'adjust_dose' | 'adjust_timing' | 'consider_alternative';\n  priority: 'high' | 'medium' | 'low';\n  description: string;\n  action: string;\n  rationale: string;\n}\n\ninterface AdvancedInteractionCheckerProps {\n  selectedDrugs: Drug[];\n  onDrugRemove: (drugId: string) => void;\n  patientProfile?: {\n    age?: number;\n    weight?: number;\n    renalFunction?: 'normal' | 'mild' | 'moderate' | 'severe';\n    hepaticFunction?: 'normal' | 'mild' | 'moderate' | 'severe';\n    comorbidities?: string[];\n    allergies?: string[];\n  };\n}\n\nconst AdvancedInteractionChecker: React.FC<AdvancedInteractionCheckerProps> = ({\n  selectedDrugs,\n  onDrugRemove,\n  patientProfile\n}) => {\n  const [interactions, setInteractions] = useState<DrugInteraction[]>([]);\n  const [recommendations, setRecommendations] = useState<ClinicalRecommendation[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedSeverity, setSelectedSeverity] = useState<string>('all');\n  const [selectedEvidence, setSelectedEvidence] = useState<string>('all');\n\n  // Mock interaction data - in real app, this would come from API\n  const mockInteractions: DrugInteraction[] = [\n    {\n      id: '1',\n      drug1: 'Warfarin',\n      drug2: 'Fluorouracil',\n      severity: 'major',\n      mechanism: 'CYP2C9 inhibition',\n      clinicalEffect: 'Increased anticoagulant effect, risk of bleeding',\n      recommendation: 'Monitor INR closely, consider dose reduction',\n      evidence: 'established',\n      references: ['PMID: 12345678', 'PMID: 87654321'],\n      alternatives: ['Apixaban', 'Rivaroxaban'],\n      monitoring: ['INR weekly for 2 weeks', 'CBC weekly', 'Signs of bleeding'],\n      doseAdjustment: 'Reduce warfarin dose by 25-50%',\n      onsetTime: '2-5 days',\n      duration: 'Throughout treatment',\n      prevalence: 85\n    },\n    {\n      id: '2',\n      drug1: 'Metformin',\n      drug2: 'Iodinated contrast',\n      severity: 'moderate',\n      mechanism: 'Impaired renal clearance',\n      clinicalEffect: 'Risk of lactic acidosis',\n      recommendation: 'Hold metformin 48h before and after contrast',\n      evidence: 'probable',\n      references: ['PMID: 11111111'],\n      monitoring: ['Renal function', 'Lactate levels'],\n      onsetTime: 'Immediate',\n      duration: '48-72 hours',\n      prevalence: 60\n    },\n    {\n      id: '3',\n      drug1: 'Simvastatin',\n      drug2: 'Clarithromycin',\n      severity: 'major',\n      mechanism: 'CYP3A4 inhibition',\n      clinicalEffect: 'Increased risk of rhabdomyolysis',\n      recommendation: 'Avoid combination or use lowest statin dose',\n      evidence: 'established',\n      references: ['PMID: 22222222'],\n      alternatives: ['Pravastatin', 'Rosuvastatin'],\n      monitoring: ['CK levels', 'Muscle symptoms'],\n      contraindicated: true,\n      onsetTime: '1-7 days',\n      duration: 'Throughout treatment',\n      prevalence: 75\n    }\n  ];\n\n  useEffect(() => {\n    if (selectedDrugs.length >= 2) {\n      setLoading(true);\n      // Simulate API call\n      setTimeout(() => {\n        setInteractions(mockInteractions);\n        generateRecommendations(mockInteractions);\n        setLoading(false);\n      }, 1000);\n    } else {\n      setInteractions([]);\n      setRecommendations([]);\n    }\n  }, [selectedDrugs]);\n\n  const generateRecommendations = (interactions: DrugInteraction[]) => {\n    const recs: ClinicalRecommendation[] = [];\n\n    interactions.forEach(interaction => {\n      if (interaction.contraindicated) {\n        recs.push({\n          type: 'avoid',\n          priority: 'high',\n          description: `Contraindicated combination: ${interaction.drug1} + ${interaction.drug2}`,\n          action: 'Consider alternative medications',\n          rationale: interaction.clinicalEffect\n        });\n      } else if (interaction.severity === 'major') {\n        if (interaction.alternatives) {\n          recs.push({\n            type: 'consider_alternative',\n            priority: 'high',\n            description: `High-risk interaction: ${interaction.drug1} + ${interaction.drug2}`,\n            action: `Consider alternatives: ${interaction.alternatives.join(', ')}`,\n            rationale: interaction.clinicalEffect\n          });\n        }\n        if (interaction.monitoring) {\n          recs.push({\n            type: 'monitor',\n            priority: 'high',\n            description: `Intensive monitoring required`,\n            action: interaction.monitoring.join(', '),\n            rationale: 'Major interaction with significant clinical consequences'\n          });\n        }\n      } else if (interaction.severity === 'moderate') {\n        recs.push({\n          type: 'monitor',\n          priority: 'medium',\n          description: `Moderate interaction: ${interaction.drug1} + ${interaction.drug2}`,\n          action: interaction.recommendation,\n          rationale: interaction.clinicalEffect\n        });\n      }\n\n      if (interaction.doseAdjustment) {\n        recs.push({\n          type: 'adjust_dose',\n          priority: interaction.severity === 'major' ? 'high' : 'medium',\n          description: `Dose adjustment recommended`,\n          action: interaction.doseAdjustment,\n          rationale: interaction.mechanism\n        });\n      }\n    });\n\n    // Patient-specific recommendations\n    if (patientProfile?.renalFunction && patientProfile.renalFunction !== 'normal') {\n      recs.push({\n        type: 'adjust_dose',\n        priority: 'medium',\n        description: 'Renal impairment detected',\n        action: 'Consider dose adjustments for renally eliminated drugs',\n        rationale: `Patient has ${patientProfile.renalFunction} renal function`\n      });\n    }\n\n    if (patientProfile?.hepaticFunction && patientProfile.hepaticFunction !== 'normal') {\n      recs.push({\n        type: 'adjust_dose',\n        priority: 'medium',\n        description: 'Hepatic impairment detected',\n        action: 'Consider dose adjustments for hepatically metabolized drugs',\n        rationale: `Patient has ${patientProfile.hepaticFunction} hepatic function`\n      });\n    }\n\n    setRecommendations(recs);\n  };\n\n  const filteredInteractions = useMemo(() => {\n    return interactions.filter(interaction => {\n      if (selectedSeverity !== 'all' && interaction.severity !== selectedSeverity) {\n        return false;\n      }\n      if (selectedEvidence !== 'all' && interaction.evidence !== selectedEvidence) {\n        return false;\n      }\n      return true;\n    });\n  }, [interactions, selectedSeverity, selectedEvidence]);\n\n  const severityStats = useMemo(() => {\n    const stats = { major: 0, moderate: 0, minor: 0 };\n    interactions.forEach(interaction => {\n      stats[interaction.severity]++;\n    });\n    return stats;\n  }, [interactions]);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'major': return 'text-red-600 bg-red-50 border-red-200';\n      case 'moderate': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'minor': return 'text-green-600 bg-green-50 border-green-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'major': return <XCircle className=\"w-4 h-4\" />;\n      case 'moderate': return <AlertCircle className=\"w-4 h-4\" />;\n      case 'minor': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getEvidenceColor = (evidence: string) => {\n    switch (evidence) {\n      case 'established': return 'text-blue-600 bg-blue-50';\n      case 'probable': return 'text-indigo-600 bg-indigo-50';\n      case 'possible': return 'text-purple-600 bg-purple-50';\n      case 'theoretical': return 'text-gray-600 bg-gray-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600 bg-red-50 border-red-200';\n      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'low': return 'text-green-600 bg-green-50 border-green-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <AlertTriangle className=\"w-6 h-6 text-primary-600\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Advanced Interaction Analysis</h2>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <Brain className=\"w-4 h-4\" />\n              <span>AI-Enhanced</span>\n            </div>\n          </div>\n          {loading && (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 border-2 border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm text-gray-500\">Analyzing interactions...</span>\n            </div>\n          )}\n        </div>\n\n        {/* Quick Stats */}\n        {interactions.length > 0 && (\n          <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{severityStats.major}</div>\n              <div className=\"text-sm text-gray-500\">Major</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{severityStats.moderate}</div>\n              <div className=\"text-sm text-gray-500\">Moderate</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{severityStats.minor}</div>\n              <div className=\"text-sm text-gray-500\">Minor</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary-600\">{recommendations.length}</div>\n              <div className=\"text-sm text-gray-500\">Recommendations</div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Selected Drugs */}\n      <Card>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Selected Medications ({selectedDrugs.length})</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n          {selectedDrugs.map(drug => (\n            <div key={drug.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div>\n                <div className=\"font-medium text-gray-900\">{drug.name}</div>\n                <div className=\"text-sm text-gray-500\">{drug.genericName}</div>\n              </div>\n              <button\n                onClick={() => onDrugRemove(drug.id)}\n                className=\"text-gray-400 hover:text-red-500\"\n              >\n                <XCircle className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Clinical Recommendations */}\n      {recommendations.length > 0 && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Brain className=\"w-5 h-5 text-primary-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Clinical Recommendations</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {recommendations.map((rec, index) => (\n              <div key={index} className={`p-4 rounded-lg border ${getPriorityColor(rec.priority)}`}>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0 mt-1\">\n                    {rec.type === 'avoid' && <XCircle className=\"w-5 h-5\" />}\n                    {rec.type === 'monitor' && <Activity className=\"w-5 h-5\" />}\n                    {rec.type === 'adjust_dose' && <AlertCircle className=\"w-5 h-5\" />}\n                    {rec.type === 'consider_alternative' && <Shield className=\"w-5 h-5\" />}\n                    {rec.type === 'adjust_timing' && <Clock className=\"w-5 h-5\" />}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{rec.description}</div>\n                    <div className=\"text-sm mt-1\">{rec.action}</div>\n                    <div className=\"text-xs mt-2 opacity-75\">{rec.rationale}</div>\n                  </div>\n                  <div className=\"flex-shrink-0\">\n                    <span className=\"text-xs font-medium px-2 py-1 rounded-full bg-white bg-opacity-50\">\n                      {rec.priority.toUpperCase()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Interactions List */}\n      {interactions.length > 0 && (\n        <Card>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Drug Interactions ({filteredInteractions.length})</h3>\n            <div className=\"flex space-x-3\">\n              <select\n                value={selectedSeverity}\n                onChange={(e) => setSelectedSeverity(e.target.value)}\n                className=\"text-sm border-gray-300 rounded-md\"\n              >\n                <option value=\"all\">All Severities</option>\n                <option value=\"major\">Major</option>\n                <option value=\"moderate\">Moderate</option>\n                <option value=\"minor\">Minor</option>\n              </select>\n              <select\n                value={selectedEvidence}\n                onChange={(e) => setSelectedEvidence(e.target.value)}\n                className=\"text-sm border-gray-300 rounded-md\"\n              >\n                <option value=\"all\">All Evidence Levels</option>\n                <option value=\"established\">Established</option>\n                <option value=\"probable\">Probable</option>\n                <option value=\"possible\">Possible</option>\n                <option value=\"theoretical\">Theoretical</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {filteredInteractions.map(interaction => (\n              <div key={interaction.id} className=\"border border-gray-200 rounded-lg p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`flex items-center space-x-1 px-3 py-1 rounded-full border ${getSeverityColor(interaction.severity)}`}>\n                      {getSeverityIcon(interaction.severity)}\n                      <span className=\"text-sm font-medium capitalize\">{interaction.severity}</span>\n                    </div>\n                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${getEvidenceColor(interaction.evidence)}`}>\n                      {interaction.evidence.charAt(0).toUpperCase() + interaction.evidence.slice(1)} Evidence\n                    </div>\n                    {interaction.contraindicated && (\n                      <div className=\"px-3 py-1 rounded-full text-xs font-medium text-red-600 bg-red-100\">\n                        CONTRAINDICATED\n                      </div>\n                    )}\n                  </div>\n                  {interaction.prevalence && (\n                    <div className=\"text-sm text-gray-500\">\n                      Prevalence: {interaction.prevalence}%\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Interaction Details</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div><strong>Drugs:</strong> {interaction.drug1} + {interaction.drug2}</div>\n                      <div><strong>Mechanism:</strong> {interaction.mechanism}</div>\n                      <div><strong>Clinical Effect:</strong> {interaction.clinicalEffect}</div>\n                      <div><strong>Recommendation:</strong> {interaction.recommendation}</div>\n                      {interaction.onsetTime && (\n                        <div><strong>Onset:</strong> {interaction.onsetTime}</div>\n                      )}\n                      {interaction.duration && (\n                        <div><strong>Duration:</strong> {interaction.duration}</div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Clinical Management</h4>\n                    <div className=\"space-y-3 text-sm\">\n                      {interaction.alternatives && (\n                        <div>\n                          <strong>Alternatives:</strong>\n                          <div className=\"mt-1 space-x-2\">\n                            {interaction.alternatives.map(alt => (\n                              <span key={alt} className=\"inline-block px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\">\n                                {alt}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      {interaction.monitoring && (\n                        <div>\n                          <strong>Monitoring:</strong>\n                          <ul className=\"mt-1 space-y-1\">\n                            {interaction.monitoring.map(monitor => (\n                              <li key={monitor} className=\"text-xs\">â€¢ {monitor}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      {interaction.doseAdjustment && (\n                        <div>\n                          <strong>Dose Adjustment:</strong> {interaction.doseAdjustment}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {interaction.references && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                      <FileText className=\"w-4 h-4\" />\n                      <span>References:</span>\n                      {interaction.references.map(ref => (\n                        <a key={ref} href={`https://pubmed.ncbi.nlm.nih.gov/${ref.replace('PMID: ', '')}`} \n                           target=\"_blank\" rel=\"noopener noreferrer\"\n                           className=\"text-primary-600 hover:text-primary-700 flex items-center space-x-1\">\n                          <span>{ref}</span>\n                          <ExternalLink className=\"w-3 h-3\" />\n                        </a>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Patient Profile Considerations */}\n      {patientProfile && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Users className=\"w-5 h-5 text-primary-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Patient-Specific Considerations</h3>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Demographics</h4>\n              <div className=\"space-y-1 text-sm\">\n                {patientProfile.age && <div>Age: {patientProfile.age} years</div>}\n                {patientProfile.weight && <div>Weight: {patientProfile.weight} kg</div>}\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Organ Function</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div>Renal: {patientProfile.renalFunction || 'Normal'}</div>\n                <div>Hepatic: {patientProfile.hepaticFunction || 'Normal'}</div>\n              </div>\n            </div>\n          </div>\n          {patientProfile.comorbidities && patientProfile.comorbidities.length > 0 && (\n            <div className=\"mt-4\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Comorbidities</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {patientProfile.comorbidities.map(condition => (\n                  <span key={condition} className=\"px-2 py-1 bg-gray-100 text-gray-700 rounded text-sm\">\n                    {condition}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n        </Card>\n      )}\n\n      {selectedDrugs.length < 2 && (\n        <Card>\n          <div className=\"text-center py-12\">\n            <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select Multiple Medications</h3>\n            <p className=\"text-gray-500\">\n              Add at least 2 medications to check for potential drug interactions\n            </p>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default AdvancedInteractionChecker;","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Drug, InteractionCheckResult } from '../../types';\nimport { interactionService, drugService } from '../../services/api';\nimport Alert from '../UI/Alert';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport Tooltip from '../UI/Tooltip';\nimport InteractionResults from './InteractionResults';\nimport DrugSelector from './DrugSelector';\nimport AdvancedInteractionChecker from './AdvancedInteractionChecker';\nimport FeatureErrorBoundary from '../ErrorBoundary/FeatureErrorBoundary';\nimport { AlertTriangle, X, Info } from 'lucide-react';\nimport { useSelection } from '../../context/SelectionContext';\n\nconst InteractionCheckerInner: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [selectedDrugs, setSelectedDrugs] = useState<Drug[]>([]);\n  const selection = useSelection();\n  const [results, setResults] = useState<InteractionCheckResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [altLoading, setAltLoading] = useState(false);\n  const [savedPhenotypes, setSavedPhenotypes] = useState<Record<string, string> | null>(null);\n  const [altError, setAltError] = useState<string | null>(null);\n  const [altResults, setAltResults] = useState<any[] | null>(null);\n  const [altAllResults, setAltAllResults] = useState<any[] | null>(null);\n  const [onlyCovered, setOnlyCovered] = useState(false);\n  const [onlyBest, setOnlyBest] = useState(false);\n\n  const applyAltFilters = (list: any[] | null, covered: boolean, best: boolean) => {\n    if (!Array.isArray(list)) return list;\n    let filtered = list;\n    if (covered) filtered = filtered.filter((a: any) => a.formulary === 'likely-covered');\n    if (best) filtered = filtered.filter((a: any) => a.best === true);\n    return filtered;\n  };\n\n  useEffect(() => {\n    try {\n      const saved = localStorage.getItem('pgxPhenotypes');\n      if (saved) setSavedPhenotypes(JSON.parse(saved));\n    } catch {}\n  }, []);\n\n  // Seed from global selection on first mount\n  useEffect(() => {\n    if (selectedDrugs.length === 0 && selection.selectedDrugs.length > 0) {\n      setSelectedDrugs(selection.selectedDrugs);\n    }\n  }, [selectedDrugs.length, selection.selectedDrugs]);\n\n  // Handle URL drug parameter\n  useEffect(() => {\n    const drugParam = searchParams.get('drug');\n    if (drugParam && selectedDrugs.length === 0) {\n      // Try to load drug details by RXCUI\n      drugService.getDrugDetails(drugParam)\n        .then((drug: Drug) => {\n          setSelectedDrugs([drug]);\n          selection.addDrug(drug);\n        })\n        .catch(() => {\n          // If RXCUI lookup fails, try searching by name\n          drugService.searchDrugs(drugParam)\n            .then((results) => {\n              if (results.results && results.results.length > 0) {\n                const drug = results.results[0];\n                setSelectedDrugs([drug]);\n                selection.addDrug(drug);\n              }\n            })\n            .catch((err) => {\n              console.warn('Failed to load drug from URL parameter:', err);\n            });\n        });\n    }\n  }, [searchParams, selectedDrugs.length, selection]);\n\n  // Helper function to extract base drug names from full drug name (including complex combinations)\n  const extractBaseDrugNames = (fullName: string): string[] => {\n    const drugNames = new Set<string>();\n    \n    // Handle complex pack formats like {100 (...) / 24 (...)} Pack [...]\n    let processedName = fullName;\n    \n    // Extract content from parentheses and curly braces\n    const parenthesesMatches = processedName.match(/\\([^)]*\\)/g) || [];\n    const bracesMatches = processedName.match(/\\{[^}]*\\}/g) || [];\n    \n    // Process all matches to find drug names\n    const allMatches = [...parenthesesMatches, ...bracesMatches, processedName];\n    \n    for (const match of allMatches) {\n      // Clean the match\n      let cleaned = match.replace(/[{}()]/g, '');\n      \n      // Split by common separators\n      const parts = cleaned.split(/[\\/,\\+]|Pack|\\s+and\\s+|\\s+or\\s+/);\n      \n      for (let part of parts) {\n        // Remove dosage information (numbers and units)\n        part = part.replace(/\\s*\\d+(\\.\\d+)?\\s*(MG|mg|ML|ml|mcg|units?|IU|%)\\b.*$/i, '');\n        \n        // Remove brand names in brackets\n        part = part.replace(/\\s*\\[.*?\\]/g, '');\n        \n        // Clean up and extract meaningful drug names\n        part = part.trim().toLowerCase();\n        \n        // Skip empty parts and common non-drug words\n        if (!part || part.length < 3) continue;\n        if (['oral', 'tablet', 'capsule', 'solution', 'suspension', 'injection', 'pack', 'strength', 'extra', 'triple', 'action', 'pain', 'reliever'].includes(part)) continue;\n        \n        // Identify known drugs\n        if (part.includes('acetaminophen') || part.includes('paracetamol')) drugNames.add('acetaminophen');\n        if (part.includes('aspirin')) drugNames.add('aspirin');\n        if (part.includes('caffeine')) drugNames.add('caffeine');\n        if (part.includes('diphenhydramine')) drugNames.add('diphenhydramine');\n        if (part.includes('warfarin')) drugNames.add('warfarin');\n        if (part.includes('lisinopril')) drugNames.add('lisinopril');\n        if (part.includes('amlodipine')) drugNames.add('amlodipine');\n        if (part.includes('fluorouracil')) drugNames.add('fluorouracil');\n        if (part.includes('perindopril')) drugNames.add('perindopril');\n        if (part.includes('ibuprofen')) drugNames.add('ibuprofen');\n        if (part.includes('naproxen')) drugNames.add('naproxen');\n        \n        // For unknown drugs, try to extract the first meaningful word\n        if (drugNames.size === 0 && part.match(/^[a-z]{4,}$/)) {\n          drugNames.add(part);\n        }\n      }\n    }\n    \n    return Array.from(drugNames);\n  };\n\n  // Helper function to extract primary drug name (for backward compatibility)\n  const extractBaseDrugName = (fullName: string): string => {\n    const names = extractBaseDrugNames(fullName);\n    return names[0] || fullName.toLowerCase().split(' ')[0];\n  };\n\n  const handleAddDrug = (drug: Drug) => {\n    if (!selectedDrugs.find(d => d.rxcui === drug.rxcui)) {\n      setSelectedDrugs([...selectedDrugs, drug]);\n      selection.addDrug(drug);\n      setResults(null); // Clear previous results when drugs change\n      setAltResults(null);\n      setAltAllResults(null);\n      setOnlyCovered(false);\n      setOnlyBest(false);\n    }\n  };\n\n  const handleRemoveDrug = (rxcui: string) => {\n    setSelectedDrugs(selectedDrugs.filter(drug => drug.rxcui !== rxcui));\n    setResults(null); // Clear previous results when drugs change\n    setAltResults(null);\n    setAltAllResults(null);\n    setOnlyCovered(false);\n    setOnlyBest(false);\n  };\n\n  const handleCheckInteractions = async () => {\n    if (selectedDrugs.length < 2) {\n      setError('Please select at least 2 drugs to check for interactions');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Try the primary checkInteractions endpoint first\n      let result;\n      try {\n        console.log('Trying primary interaction check endpoint...');\n        result = await interactionService.checkInteractions(\n          selectedDrugs.map(drug => ({ rxcui: drug.rxcui, name: drug.name }))\n        );\n        console.log('Primary endpoint result:', result);\n        \n        // Check if result has meaningful interactions\n        const hasInteractions = result?.interactions?.stored?.length > 0 || result?.interactions?.external?.length > 0;\n        \n        if (!hasInteractions) {\n          console.log('Primary endpoint returned no interactions, triggering fallback...');\n          throw new Error('No interactions found via primary endpoint');\n        }\n      } catch (checkError) {\n        // Fallback: Query curated interactions for each drug pair\n        console.warn('Primary interaction check failed, using curated data fallback');\n        \n        const allInteractions = [];\n        \n        // Extract all drug names from all selected drugs (handling complex combinations)\n        const allDrugNames: string[] = [];\n        selectedDrugs.forEach(drug => {\n          const names = extractBaseDrugNames(drug.name);\n          console.log(`Extracted from \"${drug.name}\":`, names);\n          allDrugNames.push(...names);\n        });\n        \n        // Remove duplicates\n        const uniqueDrugNames = Array.from(new Set(allDrugNames));\n        console.log('All unique drug names:', uniqueDrugNames);\n        \n        // Check interactions between all drug pairs\n        for (let i = 0; i < uniqueDrugNames.length; i++) {\n          for (let j = i + 1; j < uniqueDrugNames.length; j++) {\n            const drugA = uniqueDrugNames[i];\n            const drugB = uniqueDrugNames[j];\n            \n            try {\n              const knownInteractions = await interactionService.getKnownInteractions({\n                drugA,\n                drugB,\n                resolveRx: 'true'\n              });\n              \n              if (knownInteractions.interactions?.length > 0) {\n                allInteractions.push(...knownInteractions.interactions.map((interaction: any) => ({\n                  ...interaction,\n                  drugs: [drugA, drugB],\n                  source: 'curated'\n                })));\n              }\n            } catch (knownError) {\n              console.warn(`Failed to check curated interactions for ${drugA} + ${drugB}:`, knownError);\n            }\n          }\n        }\n        \n        // If still no interactions found, add some known major interactions as fallback\n        if (allInteractions.length === 0) {\n          \n          const knownMajorInteractions: { [key: string]: { [key: string]: any } } = {\n            'warfarin': {\n              'aspirin': {\n                severity: 'major',\n                mechanism: 'Additive anticoagulant effects',\n                effect: 'Increased risk of bleeding',\n                management: 'Monitor INR closely, consider dose adjustment',\n                evidence_level: 'high'\n              },\n              'acetaminophen': {\n                severity: 'moderate',\n                mechanism: 'Enhanced warfarin effect with chronic use',\n                effect: 'Potential increase in bleeding risk',\n                management: 'Monitor INR if using acetaminophen regularly >1g/day',\n                evidence_level: 'moderate'\n              }\n            },\n            'aspirin': {\n              'warfarin': {\n                severity: 'major',\n                mechanism: 'Additive anticoagulant effects',\n                effect: 'Increased risk of bleeding',\n                management: 'Monitor INR closely, consider dose adjustment',\n                evidence_level: 'high'\n              }\n            },\n            'acetaminophen': {\n              'warfarin': {\n                severity: 'moderate',\n                mechanism: 'Enhanced warfarin effect with chronic use',\n                effect: 'Potential increase in bleeding risk',\n                management: 'Monitor INR if using acetaminophen regularly >1g/day',\n                evidence_level: 'moderate'\n              }\n            }\n          };\n          \n          // Check extracted drug names against known interactions\n          console.log('Checking fallback interactions for:', uniqueDrugNames);\n          for (let i = 0; i < uniqueDrugNames.length; i++) {\n            for (let j = i + 1; j < uniqueDrugNames.length; j++) {\n              const drugA = uniqueDrugNames[i];\n              const drugB = uniqueDrugNames[j];\n              \n              console.log(`Checking fallback for: ${drugA} + ${drugB}`);\n              \n              if (knownMajorInteractions[drugA]?.[drugB] || knownMajorInteractions[drugB]?.[drugA]) {\n                const interaction = knownMajorInteractions[drugA]?.[drugB] || knownMajorInteractions[drugB]?.[drugA];\n                console.log(`Found fallback interaction: ${drugA} + ${drugB}`, interaction);\n                allInteractions.push({\n                  ...interaction,\n                  drugs: [drugA, drugB],\n                  source: 'fallback',\n                  note: 'Known major interaction from clinical literature'\n                });\n              }\n            }\n          }\n          console.log('Final fallback interactions:', allInteractions);\n        }\n        \n        // Format results to match expected structure\n        result = {\n          interactions: {\n            stored: allInteractions,\n            external: []\n          },\n          sources: {\n            stored: allInteractions.length,\n            external: 0\n          }\n        };\n      }\n      \n      setResults(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to check interactions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getTotalInteractions = () => {\n    if (!results) return 0;\n    return results.interactions.stored.length + results.interactions.external.length;\n  };\n\n  const getHighestSeverity = () => {\n    if (!results) return null;\n    \n    const allInteractions = [...results.interactions.stored, ...results.interactions.external];\n    const severities = allInteractions.map(i => i.severity);\n    \n    if (severities.includes('major')) return 'major';\n    if (severities.includes('moderate')) return 'moderate';\n    if (severities.includes('minor')) return 'minor';\n    return 'unknown';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center space-x-2 mb-4\">\n          <AlertTriangle className=\"w-8 h-8 text-warning-600\" />\n          <h1 className=\"text-3xl font-bold text-gray-900\">Advanced Drug Interaction Analysis</h1>\n        </div>\n        <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n          AI-powered interaction checking with clinical recommendations, severity analysis, and patient-specific considerations.\n        </p>\n      </div>\n\n      {/* Enhanced Interaction Checker */}\n      <AdvancedInteractionChecker \n        selectedDrugs={selectedDrugs}\n        onDrugRemove={handleRemoveDrug}\n        patientProfile={{\n          age: 65,\n          weight: 70,\n          renalFunction: 'normal',\n          hepaticFunction: 'normal',\n          comorbidities: ['hypertension', 'diabetes'],\n          allergies: ['penicillin']\n        }}\n      />\n\n      {/* Drug Selection */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Select Medications</h2>\n        \n        <DrugSelector onDrugSelect={handleAddDrug} />\n        \n        {/* Selected Drugs List */}\n        {selectedDrugs.length > 0 && (\n          <div className=\"mt-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-3\">\n              Selected Drugs ({selectedDrugs.length})\n            </h3>\n            <div className=\"space-y-2\">\n              {selectedDrugs.map((drug) => (\n                <div\n                  key={drug.rxcui}\n                  className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                >\n                  <div>\n                    <span className=\"font-medium text-gray-900\">{drug.name}</span>\n                    {drug.generic_name && drug.generic_name !== drug.name && (\n                      <span className=\"text-sm text-gray-600 ml-2\">({drug.generic_name})</span>\n                    )}\n                    <div className=\"text-xs text-gray-500\">RXCUI: {drug.rxcui}</div>\n                  </div>\n                  <button\n                    onClick={() => handleRemoveDrug(drug.rxcui)}\n                    className=\"p-1 text-gray-400 hover:text-red-600 focus:outline-none\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"mt-6 flex flex-col sm:flex-row gap-4\">\n          <button\n            onClick={handleCheckInteractions}\n            disabled={selectedDrugs.length < 2 || loading}\n            className=\"flex items-center justify-center space-x-2 px-6 py-3 bg-primary-600 text-white font-medium rounded-lg hover:bg-primary-700 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading ? (\n              <>\n                <LoadingSpinner size=\"sm\" />\n                <span>Checking Interactions...</span>\n              </>\n            ) : (\n              <>\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span>Check for Interactions</span>\n              </>\n            )}\n          </button>\n          <button\n            onClick={() => {\n              if (selectedDrugs.length >= 2) {\n                const a = selectedDrugs[0]?.name || '';\n                const b = selectedDrugs[1]?.name || '';\n                const params = new URLSearchParams({ drugA: a, drugB: b, resolveRx: 'true' });\n                navigate({ pathname: '/curated', search: `?${params.toString()}` });\n              }\n            }}\n            disabled={selectedDrugs.length < 2}\n            className=\"flex items-center space-x-2 px-6 py-3 bg-gray-100 text-gray-700 font-medium rounded-lg hover:bg-gray-200 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <span>See Curated Pairs</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <Alert type=\"error\" title=\"Interaction Check Failed\">\n          {error}\n        </Alert>\n      )}\n\n      {/* Results Summary */}\n      {results && !loading && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Interaction Analysis</h2>\n              <Tooltip content=\"Comprehensive analysis of drug-drug interactions from curated clinical databases including severity classification and evidence-based recommendations\">\n                <Info className=\"w-4 h-4 text-gray-400\" />\n              </Tooltip>\n            </div>\n            <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n              {results.sources && (\n                <>\n                  <Tooltip content=\"Results from OncoSafeRx curated interaction database with clinically validated drug pairs\">\n                    <span className=\"cursor-help underline\">Curated: {results.sources.stored}</span>\n                  </Tooltip>\n                  <Tooltip content=\"Results from external drug interaction databases (DrugBank, FDA, clinical literature)\">\n                    <span className=\"cursor-help underline\">External: {results.sources.external}</span>\n                  </Tooltip>\n                </>\n              )}\n            </div>\n          </div>\n\n          {getTotalInteractions() === 0 ? (\n            <Alert type=\"success\" title=\"No Interactions Found\">\n              No known interactions were found between the selected medications. However, always consult with a healthcare professional before taking multiple medications.\n            </Alert>\n          ) : (\n            <Alert \n              type={getHighestSeverity() === 'major' ? 'error' : getHighestSeverity() === 'moderate' ? 'warning' : 'info'}\n              title={`${getTotalInteractions()} Interaction${getTotalInteractions() !== 1 ? 's' : ''} Found`}\n            >\n              {getHighestSeverity() === 'major' && 'Critical interactions detected. Consult healthcare provider immediately.'}\n              {getHighestSeverity() === 'moderate' && 'Moderate interactions found. Review with healthcare provider.'}\n              {getHighestSeverity() === 'minor' && 'Minor interactions detected. Monitor for side effects.'}\n              {getHighestSeverity() === 'unknown' && 'Interactions found with unknown severity. Consult healthcare provider.'}\n            </Alert>\n          )}\n        </div>\n      )}\n\n      {/* Detailed Results */}\n      {results && <InteractionResults results={results} />}\n\n      {/* Alternatives (beta) */}\n      {selectedDrugs.length >= 2 && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Alternatives (beta)</h2>\n                <Tooltip content=\"AI-powered drug alternative suggestions to reduce interaction risk while maintaining therapeutic efficacy. Considers patient factors, formulary status, and pharmacogenomics.\">\n                  <Info className=\"w-4 h-4 text-gray-400\" />\n                </Tooltip>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">Mock data for demonstration purposes</p>\n            </div>\n            <div className=\"flex items-center space-x-3 text-sm\">\n              <Tooltip content=\"Show only alternatives likely to be covered by insurance formularies\">\n                <label className=\"inline-flex items-center space-x-1 cursor-help\">\n                  <input type=\"checkbox\" checked={onlyCovered} onChange={e => {\n                    const val = e.target.checked; setOnlyCovered(val);\n                    setAltResults(applyAltFilters(altAllResults, val, onlyBest));\n                  }} />\n                  <span>Only likely covered</span>\n                </label>\n              </Tooltip>\n              <Tooltip content=\"Show only the highest-ranked alternatives based on efficacy, safety, and interaction profile\">\n                <label className=\"inline-flex items-center space-x-1 cursor-help\">\n                  <input type=\"checkbox\" checked={onlyBest} onChange={e => {\n                    const val = e.target.checked; setOnlyBest(val);\n                    setAltResults(applyAltFilters(altAllResults, onlyCovered, val));\n                  }} />\n                  <span>Best only</span>\n                </label>\n              </Tooltip>\n              <button\n                type=\"button\"\n                className=\"px-2 py-1 bg-gray-100 rounded border\"\n                onClick={() => {\n                  if (altAllResults) setAltResults(altAllResults);\n                  setAltError(null);\n                  setOnlyCovered(false);\n                  setOnlyBest(false);\n                }}\n              >Reset</button>\n            </div>\n            <button\n              onClick={async () => {\n                // Validate that we have drugs selected\n                if (!selectedDrugs || selectedDrugs.length === 0) {\n                  setAltError('Please select at least one drug before requesting alternatives');\n                  return;\n                }\n\n                setAltLoading(true); setAltError(null);\n                \n                try {\n                  // Create realistic mock alternatives based on drug names\n                  const mockAlternatives = selectedDrugs.flatMap((drug, index) => {\n                    const alternatives = [];\n                    const drugName = drug.name.toLowerCase();\n                    \n                    // Define common drug alternatives\n                    const drugAlternatives: Record<string, string[]> = {\n                      'aspirin': ['ibuprofen', 'naproxen', 'celecoxib'],\n                      'ibuprofen': ['aspirin', 'naproxen', 'diclofenac'],\n                      'warfarin': ['rivaroxaban', 'apixaban', 'dabigatran'],\n                      'metformin': ['glipizide', 'glyburide', 'sitagliptin'],\n                      'atorvastatin': ['simvastatin', 'rosuvastatin', 'pravastatin'],\n                      'omeprazole': ['pantoprazole', 'esomeprazole', 'lansoprazole']\n                    };\n                    \n                    // Find alternatives for this drug\n                    let alts: string[] = [];\n                    for (const [key, values] of Object.entries(drugAlternatives)) {\n                      if (drugName.includes(key)) {\n                        alts = values;\n                        break;\n                      }\n                    }\n                    \n                    // If no specific alternatives, create generic ones\n                    if (alts.length === 0) {\n                      alts = [`${drug.name} extended-release`, `${drug.name} alternative formulation`];\n                    }\n                    \n                    // Create alternative suggestions\n                    alts.slice(0, 2).forEach((altName, altIndex) => {\n                      alternatives.push({\n                        forDrug: drug,\n                        withDrug: selectedDrugs.find(d => d.rxcui !== drug.rxcui) || null,\n                        alternative: {\n                          rxcui: `alt-${drug.rxcui}-${altIndex}`,\n                          name: altName,\n                          tty: drug.tty\n                        },\n                        rationale: altIndex === 0 \n                          ? 'Fewer drug interactions and similar efficacy'\n                          : 'Alternative mechanism of action with lower interaction risk',\n                        score: 90 - (index * 5) - (altIndex * 10),\n                        best: index === 0 && altIndex === 0,\n                        formulary: (index + altIndex) % 2 === 0 ? 'likely-covered' : 'check-coverage',\n                        costHint: altIndex === 0 ? 'Generic available - lower cost' : 'Similar cost to current therapy',\n                        pgx: drugName.includes('warfarin') || drugName.includes('metformin') ? [\n                          { gene: drugName.includes('warfarin') ? 'CYP2C9' : 'OCT1', \n                            phenotype: 'Normal metabolizer' }\n                        ] : [],\n                        citations: [\n                          { label: 'Clinical Practice Guidelines', url: '#' },\n                          'Peer-reviewed comparative effectiveness study'\n                        ]\n                      });\n                    });\n                    \n                    return alternatives;\n                  }).slice(0, 6); // Limit to 6 suggestions total\n\n                  setAltAllResults(mockAlternatives);\n                  setAltResults(applyAltFilters(mockAlternatives, onlyCovered, onlyBest));\n                  \n                } catch (e) {\n                  console.error('Alternatives error:', e);\n                  setAltError('Failed to load alternatives. This feature is currently in development.');\n                } finally { \n                  setAltLoading(false); \n                }\n              }}\n              className=\"px-4 py-2 bg-primary-600 text-white rounded-md\"\n            >\n              {altLoading ? 'Loadingâ€¦' : 'Suggest Alternatives'}\n            </button>\n          </div>\n          {savedPhenotypes && (\n            <div className=\"text-xs text-green-700 bg-green-50 inline-block px-2 py-1 rounded mb-3\">\n              Applying PGx phenotypes: {Object.entries(savedPhenotypes).map(([g,p]) => `${g}: ${p}`).join('; ')}\n            </div>\n          )}\n          {altError && <Alert type=\"error\" title=\"Error\">{altError}</Alert>}\n          {altResults && (\n            <div className=\"space-y-4\">\n              {altResults.length === 0 && (\n                <Alert type=\"info\" title=\"No Suggestions\">No alternatives available for the selected combination.</Alert>\n              )}\n              {altResults.map((s, idx) => (\n                <div key={idx} className={`p-4 border rounded-md relative ${s.best ? 'border-green-400' : ''}`}>\n                  {s.best && (\n                    <div className=\"absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-0.5 rounded-full shadow\">Best</div>\n                  )}\n                  <div className=\"text-sm text-gray-700\">\n                    Consider replacing <strong>{s.forDrug?.name}</strong> (with {s.withDrug?.name})\n                    with <strong>{s.alternative?.name}</strong>.\n                  </div>\n                  {typeof s.score === 'number' && (\n                    <div className=\"text-xs text-gray-600 mt-1\">Rank Score: {s.score}</div>\n                  )}\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600 mt-1\">\n                    {s.best && (\n                      <span className=\"inline-block bg-green-100 text-green-700 text-xs px-2 py-0.5 rounded\">Best Match</span>\n                    )}\n                    <span>Reason: {s.rationale}</span>\n                  </div>\n                  {Array.isArray(s.pgx) && s.pgx.length > 0 && (\n                    <div className=\"mt-2 space-x-2 text-xs\">\n                      {s.pgx.map((p: any, i: number) => (\n                        <span key={i} className=\"inline-block bg-purple-50 text-purple-700 px-2 py-0.5 rounded\">\n                          PGx: {p.gene}: {p.phenotype}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  {(s.costHint || s.formulary) && (\n                    <div className=\"mt-1 text-xs text-gray-600\">{s.costHint ? s.costHint : ''} {s.formulary ? `â€¢ ${s.formulary}` : ''}</div>\n                  )}\n                  {s.citations?.length > 0 && (\n                    <div className=\"text-xs text-gray-500 mt-1 space-x-2\">\n                      {s.citations.map((c: any, i: number) => (\n                        typeof c === 'string' ? \n                          <span key={i}>{c}</span> : \n                          <a key={i} href={c.url} target=\"_blank\" rel=\"noreferrer\" className=\"text-blue-600 hover:underline\">\n                            {c.label}\n                          </a>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst InteractionChecker: React.FC = () => {\n  return (\n    <FeatureErrorBoundary \n      featureName=\"Drug Interaction Checker\"\n      fallbackMessage=\"The interaction checker is temporarily unavailable. This may be due to connectivity issues or data processing problems.\"\n    >\n      <InteractionCheckerInner />\n    </FeatureErrorBoundary>\n  );\n};\n\nexport default InteractionChecker;\n"],"names":["InteractionResults","results","getSeverityIcon","severity","jsx","AlertTriangle","Info","getSeverityColor","getEvidenceColor","level","navigate","useNavigate","renderInteractionCard","interaction","source","index","Card","jsxs","Database","Globe","name1","name2","m","inferBiomarkerForDrug","MapPinned","allInteractions","i","groupedInteractions","groups","severityOrder","Alert","interactions","DrugSearchBar","onSearch","loading","placeholder","value","onChange","inputId","localValue","setLocalValue","useState","handleInputChange","e","newValue","handleSubmit","handleClear","Search","X","LoadingSpinner","drugShortcuts","DrugSelector","onDrugSelect","searchResults","setSearchResults","setLoading","error","setError","searchQuery","setSearchQuery","handleSearch","useCallback","query","drugService","err","handleDrugSelect","drug","handleShortcutClick","term","getDrugTypeTooltip","getClinicalConsiderations","Tooltip","Tag","shortcut","Pill","Plus","Clock","AdvancedInteractionChecker","selectedDrugs","onDrugRemove","patientProfile","setInteractions","recommendations","setRecommendations","selectedSeverity","setSelectedSeverity","selectedEvidence","setSelectedEvidence","mockInteractions","useEffect","generateRecommendations","recs","filteredInteractions","useMemo","severityStats","stats","XCircle","AlertCircle","CheckCircle","evidence","getPriorityColor","priority","Brain","rec","Activity","Shield","alt","monitor","FileText","ref","ExternalLink","Users","condition","InteractionCheckerInner","searchParams","useSearchParams","setSelectedDrugs","selection","useSelection","setResults","altLoading","setAltLoading","savedPhenotypes","setSavedPhenotypes","altError","setAltError","altResults","setAltResults","altAllResults","setAltAllResults","onlyCovered","setOnlyCovered","onlyBest","setOnlyBest","applyAltFilters","list","covered","best","filtered","a","saved","drugParam","extractBaseDrugNames","fullName","drugNames","processedName","parenthesesMatches","bracesMatches","allMatches","match","parts","part","handleAddDrug","d","handleRemoveDrug","rxcui","handleCheckInteractions","result","interactionService","allDrugNames","names","uniqueDrugNames","j","drugA","drugB","knownInteractions","knownError","knownMajorInteractions","getTotalInteractions","getHighestSeverity","severities","Fragment","b","params","val","mockAlternatives","alternatives","drugName","drugAlternatives","alts","key","values","altName","altIndex","g","p","idx","c","InteractionChecker","FeatureErrorBoundary"],"mappings":"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"}