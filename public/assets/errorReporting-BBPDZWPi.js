import{c as t}from"./FeatureErrorBoundary-C-SWZJ4k.js";import"./index-8LC8IQKY.js";import"./triangle-alert-BOEc2-VO.js";import"./createLucideIcon-DlukwGQd.js";import"./refresh-cw-COcu3qHG.js";import"./house-svls-J_z.js";class n{constructor(){this.errorQueue=[],this.isOnline=navigator.onLine,this.sessionId=this.generateSessionId(),this.setupGlobalErrorHandlers(),this.setupNetworkListeners(),setInterval(()=>this.flushErrorQueue(),3e4)}generateSessionId(){return`${Date.now()}-${Math.random().toString(36).substr(2,9)}`}setupGlobalErrorHandlers(){window.addEventListener("error",r=>{this.reportError(r.error||new Error(r.message),{component:"Global",action:"Uncaught Error",severity:"high",tags:["uncaught","javascript"]})}),window.addEventListener("unhandledrejection",r=>{this.reportError(r.reason instanceof Error?r.reason:new Error(String(r.reason)),{component:"Global",action:"Unhandled Promise Rejection",severity:"high",tags:["uncaught","promise"]})}),window.addEventListener("react-error",(r=>{this.reportError(r.detail.error,{component:r.detail.component,action:"React Error Boundary",severity:"medium",tags:["react","boundary"]})}))}setupNetworkListeners(){window.addEventListener("online",()=>{this.isOnline=!0,this.flushErrorQueue()}),window.addEventListener("offline",()=>{this.isOnline=!1})}setUserId(r){this.userId=r}reportError(r,e={}){const o={error:r,context:{component:e.component,action:e.action,userId:this.userId,sessionId:this.sessionId,timestamp:new Date().toISOString(),url:window.location.href,userAgent:navigator.userAgent,buildVersion:t.version},severity:e.severity||"medium",tags:e.tags};t.environment==="development"&&console.error("Error Report:",o),this.errorQueue.push(o),this.isOnline&&o.severity==="critical"&&this.flushErrorQueue(),this.errorQueue.length>50&&(this.errorQueue=this.errorQueue.slice(-25))}async flushErrorQueue(){if(!this.isOnline||this.errorQueue.length===0)return;const r=[...this.errorQueue];this.errorQueue=[];try{await this.sendErrors(r)}catch(e){this.errorQueue.unshift(...r),console.warn("Failed to send error reports:",e)}}async sendErrors(r){if(t.environment==="development"){console.log("Would send errors in production:",r);return}}async reportPerformanceMetrics(r){if(t.environment==="development"){console.log("Performance metrics:",r);return}}}const l=new n;export{l as default,l as errorReporter};
