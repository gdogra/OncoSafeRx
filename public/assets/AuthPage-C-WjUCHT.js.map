{"version":3,"mappings":"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","names":["AuthPage","actions","state","useAuth","navigate","useNavigate","location","useLocation","mode","setMode","useState","currentStep","setCurrentStep","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","loginData","setLoginData","signupData","setSignupData","confirmPassword","setConfirmPassword","errors","setErrors","resetMessage","setResetMessage","acceptedTerms","setAcceptedTerms","showToast","useToast","authModeInfo","setAuthModeInfo","useProxy","setUseProxy","showOtp","setShowOtp","otpCode","setOtpCode","useEffect","from","raw","meta","roleOptions","specialtyOptions","validateSignin","newErrors","validateSignupStep1","validateSignupStep2","handleSignin","e","isValid","loginPromise","result","error","errorMessage","handleResetPassword","email","prev","redirectTo","SupabaseAuthService","__vitePreload","n","handleMagicLink","handleVerifyOtp","profile","handleResendConfirmation","handleSignupNext","handleSignupSubmit","handleInputChange","field","value","resetForm","switchMode","newMode","jsxs","jsx","Activity","Card","Mail","EyeOff","Eye","AlertCircle","Check","Fragment","Tooltip","option","specialty","Building","Award","Calendar","ArrowLeft"],"ignoreList":[],"sources":["../../src/pages/AuthPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { SignupData, LoginData } from '../types/user';\nimport { \n  Eye, \n  EyeOff, \n  User, \n  Mail, \n  Building, \n  Award, \n  Calendar,\n  Activity,\n  ArrowLeft,\n  Check,\n  AlertCircle\n} from 'lucide-react';\nimport Card from '../components/UI/Card';\nimport { useToast } from '../components/UI/Toast';\nimport Tooltip from '../components/UI/Tooltip';\n\nconst AuthPage: React.FC = () => {\n  const { actions, state } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  const [mode, setMode] = useState<'signin' | 'signup'>('signin');\n  const [currentStep, setCurrentStep] = useState(1);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n  // Form data states\n  const [loginData, setLoginData] = useState<LoginData>({\n    email: '',\n    password: '',\n  });\n  \n  const [signupData, setSignupData] = useState<SignupData>({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    role: 'oncologist',\n    specialty: '',\n    institution: '',\n    licenseNumber: '',\n    yearsExperience: undefined,\n  });\n  \n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [resetMessage, setResetMessage] = useState<string>('');\n  const [acceptedTerms, setAcceptedTerms] = useState(false);\n  const { showToast } = useToast();\n  const [authModeInfo, setAuthModeInfo] = useState<string | null>(null);\n  const [useProxy, setUseProxy] = useState<boolean>(() => {\n    try { return localStorage.getItem('osrx_use_auth_proxy') === 'true' } catch { return false }\n  });\n  const [showOtp, setShowOtp] = useState(false);\n  const [otpCode, setOtpCode] = useState('');\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (state.isAuthenticated) {\n      const from = location.state?.from?.pathname || '/';\n      navigate(from, { replace: true });\n    }\n  }, [state.isAuthenticated, navigate, location]);\n\n  // Read auth path meta for diagnostics\n  useEffect(() => {\n    try {\n      const raw = localStorage.getItem('osrx_auth_path');\n      if (raw) {\n        const meta = JSON.parse(raw);\n        if (meta?.path && meta?.at) {\n          setAuthModeInfo(`Auth mode: ${meta.path} @ ${new Date(meta.at).toLocaleTimeString()}`);\n        }\n      }\n    } catch {}\n  }, [state.isAuthenticated, state.error]);\n\n  // Persist proxy toggle\n  useEffect(() => {\n    try { localStorage.setItem('osrx_use_auth_proxy', useProxy ? 'true' : 'false') } catch {}\n  }, [useProxy]);\n\n  // Role options for signup\n  const roleOptions = [\n    { value: 'oncologist', label: 'Oncologist', description: 'Medical doctor specializing in cancer treatment' },\n    { value: 'pharmacist', label: 'Pharmacist', description: 'Medication therapy expert' },\n    { value: 'nurse', label: 'Nurse', description: 'Patient care and treatment coordination' },\n    { value: 'researcher', label: 'Researcher', description: 'Clinical research and trials' },\n    { value: 'student', label: 'Student', description: 'Medical, pharmacy, or nursing student' },\n  ];\n\n  const specialtyOptions = [\n    'Medical Oncology',\n    'Surgical Oncology',\n    'Radiation Oncology',\n    'Hematology-Oncology',\n    'Gynecologic Oncology',\n    'Pediatric Oncology',\n    'Thoracic Oncology',\n    'Neuro-Oncology',\n    'Breast Oncology',\n    'Gastrointestinal Oncology',\n    'Genitourinary Oncology',\n    'Head and Neck Oncology',\n  ];\n\n  // Validation functions\n  const validateSignin = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!loginData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(loginData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n    \n    if (!loginData.password) {\n      newErrors.password = 'Password is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const validateSignupStep1 = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!signupData.firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n    \n    if (!signupData.lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n    \n    if (!signupData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(signupData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n    \n    if (!signupData.password) {\n      newErrors.password = 'Password is required';\n    } else if (signupData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n    \n    if (signupData.password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const validateSignupStep2 = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!signupData.role) {\n      newErrors.role = 'Role is required';\n    }\n    \n    if (signupData.role === 'oncologist' && !signupData.specialty?.trim()) {\n      newErrors.specialty = 'Specialty is required for oncologists';\n    }\n    \n    if ((signupData.role === 'oncologist' || signupData.role === 'pharmacist') && !signupData.licenseNumber?.trim()) {\n      newErrors.licenseNumber = 'License number is required for this role';\n    }\n    \n    if (!acceptedTerms) {\n      newErrors.terms = 'You must accept the terms and conditions';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Form handlers\n  const handleSignin = async (e: React.FormEvent) => {\n    console.log('🎯 Form submitted:', { email: loginData.email, hasPassword: !!loginData.password });\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Prevent any potential page reloads\n    if (e.target) {\n      (e.target as HTMLFormElement).style.pointerEvents = 'none';\n    }\n    \n    const isValid = validateSignin();\n    console.log('✅ Form validation result:', isValid);\n    if (!isValid) {\n      console.log('❌ Validation failed, errors:', errors);\n      if (e.target) {\n        (e.target as HTMLFormElement).style.pointerEvents = 'auto';\n      }\n      return;\n    }\n    \n    console.log('🚀 Starting login process...');\n    try {\n      console.log('🔄 About to call actions.login...');\n      // Add explicit promise handling to prevent unhandled rejections\n      const loginPromise = actions.login(loginData);\n      console.log('🔄 Login promise created, waiting for result...');\n      const result = await loginPromise;\n      console.log('✅ Login completed successfully:', result);\n    } catch (error) {\n      console.error('❌ Login failed in handleSignin:', error);\n      console.error('❌ Login error full details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : 'No stack',\n        type: typeof error,\n        error\n      });\n      const errorMessage = error instanceof Error ? error.message : 'Invalid email or password. Please try again.';\n      setErrors({ submit: errorMessage });\n    } finally {\n      // Re-enable form\n      if (e.target) {\n        (e.target as HTMLFormElement).style.pointerEvents = 'auto';\n      }\n    }\n  };\n\n  const handleResetPassword = async () => {\n    setResetMessage('');\n    const email = loginData.email.trim();\n    if (!email) {\n      setErrors(prev => ({ ...prev, email: 'Enter your email above, then click Forgot password' }));\n      return;\n    }\n    try {\n      const redirectTo = `${window.location.origin}/reset-password`;\n      const { SupabaseAuthService } = await import('../services/authService');\n      await SupabaseAuthService.requestPasswordReset(email, redirectTo);\n      setResetMessage('Password reset email sent. Check your inbox.');\n    } catch (e: any) {\n      setErrors(prev => ({ ...prev, submit: e?.message || 'Failed to send reset email' }));\n    }\n  };\n\n  const handleMagicLink = async () => {\n    const email = loginData.email.trim();\n    if (!email) {\n      setErrors(prev => ({ ...prev, email: 'Enter your email above, then click Magic link' }));\n      return;\n    }\n    try {\n      const redirectTo = `${window.location.origin}/`;\n      const { SupabaseAuthService } = await import('../services/authService');\n      await SupabaseAuthService.requestMagicLink(email, redirectTo);\n      showToast('success', 'Magic link sent. Check your email.');\n    } catch (e: any) {\n      setErrors(prev => ({ ...prev, submit: e?.message || 'Failed to send magic link' }));\n      showToast('error', e?.message || 'Failed to send magic link');\n    }\n  };\n\n  const handleVerifyOtp = async () => {\n    setErrors(prev => ({ ...prev, submit: '' }));\n    try {\n      const { SupabaseAuthService } = await import('../services/authService');\n      const profile = await SupabaseAuthService.verifyEmailOtp(loginData.email, otpCode);\n      showToast('success', `Welcome back, ${profile.firstName || profile.email}`);\n    } catch (e: any) {\n      setErrors(prev => ({ ...prev, submit: e?.message || 'Failed to verify code' }));\n      showToast('error', e?.message || 'Failed to verify code');\n    }\n  };\n\n  const handleResendConfirmation = async () => {\n    const email = loginData.email.trim();\n    if (!email) {\n      setErrors(prev => ({ ...prev, email: 'Enter your email above, then click Resend confirmation' }));\n      return;\n    }\n    try {\n      const redirectTo = `${window.location.origin}/`;\n      const { SupabaseAuthService } = await import('../services/authService');\n      await SupabaseAuthService.resendConfirmation(email, redirectTo);\n      showToast('success', 'Confirmation email sent');\n    } catch (e: any) {\n      showToast('error', e?.message || 'Failed to resend confirmation');\n    }\n  };\n\n  const handleSignupNext = () => {\n    if (validateSignupStep1()) {\n      setCurrentStep(2);\n    }\n  };\n\n  const handleSignupSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!validateSignupStep2()) return;\n    \n    try {\n      await actions.signup(signupData);\n    } catch (error) {\n      console.error('❌ Signup failed:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Signup failed. Please try again.';\n      setErrors({ submit: errorMessage });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    if (mode === 'signin') {\n      setLoginData(prev => ({ ...prev, [field]: value }));\n    } else {\n      setSignupData(prev => ({\n        ...prev,\n        [field]: field === 'yearsExperience' ? (value ? parseInt(value) : undefined) : value\n      }));\n    }\n    \n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const resetForm = () => {\n    setLoginData({ email: '', password: '' });\n    setSignupData({\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      role: 'oncologist',\n      specialty: '',\n      institution: '',\n      licenseNumber: '',\n      yearsExperience: undefined,\n    });\n    setConfirmPassword('');\n    setErrors({});\n    setCurrentStep(1);\n    setAcceptedTerms(false);\n  };\n\n  const switchMode = (newMode: 'signin' | 'signup') => {\n    setMode(newMode);\n    resetForm();\n  };\n\n  if (state.isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      {/* Header */}\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 bg-primary-600 rounded-xl flex items-center justify-center\">\n              <Activity className=\"w-7 h-7 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">OncoSafeRx</h1>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900\">\n            {mode === 'signin' ? 'Welcome back' : 'Create your account'}\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            {mode === 'signin' \n              ? 'Sign in to access precision oncology tools' \n              : 'Join the precision oncology platform'\n            }\n          </p>\n        </div>\n      </div>\n\n      {/* Main Form */}\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <Card className=\"py-8 px-4 shadow-lg sm:rounded-lg sm:px-10 border-0\">\n          {/* Mode Toggle */}\n          <div className=\"flex bg-gray-100 p-1 rounded-lg mb-6\">\n            <button\n              onClick={() => switchMode('signin')}\n              className={`flex-1 py-2 text-sm font-medium rounded-md transition-all ${\n                mode === 'signin'\n                  ? 'bg-white text-primary-600 shadow-sm'\n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Sign In\n            </button>\n            <button\n              onClick={() => switchMode('signup')}\n              className={`flex-1 py-2 text-sm font-medium rounded-md transition-all ${\n                mode === 'signup'\n                  ? 'bg-white text-primary-600 shadow-sm'\n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Create Account\n            </button>\n          </div>\n\n          {/* Sign In Form */}\n          {mode === 'signin' && (\n            <form onSubmit={handleSignin} className=\"space-y-6\">\n              {authModeInfo && (\n                <div className=\"text-xs text-gray-500\">{authModeInfo}</div>\n              )}\n              {import.meta.env.MODE !== 'production' && (\n                <div className=\"flex items-center justify-between text-xs text-gray-600 bg-gray-50 p-2 rounded\">\n                  <label className=\"inline-flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={useProxy}\n                      onChange={(e) => setUseProxy(e.target.checked)}\n                      className=\"rounded border-gray-300\"\n                    />\n                    <span>Use server auth proxy on failure</span>\n                  </label>\n                  <button\n                    type=\"button\"\n                    className=\"text-blue-600 hover:underline\"\n                    onClick={() => {\n                      const forced = localStorage.getItem('osrx_force_production') === 'true'\n                      if (forced) {\n                        localStorage.removeItem('osrx_force_production')\n                        showToast('success', 'Force production disabled');\n                      } else {\n                        localStorage.setItem('osrx_force_production', 'true')\n                        showToast('success', 'Force production enabled');\n                      }\n                    }}\n                  >\n                    Toggle force production\n                  </button>\n                </div>\n              )}\n              <div>\n                <label htmlFor=\"signin-email\" className=\"block text-sm font-medium text-gray-700\">\n                  Email Address\n                </label>\n                <div className=\"mt-1 relative\">\n                  <input\n                    id=\"signin-email\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    required\n                    value={loginData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                      errors.email ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter your email\"\n                  />\n                  <Mail className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n                </div>\n                {errors.email && (\n                  <p className=\"mt-1 text-xs text-red-600\">{errors.email}</p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"signin-password\" className=\"block text-sm font-medium text-gray-700\">\n                  Password\n                </label>\n                <div className=\"mt-1 relative\">\n                  <input\n                    id=\"signin-password\"\n                    type={showPassword ? 'text' : 'password'}\n                    autoComplete=\"current-password\"\n                    required\n                    value={loginData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                      errors.password ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter your password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff /> : <Eye />}\n                  </button>\n                </div>\n                <div className=\"flex items-center justify-between mt-2\">\n                  <button\n                    type=\"button\"\n                    onClick={handleResetPassword}\n                    className=\"text-xs text-blue-600 hover:underline\"\n                  >\n                    Forgot password?\n                  </button>\n                  {resetMessage && <span className=\"text-xs text-green-700\">{resetMessage}</span>}\n                </div>\n                {errors.password && (\n                  <p className=\"mt-1 text-xs text-red-600\">{errors.password}</p>\n                )}\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <input\n                    id=\"remember-me\"\n                    name=\"remember-me\"\n                    type=\"checkbox\"\n                    className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900\">\n                    Remember me\n                  </label>\n                </div>\n\n                <div className=\"flex items-center gap-3 text-sm\">\n                  <button type=\"button\" onClick={handleResendConfirmation} className=\"font-medium text-primary-600 hover:text-primary-500\">\n                    Resend confirmation\n                  </button>\n                  <button type=\"button\" onClick={handleMagicLink} className=\"font-medium text-blue-600 hover:text-blue-500\">Magic link</button>\n                  <button type=\"button\" onClick={() => setShowOtp(!showOtp)} className=\"font-medium text-violet-600 hover:text-violet-500\">{showOtp ? 'Hide code' : 'Have a code?'}</button>\n                </div>\n              </div>\n\n              {(errors.submit || state.error) && (\n                <div className=\"flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <AlertCircle className=\"w-4 h-4 text-red-600\" />\n                  <p className=\"text-sm text-red-600\">{errors.submit || state.error}</p>\n                </div>\n              )}\n\n              {showOtp && (\n                <div className=\"space-y-2 p-3 border border-violet-200 rounded-md bg-violet-50\">\n                  <label htmlFor=\"otp-code\" className=\"block text-sm font-medium text-gray-700\">Enter verification code</label>\n                  <input\n                    id=\"otp-code\"\n                    type=\"text\"\n                    value={otpCode}\n                    onChange={(e) => setOtpCode(e.target.value)}\n                    placeholder=\"6-digit code\"\n                    className=\"block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-violet-500 focus:border-violet-500\"\n                  />\n                  <button type=\"button\" onClick={handleVerifyOtp} className=\"px-3 py-2 bg-violet-600 text-white rounded text-sm hover:bg-violet-700\">Verify code</button>\n                </div>\n              )}\n\n              <button\n                type=\"submit\"\n                disabled={state.isLoading}\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {state.isLoading ? (\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                ) : (\n                  'Sign In'\n                )}\n              </button>\n            </form>\n          )}\n\n          {/* Sign Up Form */}\n          {mode === 'signup' && (\n            <form onSubmit={currentStep === 1 ? (e) => { e.preventDefault(); handleSignupNext(); } : handleSignupSubmit} className=\"space-y-6\">\n              {/* Progress Indicator */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center\">\n                  <div className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                    currentStep >= 1 ? 'bg-primary-600 text-white' : 'bg-gray-200 text-gray-400'\n                  }`}>\n                    {currentStep > 1 ? <Check className=\"w-4 h-4\" /> : '1'}\n                  </div>\n                  <div className={`flex-1 h-0.5 mx-4 ${\n                    currentStep >= 2 ? 'bg-primary-600' : 'bg-gray-200'\n                  }`}></div>\n                  <div className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                    currentStep >= 2 ? 'bg-primary-600 text-white' : 'bg-gray-200 text-gray-400'\n                  }`}>\n                    2\n                  </div>\n                </div>\n                <div className=\"flex justify-between mt-2\">\n                  <span className=\"text-xs text-gray-500\">Account Info</span>\n                  <span className=\"text-xs text-gray-500\">Professional Details</span>\n                </div>\n              </div>\n\n              {/* Step 1: Basic Information */}\n              {currentStep === 1 && (\n                <>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700\">\n                        First Name *\n                      </label>\n                      <div className=\"mt-1\">\n                        <input\n                          id=\"firstName\"\n                          type=\"text\"\n                          required\n                          value={signupData.firstName}\n                          onChange={(e) => handleInputChange('firstName', e.target.value)}\n                          className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                            errors.firstName ? 'border-red-300' : 'border-gray-300'\n                          }`}\n                        />\n                      </div>\n                      {errors.firstName && (\n                        <p className=\"mt-1 text-xs text-red-600\">{errors.firstName}</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700\">\n                        Last Name *\n                      </label>\n                      <div className=\"mt-1\">\n                        <input\n                          id=\"lastName\"\n                          type=\"text\"\n                          required\n                          value={signupData.lastName}\n                          onChange={(e) => handleInputChange('lastName', e.target.value)}\n                          className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                            errors.lastName ? 'border-red-300' : 'border-gray-300'\n                          }`}\n                        />\n                      </div>\n                      {errors.lastName && (\n                        <p className=\"mt-1 text-xs text-red-600\">{errors.lastName}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"signup-email\" className=\"block text-sm font-medium text-gray-700\">\n                      Email Address *\n                    </label>\n                    <div className=\"mt-1 relative\">\n                      <input\n                        id=\"signup-email\"\n                        type=\"email\"\n                        required\n                        value={signupData.email}\n                        onChange={(e) => handleInputChange('email', e.target.value)}\n                        className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.email ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      />\n                      <Mail className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n                    </div>\n                    {errors.email && (\n                      <p className=\"mt-1 text-xs text-red-600\">{errors.email}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"signup-password\" className=\"block text-sm font-medium text-gray-700\">\n                      Password *\n                    </label>\n                    <div className=\"mt-1 relative\">\n                      <input\n                        id=\"signup-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        required\n                        value={signupData.password}\n                        onChange={(e) => handleInputChange('password', e.target.value)}\n                        className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.password ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showPassword ? <EyeOff /> : <Eye />}\n                      </button>\n                    </div>\n                    {errors.password && (\n                      <p className=\"mt-1 text-xs text-red-600\">{errors.password}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                      Confirm Password *\n                    </label>\n                    <div className=\"mt-1 relative\">\n                      <input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? 'text' : 'password'}\n                        required\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.confirmPassword ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showConfirmPassword ? <EyeOff /> : <Eye />}\n                      </button>\n                    </div>\n                    {errors.confirmPassword && (\n                      <p className=\"mt-1 text-xs text-red-600\">{errors.confirmPassword}</p>\n                    )}\n                  </div>\n                </>\n              )}\n\n              {/* Step 2: Professional Information */}\n              {currentStep === 2 && (\n                <>\n                  <div>\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <label htmlFor=\"role\" className=\"block text-sm font-medium text-gray-700\">\n                        Professional Role *\n                      </label>\n                      <Tooltip \n                        content=\"Your role determines available features, permissions, and UI customization\"\n                        type=\"help\"\n                        iconOnly\n                      />\n                    </div>\n                    <select\n                      id=\"role\"\n                      required\n                      value={signupData.role}\n                      onChange={(e) => handleInputChange('role', e.target.value)}\n                      className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                        errors.role ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                    >\n                      {roleOptions.map(option => (\n                        <option key={option.value} value={option.value}>\n                          {option.label} - {option.description}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.role && (\n                      <p className=\"mt-1 text-xs text-red-600\">{errors.role}</p>\n                    )}\n                  </div>\n\n                  {signupData.role === 'oncologist' && (\n                    <div>\n                      <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700\">\n                        Specialty *\n                      </label>\n                      <select\n                        id=\"specialty\"\n                        value={signupData.specialty || ''}\n                        onChange={(e) => handleInputChange('specialty', e.target.value)}\n                        className={`mt-1 block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.specialty ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      >\n                        <option value=\"\">Select specialty...</option>\n                        {specialtyOptions.map(specialty => (\n                          <option key={specialty} value={specialty}>\n                            {specialty}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.specialty && (\n                        <p className=\"mt-1 text-xs text-red-600\">{errors.specialty}</p>\n                      )}\n                    </div>\n                  )}\n\n                  <div>\n                    <label htmlFor=\"institution\" className=\"block text-sm font-medium text-gray-700\">\n                      Institution/Hospital\n                    </label>\n                    <div className=\"mt-1 relative\">\n                      <input\n                        id=\"institution\"\n                        type=\"text\"\n                        value={signupData.institution || ''}\n                        onChange={(e) => handleInputChange('institution', e.target.value)}\n                        className=\"block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                      <Building className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n                    </div>\n                  </div>\n\n                  {(signupData.role === 'oncologist' || signupData.role === 'pharmacist') && (\n                    <div>\n                      <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700\">\n                        License Number *\n                      </label>\n                      <div className=\"mt-1 relative\">\n                        <input\n                          id=\"licenseNumber\"\n                          type=\"text\"\n                          value={signupData.licenseNumber || ''}\n                          onChange={(e) => handleInputChange('licenseNumber', e.target.value)}\n                          className={`block w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                            errors.licenseNumber ? 'border-red-300' : 'border-gray-300'\n                          }`}\n                        />\n                        <Award className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n                      </div>\n                      {errors.licenseNumber && (\n                        <p className=\"mt-1 text-xs text-red-600\">{errors.licenseNumber}</p>\n                      )}\n                    </div>\n                  )}\n\n                  <div>\n                    <label htmlFor=\"yearsExperience\" className=\"block text-sm font-medium text-gray-700\">\n                      Years of Experience\n                    </label>\n                    <div className=\"mt-1 relative\">\n                      <input\n                        id=\"yearsExperience\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"50\"\n                        value={signupData.yearsExperience || ''}\n                        onChange={(e) => handleInputChange('yearsExperience', e.target.value)}\n                        className=\"block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                      <Calendar className=\"absolute right-3 top-2.5 h-4 w-4 text-gray-400\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center\">\n                    <input\n                      id=\"accept-terms\"\n                      type=\"checkbox\"\n                      checked={acceptedTerms}\n                      onChange={(e) => setAcceptedTerms(e.target.checked)}\n                      className={`h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded ${\n                        errors.terms ? 'border-red-300' : ''\n                      }`}\n                    />\n                    <label htmlFor=\"accept-terms\" className=\"ml-2 block text-sm text-gray-900\">\n                      I accept the{' '}\n                      <a href=\"#\" className=\"text-primary-600 hover:text-primary-500\">\n                        Terms of Service\n                      </a>{' '}\n                      and{' '}\n                      <a href=\"#\" className=\"text-primary-600 hover:text-primary-500\">\n                        Privacy Policy\n                      </a>\n                    </label>\n                  </div>\n                  {errors.terms && (\n                    <p className=\"mt-1 text-xs text-red-600\">{errors.terms}</p>\n                  )}\n                </>\n              )}\n\n              {(errors.submit || state.error) && (\n                <div className=\"flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <AlertCircle className=\"w-4 h-4 text-red-600\" />\n                  <p className=\"text-sm text-red-600\">{errors.submit || state.error}</p>\n                </div>\n              )}\n\n              <div className=\"flex justify-between\">\n                {currentStep === 2 && (\n                  <button\n                    type=\"button\"\n                    onClick={() => setCurrentStep(1)}\n                    className=\"flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4\" />\n                    <span>Previous</span>\n                  </button>\n                )}\n                \n                <button\n                  type=\"submit\"\n                  disabled={state.isLoading}\n                  className={`${currentStep === 1 ? 'w-full' : 'ml-auto'} flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed`}\n                >\n                  {state.isLoading ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  ) : currentStep === 1 ? (\n                    'Next'\n                  ) : (\n                    'Create Account'\n                  )}\n                </button>\n              </div>\n            </form>\n          )}\n        </Card>\n      </div>\n\n      {/* Footer */}\n      <div className=\"mt-8 text-center space-y-4\">\n        {/* Admin Console Link */}\n        <div>\n          <a \n            href=\"/admin/login\" \n            className=\"text-sm text-gray-600 hover:text-primary-600 underline\"\n          >\n            Admin Console\n          </a>\n        </div>\n        \n        <p className=\"text-xs text-gray-500\">\n          By using OncoSafeRx, you agree to our terms and privacy policy.\n          <br />\n          This platform is for healthcare professionals only.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"file":"assets/AuthPage-C-WjUCHT.js"}