{"version":3,"file":"EHRIntegrationDashboard-oe1khb9-.js","sources":["../../src/services/ehrIntegration.ts","../../src/components/Integration/EHRIntegrationDashboard.tsx"],"sourcesContent":["// EHR Integration Framework for OncoSafeRx\n// Supports Epic, Cerner, Allscripts, and other major EHR systems\n\nexport interface EHRSystem {\n  id: string;\n  name: string;\n  version: string;\n  fhirVersion?: string;\n  apiEndpoint?: string;\n  authType: 'oauth2' | 'api_key' | 'saml' | 'certificate';\n  capabilities: EHRCapability[];\n  status: 'connected' | 'disconnected' | 'testing' | 'error';\n}\n\nexport interface EHRCapability {\n  feature: string;\n  supported: boolean;\n  version?: string;\n  limitations?: string[];\n}\n\nexport interface FHIRResource {\n  resourceType: string;\n  id?: string;\n  meta?: {\n    versionId?: string;\n    lastUpdated?: string;\n    source?: string;\n  };\n  identifier?: {\n    system?: string;\n    value?: string;\n  }[];\n  [key: string]: any;\n}\n\nexport interface EHRPatient extends FHIRResource {\n  resourceType: 'Patient';\n  name: {\n    use?: string;\n    family?: string;\n    given?: string[];\n  }[];\n  gender?: 'male' | 'female' | 'other' | 'unknown';\n  birthDate?: string;\n  address?: {\n    use?: string;\n    line?: string[];\n    city?: string;\n    state?: string;\n    postalCode?: string;\n  }[];\n  telecom?: {\n    system?: string;\n    value?: string;\n    use?: string;\n  }[];\n  maritalStatus?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n  };\n  contact?: any[];\n  communication?: any[];\n  generalPractitioner?: any[];\n  managingOrganization?: any;\n}\n\nexport interface EHRMedication extends FHIRResource {\n  resourceType: 'MedicationRequest' | 'MedicationStatement';\n  status?: string;\n  intent?: string;\n  category?: any[];\n  priority?: string;\n  medicationCodeableConcept?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n    text?: string;\n  };\n  subject?: {\n    reference?: string;\n  };\n  authoredOn?: string;\n  requester?: any;\n  dosageInstruction?: {\n    timing?: any;\n    route?: any;\n    doseAndRate?: any[];\n    text?: string;\n  }[];\n  dispenseRequest?: any;\n  substitution?: any;\n}\n\nexport interface EHRLabResult extends FHIRResource {\n  resourceType: 'Observation';\n  status?: string;\n  category?: any[];\n  code?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n    text?: string;\n  };\n  subject?: {\n    reference?: string;\n  };\n  effectiveDateTime?: string;\n  valueQuantity?: {\n    value?: number;\n    unit?: string;\n    system?: string;\n    code?: string;\n  };\n  valueString?: string;\n  valueBoolean?: boolean;\n  interpretation?: any[];\n  referenceRange?: {\n    low?: any;\n    high?: any;\n    text?: string;\n  }[];\n}\n\nexport interface EHRAllergy extends FHIRResource {\n  resourceType: 'AllergyIntolerance';\n  clinicalStatus?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n  };\n  verificationStatus?: any;\n  type?: string;\n  category?: string[];\n  criticality?: string;\n  code?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n    text?: string;\n  };\n  patient?: {\n    reference?: string;\n  };\n  onsetDateTime?: string;\n  recordedDate?: string;\n  recorder?: any;\n  asserter?: any;\n  lastOccurrence?: string;\n  note?: any[];\n  reaction?: {\n    substance?: any;\n    manifestation?: any[];\n    description?: string;\n    onset?: string;\n    severity?: string;\n    exposureRoute?: any;\n    note?: any[];\n  }[];\n}\n\nexport interface EHRCondition extends FHIRResource {\n  resourceType: 'Condition';\n  clinicalStatus?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n  };\n  verificationStatus?: any;\n  category?: any[];\n  severity?: any;\n  code?: {\n    coding?: {\n      system?: string;\n      code?: string;\n      display?: string;\n    }[];\n    text?: string;\n  };\n  subject?: {\n    reference?: string;\n  };\n  onsetDateTime?: string;\n  recordedDate?: string;\n  recorder?: any;\n  asserter?: any;\n  stage?: any[];\n  evidence?: any[];\n  note?: any[];\n}\n\nexport class EHRIntegrationService {\n  private ehrSystems: Map<string, EHRSystem> = new Map();\n  private activeSystem: EHRSystem | null = null;\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n\n  constructor() {\n    this.initializeEHRSystems();\n  }\n\n  // Initialize supported EHR systems\n  private initializeEHRSystems() {\n    // Epic (MyChart/Epic EHR)\n    this.ehrSystems.set('epic', {\n      id: 'epic',\n      name: 'Epic Systems',\n      version: '2023',\n      fhirVersion: 'R4',\n      apiEndpoint: process.env.VITE_EPIC_FHIR_ENDPOINT || 'https://fhir.epic.com/interconnect-fhir-oauth',\n      authType: 'oauth2',\n      capabilities: [\n        { feature: 'patient_read', supported: true },\n        { feature: 'medication_read', supported: true },\n        { feature: 'observation_read', supported: true },\n        { feature: 'condition_read', supported: true },\n        { feature: 'allergy_read', supported: true },\n        { feature: 'medication_write', supported: true, limitations: ['Requires provider credentials'] },\n        { feature: 'smart_launch', supported: true },\n        { feature: 'cds_hooks', supported: true }\n      ],\n      status: 'disconnected'\n    });\n\n    // Cerner (Oracle Health)\n    this.ehrSystems.set('cerner', {\n      id: 'cerner',\n      name: 'Cerner Corporation',\n      version: '2023',\n      fhirVersion: 'R4',\n      apiEndpoint: process.env.VITE_CERNER_FHIR_ENDPOINT || 'https://fhir-open.cerner.com',\n      authType: 'oauth2',\n      capabilities: [\n        { feature: 'patient_read', supported: true },\n        { feature: 'medication_read', supported: true },\n        { feature: 'observation_read', supported: true },\n        { feature: 'condition_read', supported: true },\n        { feature: 'allergy_read', supported: true },\n        { feature: 'medication_write', supported: true },\n        { feature: 'smart_launch', supported: true },\n        { feature: 'cds_hooks', supported: false }\n      ],\n      status: 'disconnected'\n    });\n\n    // Allscripts\n    this.ehrSystems.set('allscripts', {\n      id: 'allscripts',\n      name: 'Allscripts Healthcare Solutions',\n      version: '2023',\n      fhirVersion: 'R4',\n      apiEndpoint: process.env.VITE_ALLSCRIPTS_FHIR_ENDPOINT,\n      authType: 'oauth2',\n      capabilities: [\n        { feature: 'patient_read', supported: true },\n        { feature: 'medication_read', supported: true },\n        { feature: 'observation_read', supported: true },\n        { feature: 'condition_read', supported: true },\n        { feature: 'allergy_read', supported: true },\n        { feature: 'medication_write', supported: false },\n        { feature: 'smart_launch', supported: true },\n        { feature: 'cds_hooks', supported: false }\n      ],\n      status: 'disconnected'\n    });\n\n    // athenahealth\n    this.ehrSystems.set('athena', {\n      id: 'athena',\n      name: 'athenahealth',\n      version: '2023',\n      fhirVersion: 'R4',\n      apiEndpoint: process.env.VITE_ATHENA_FHIR_ENDPOINT,\n      authType: 'oauth2',\n      capabilities: [\n        { feature: 'patient_read', supported: true },\n        { feature: 'medication_read', supported: true },\n        { feature: 'observation_read', supported: true },\n        { feature: 'condition_read', supported: true },\n        { feature: 'allergy_read', supported: true },\n        { feature: 'medication_write', supported: true },\n        { feature: 'smart_launch', supported: true },\n        { feature: 'cds_hooks', supported: false }\n      ],\n      status: 'disconnected'\n    });\n\n    // NextGen Healthcare\n    this.ehrSystems.set('nextgen', {\n      id: 'nextgen',\n      name: 'NextGen Healthcare',\n      version: '2023',\n      fhirVersion: 'R4',\n      apiEndpoint: process.env.VITE_NEXTGEN_FHIR_ENDPOINT,\n      authType: 'oauth2',\n      capabilities: [\n        { feature: 'patient_read', supported: true },\n        { feature: 'medication_read', supported: true },\n        { feature: 'observation_read', supported: true },\n        { feature: 'condition_read', supported: true },\n        { feature: 'allergy_read', supported: true },\n        { feature: 'medication_write', supported: false },\n        { feature: 'smart_launch', supported: true },\n        { feature: 'cds_hooks', supported: false }\n      ],\n      status: 'disconnected'\n    });\n  }\n\n  // Get available EHR systems\n  getAvailableEHRSystems(): EHRSystem[] {\n    return Array.from(this.ehrSystems.values());\n  }\n\n  // Connect to specific EHR system\n  async connectToEHR(ehrId: string, credentials?: any): Promise<boolean> {\n    const ehrSystem = this.ehrSystems.get(ehrId);\n    if (!ehrSystem) {\n      throw new Error(`EHR system ${ehrId} not found`);\n    }\n\n    try {\n      switch (ehrSystem.authType) {\n        case 'oauth2':\n          return await this.authenticateOAuth2(ehrSystem, credentials);\n        case 'api_key':\n          return await this.authenticateAPIKey(ehrSystem, credentials);\n        case 'saml':\n          return await this.authenticateSAML(ehrSystem, credentials);\n        case 'certificate':\n          return await this.authenticateCertificate(ehrSystem, credentials);\n        default:\n          throw new Error(`Unsupported auth type: ${ehrSystem.authType}`);\n      }\n    } catch (error) {\n      console.error(`Failed to connect to ${ehrSystem.name}:`, error);\n      ehrSystem.status = 'error';\n      return false;\n    }\n  }\n\n  // OAuth2 authentication flow\n  private async authenticateOAuth2(ehrSystem: EHRSystem, credentials?: any): Promise<boolean> {\n    // In a real implementation, this would handle the OAuth2 flow\n    // For now, simulate success if credentials are provided\n    if (credentials?.clientId && credentials?.clientSecret) {\n      ehrSystem.status = 'connected';\n      this.activeSystem = ehrSystem;\n      this.accessToken = 'simulated_access_token';\n      return true;\n    }\n    \n    // In production, redirect to OAuth2 authorization URL\n    const authUrl = `${ehrSystem.apiEndpoint}/oauth2/authorize?` +\n      `client_id=${credentials?.clientId}&` +\n      `response_type=code&` +\n      `scope=patient/*.read medication/*.read observation/*.read&` +\n      `redirect_uri=${encodeURIComponent(window.location.origin + '/auth/callback')}`;\n    \n    console.log(`OAuth2 authentication required. Redirect to: ${authUrl}`);\n    return false;\n  }\n\n  // API Key authentication\n  private async authenticateAPIKey(ehrSystem: EHRSystem, credentials?: any): Promise<boolean> {\n    if (credentials?.apiKey) {\n      ehrSystem.status = 'connected';\n      this.activeSystem = ehrSystem;\n      this.accessToken = credentials.apiKey;\n      return true;\n    }\n    return false;\n  }\n\n  // SAML authentication\n  private async authenticateSAML(ehrSystem: EHRSystem, credentials?: any): Promise<boolean> {\n    // SAML implementation would go here\n    console.log('SAML authentication not yet implemented');\n    return false;\n  }\n\n  // Certificate-based authentication\n  private async authenticateCertificate(ehrSystem: EHRSystem, credentials?: any): Promise<boolean> {\n    // Certificate authentication implementation would go here\n    console.log('Certificate authentication not yet implemented');\n    return false;\n  }\n\n  // Get patient data from connected EHR\n  async getPatientData(patientId: string): Promise<EHRPatient | null> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/Patient/${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json',\n          'Content-Type': 'application/fhir+json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch patient data: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching patient data:', error);\n      return null;\n    }\n  }\n\n  // Get medications for patient\n  async getPatientMedications(patientId: string): Promise<EHRMedication[]> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/MedicationRequest?patient=${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch medications: ${response.statusText}`);\n      }\n\n      const bundle = await response.json();\n      return bundle.entry?.map((entry: any) => entry.resource) || [];\n    } catch (error) {\n      console.error('Error fetching medications:', error);\n      return [];\n    }\n  }\n\n  // Get lab results for patient\n  async getPatientLabResults(patientId: string, categoryCode?: string): Promise<EHRLabResult[]> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    try {\n      let url = `${this.activeSystem.apiEndpoint}/Observation?patient=${patientId}&category=laboratory`;\n      if (categoryCode) {\n        url += `&code=${categoryCode}`;\n      }\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch lab results: ${response.statusText}`);\n      }\n\n      const bundle = await response.json();\n      return bundle.entry?.map((entry: any) => entry.resource) || [];\n    } catch (error) {\n      console.error('Error fetching lab results:', error);\n      return [];\n    }\n  }\n\n  // Get allergies for patient\n  async getPatientAllergies(patientId: string): Promise<EHRAllergy[]> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/AllergyIntolerance?patient=${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch allergies: ${response.statusText}`);\n      }\n\n      const bundle = await response.json();\n      return bundle.entry?.map((entry: any) => entry.resource) || [];\n    } catch (error) {\n      console.error('Error fetching allergies:', error);\n      return [];\n    }\n  }\n\n  // Get conditions for patient\n  async getPatientConditions(patientId: string): Promise<EHRCondition[]> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/Condition?patient=${patientId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch conditions: ${response.statusText}`);\n      }\n\n      const bundle = await response.json();\n      return bundle.entry?.map((entry: any) => entry.resource) || [];\n    } catch (error) {\n      console.error('Error fetching conditions:', error);\n      return [];\n    }\n  }\n\n  // Create medication order (if supported)\n  async createMedicationRequest(medicationRequest: Partial<EHRMedication>): Promise<string | null> {\n    if (!this.activeSystem || !this.accessToken) {\n      throw new Error('No active EHR connection');\n    }\n\n    const writeCap = this.activeSystem.capabilities.find(cap => cap.feature === 'medication_write');\n    if (!writeCap?.supported) {\n      throw new Error('Medication writing not supported by this EHR system');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/MedicationRequest`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Accept': 'application/fhir+json',\n          'Content-Type': 'application/fhir+json'\n        },\n        body: JSON.stringify({\n          resourceType: 'MedicationRequest',\n          ...medicationRequest\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create medication request: ${response.statusText}`);\n      }\n\n      const created = await response.json();\n      return created.id;\n    } catch (error) {\n      console.error('Error creating medication request:', error);\n      return null;\n    }\n  }\n\n  // SMART on FHIR launch\n  async smartLaunch(launchContext: any): Promise<boolean> {\n    if (!this.activeSystem) {\n      throw new Error('No active EHR system');\n    }\n\n    const smartCap = this.activeSystem.capabilities.find(cap => cap.feature === 'smart_launch');\n    if (!smartCap?.supported) {\n      throw new Error('SMART launch not supported by this EHR system');\n    }\n\n    try {\n      // Handle SMART launch context\n      console.log('Processing SMART launch context:', launchContext);\n      \n      // In a real implementation, this would:\n      // 1. Validate the launch context\n      // 2. Exchange the launch token for access token\n      // 3. Set up the patient context\n      \n      return true;\n    } catch (error) {\n      console.error('Error during SMART launch:', error);\n      return false;\n    }\n  }\n\n  // CDS Hooks integration\n  async triggerCDSHook(hookName: string, context: any): Promise<any> {\n    if (!this.activeSystem) {\n      throw new Error('No active EHR system');\n    }\n\n    const cdsCap = this.activeSystem.capabilities.find(cap => cap.feature === 'cds_hooks');\n    if (!cdsCap?.supported) {\n      throw new Error('CDS Hooks not supported by this EHR system');\n    }\n\n    try {\n      const response = await fetch(`${this.activeSystem.apiEndpoint}/cds-services/${hookName}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          hook: hookName,\n          hookInstance: Date.now().toString(),\n          context: context\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`CDS Hook failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error triggering CDS Hook:', error);\n      return null;\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus(): { connected: boolean; system?: EHRSystem; token?: boolean } {\n    return {\n      connected: this.activeSystem?.status === 'connected',\n      system: this.activeSystem || undefined,\n      token: !!this.accessToken\n    };\n  }\n\n  // Disconnect from current EHR\n  disconnect(): void {\n    if (this.activeSystem) {\n      this.activeSystem.status = 'disconnected';\n    }\n    this.activeSystem = null;\n    this.accessToken = null;\n    this.refreshToken = null;\n  }\n\n  // Test EHR connection\n  async testConnection(ehrId: string): Promise<boolean> {\n    const ehrSystem = this.ehrSystems.get(ehrId);\n    if (!ehrSystem) {\n      return false;\n    }\n\n    try {\n      ehrSystem.status = 'testing';\n      \n      // Simulate connection test\n      const response = await fetch(`${ehrSystem.apiEndpoint}/metadata`, {\n        headers: {\n          'Accept': 'application/fhir+json'\n        }\n      });\n\n      if (response.ok) {\n        ehrSystem.status = 'disconnected'; // Reset to disconnected after successful test\n        return true;\n      } else {\n        ehrSystem.status = 'error';\n        return false;\n      }\n    } catch (error) {\n      console.error(`Connection test failed for ${ehrSystem.name}:`, error);\n      ehrSystem.status = 'error';\n      return false;\n    }\n  }\n}\n\n// Singleton instance\nexport const ehrIntegrationService = new EHRIntegrationService();\n\n// Utility functions for FHIR data transformation\nexport class FHIRTransformService {\n  // Transform FHIR Patient to OncoSafeRx Patient format\n  static transformPatient(fhirPatient: EHRPatient): any {\n    const name = fhirPatient.name?.[0];\n    const address = fhirPatient.address?.[0];\n    const phone = fhirPatient.telecom?.find(t => t.system === 'phone');\n    const email = fhirPatient.telecom?.find(t => t.system === 'email');\n\n    return {\n      id: fhirPatient.id,\n      demographics: {\n        firstName: name?.given?.[0] || '',\n        lastName: name?.family || '',\n        dateOfBirth: fhirPatient.birthDate || '',\n        sex: fhirPatient.gender || 'unknown',\n        mrn: fhirPatient.identifier?.find(id => id.system?.includes('MR'))?.value || '',\n        contact: {\n          phone: phone?.value || '',\n          email: email?.value || '',\n          address: address ? `${address.line?.join(' ')}, ${address.city}, ${address.state} ${address.postalCode}` : ''\n        }\n      }\n    };\n  }\n\n  // Transform FHIR MedicationRequest to OncoSafeRx Medication format\n  static transformMedication(fhirMed: EHRMedication): any {\n    return {\n      id: fhirMed.id,\n      name: fhirMed.medicationCodeableConcept?.text || \n            fhirMed.medicationCodeableConcept?.coding?.[0]?.display || \n            'Unknown Medication',\n      dosage: fhirMed.dosageInstruction?.[0]?.text || '',\n      frequency: fhirMed.dosageInstruction?.[0]?.timing?.repeat?.frequency || 'Unknown',\n      route: fhirMed.dosageInstruction?.[0]?.route?.text || '',\n      isActive: fhirMed.status === 'active',\n      startDate: fhirMed.authoredOn || '',\n      prescriber: fhirMed.requester?.display || 'Unknown'\n    };\n  }\n\n  // Transform FHIR Observation to OncoSafeRx Lab Value format\n  static transformLabResult(fhirObs: EHRLabResult): any {\n    return {\n      id: fhirObs.id,\n      labType: fhirObs.code?.text || fhirObs.code?.coding?.[0]?.display || 'Unknown Lab',\n      value: fhirObs.valueQuantity?.value?.toString() || \n             fhirObs.valueString || \n             fhirObs.valueBoolean?.toString() || '',\n      unit: fhirObs.valueQuantity?.unit || '',\n      referenceRange: fhirObs.referenceRange?.[0]?.text || '',\n      timestamp: fhirObs.effectiveDateTime || '',\n      isAbnormal: fhirObs.interpretation?.some(interp => \n        interp.coding?.some(code => ['H', 'L', 'A'].includes(code.code || ''))\n      ) || false,\n      criticalFlag: fhirObs.interpretation?.some(interp =>\n        interp.coding?.some(code => ['HH', 'LL', 'AA'].includes(code.code || ''))\n      ) || false\n    };\n  }\n\n  // Transform FHIR AllergyIntolerance to OncoSafeRx Allergy format\n  static transformAllergy(fhirAllergy: EHRAllergy): any {\n    return {\n      id: fhirAllergy.id,\n      allergen: fhirAllergy.code?.text || fhirAllergy.code?.coding?.[0]?.display || 'Unknown Allergen',\n      allergenType: fhirAllergy.category?.[0] || 'unknown',\n      severity: fhirAllergy.criticality || 'unknown',\n      reaction: fhirAllergy.reaction?.[0]?.description || \n               fhirAllergy.reaction?.[0]?.manifestation?.[0]?.text || \n               'Unknown reaction',\n      onsetDate: fhirAllergy.onsetDateTime || fhirAllergy.recordedDate || '',\n      verificationStatus: fhirAllergy.verificationStatus?.coding?.[0]?.code || 'unknown'\n    };\n  }\n\n  // Transform FHIR Condition to OncoSafeRx Medical History format\n  static transformCondition(fhirCondition: EHRCondition): any {\n    return {\n      id: fhirCondition.id,\n      condition: fhirCondition.code?.text || fhirCondition.code?.coding?.[0]?.display || 'Unknown Condition',\n      icd10Code: fhirCondition.code?.coding?.find(c => c.system?.includes('icd'))?.code || '',\n      onsetDate: fhirCondition.onsetDateTime || fhirCondition.recordedDate || '',\n      status: fhirCondition.clinicalStatus?.coding?.[0]?.code || 'unknown',\n      severity: fhirCondition.severity?.coding?.[0]?.display || 'unknown',\n      notes: fhirCondition.note?.[0]?.text || ''\n    };\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { ehrIntegrationService, EHRSystem, FHIRTransformService } from '../../services/ehrIntegration';\nimport Card from '../UI/Card';\nimport Alert from '../UI/Alert';\nimport Tooltip from '../UI/Tooltip';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport { \n  Link2, \n  Database, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  Settings,\n  RefreshCw,\n  Play,\n  Pause,\n  Monitor,\n  Key,\n  Shield,\n  Globe,\n  Server,\n  Cloud,\n  Zap,\n  Activity,\n  FileText,\n  Users,\n  Pill,\n  TestTube,\n  AlertCircle,\n  ExternalLink,\n  Download,\n  Upload,\n  Clock,\n  CheckSquare,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\ninterface ConnectionStatus {\n  connected: boolean;\n  system?: EHRSystem;\n  token?: boolean;\n  lastSync?: Date;\n  syncedRecords?: {\n    patients: number;\n    medications: number;\n    labResults: number;\n    allergies: number;\n    conditions: number;\n  };\n}\n\ninterface SyncOperation {\n  id: string;\n  type: 'full' | 'incremental' | 'patient' | 'medications' | 'labs';\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  startTime: Date;\n  endTime?: Date;\n  recordsProcessed: number;\n  recordsTotal: number;\n  errors: string[];\n}\n\nconst EHRIntegrationDashboard: React.FC = () => {\n  const [ehrSystems, setEHRSystems] = useState<EHRSystem[]>([]);\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({ connected: false });\n  const [selectedEHR, setSelectedEHR] = useState<string>('');\n  const [showCredentials, setShowCredentials] = useState(false);\n  const [credentials, setCredentials] = useState({\n    clientId: '',\n    clientSecret: '',\n    apiKey: '',\n    endpoint: ''\n  });\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isTesting, setIsTesting] = useState<string>('');\n  const [syncOperations, setSyncOperations] = useState<SyncOperation[]>([]);\n  const [isAutoSync, setIsAutoSync] = useState(true);\n  const [syncInterval, setSyncInterval] = useState(300); // 5 minutes\n\n  useEffect(() => {\n    loadEHRSystems();\n    loadConnectionStatus();\n    \n    // Set up auto-sync if enabled\n    if (isAutoSync && connectionStatus.connected) {\n      const interval = setInterval(() => {\n        performIncrementalSync();\n      }, syncInterval * 1000);\n      \n      return () => clearInterval(interval);\n    }\n  }, [isAutoSync, syncInterval, connectionStatus.connected]);\n\n  const loadEHRSystems = () => {\n    const systems = ehrIntegrationService.getAvailableEHRSystems();\n    setEHRSystems(systems);\n  };\n\n  const loadConnectionStatus = () => {\n    const status = ehrIntegrationService.getConnectionStatus();\n    setConnectionStatus({\n      ...status,\n      lastSync: new Date(Date.now() - Math.random() * 3600000), // Random time in last hour\n      syncedRecords: {\n        patients: Math.floor(Math.random() * 1000) + 500,\n        medications: Math.floor(Math.random() * 5000) + 2000,\n        labResults: Math.floor(Math.random() * 10000) + 5000,\n        allergies: Math.floor(Math.random() * 500) + 200,\n        conditions: Math.floor(Math.random() * 2000) + 1000\n      }\n    });\n  };\n\n  const handleConnect = async () => {\n    if (!selectedEHR) return;\n    \n    setIsConnecting(true);\n    try {\n      const success = await ehrIntegrationService.connectToEHR(selectedEHR, credentials);\n      if (success) {\n        loadConnectionStatus();\n        // Start initial sync\n        await performFullSync();\n      } else {\n        // Handle OAuth2 redirect or show error\n        console.log('Connection requires additional authentication steps');\n      }\n    } catch (error) {\n      console.error('Connection failed:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = () => {\n    ehrIntegrationService.disconnect();\n    loadConnectionStatus();\n    setSyncOperations([]);\n  };\n\n  const handleTestConnection = async (ehrId: string) => {\n    setIsTesting(ehrId);\n    try {\n      const success = await ehrIntegrationService.testConnection(ehrId);\n      console.log(`Test connection to ${ehrId}: ${success ? 'Success' : 'Failed'}`);\n    } catch (error) {\n      console.error('Test connection failed:', error);\n    } finally {\n      setIsTesting('');\n      loadEHRSystems();\n    }\n  };\n\n  const performFullSync = async () => {\n    const operation: SyncOperation = {\n      id: Date.now().toString(),\n      type: 'full',\n      status: 'running',\n      startTime: new Date(),\n      recordsProcessed: 0,\n      recordsTotal: 1000, // Estimated\n      errors: []\n    };\n\n    setSyncOperations(prev => [operation, ...prev]);\n\n    // Simulate sync progress\n    const interval = setInterval(() => {\n      setSyncOperations(prev => prev.map(op => {\n        if (op.id === operation.id && op.status === 'running') {\n          const newProcessed = Math.min(op.recordsProcessed + Math.floor(Math.random() * 50) + 10, op.recordsTotal);\n          if (newProcessed >= op.recordsTotal) {\n            return {\n              ...op,\n              status: 'completed',\n              recordsProcessed: newProcessed,\n              endTime: new Date()\n            };\n          }\n          return { ...op, recordsProcessed: newProcessed };\n        }\n        return op;\n      }));\n    }, 1000);\n\n    // Complete after simulation\n    setTimeout(() => {\n      clearInterval(interval);\n      loadConnectionStatus();\n    }, 10000);\n  };\n\n  const performIncrementalSync = async () => {\n    if (!connectionStatus.connected) return;\n\n    const operation: SyncOperation = {\n      id: Date.now().toString(),\n      type: 'incremental',\n      status: 'running',\n      startTime: new Date(),\n      recordsProcessed: 0,\n      recordsTotal: Math.floor(Math.random() * 100) + 20,\n      errors: []\n    };\n\n    setSyncOperations(prev => [operation, ...prev.slice(0, 9)]); // Keep last 10 operations\n\n    // Simulate quick incremental sync\n    setTimeout(() => {\n      setSyncOperations(prev => prev.map(op => {\n        if (op.id === operation.id) {\n          return {\n            ...op,\n            status: 'completed',\n            recordsProcessed: op.recordsTotal,\n            endTime: new Date()\n          };\n        }\n        return op;\n      }));\n      loadConnectionStatus();\n    }, 3000);\n  };\n\n  const getSystemStatusIcon = (status: string) => {\n    switch (status) {\n      case 'connected': return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'testing': return <RefreshCw className=\"w-5 h-5 text-blue-600 animate-spin\" />;\n      case 'error': return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default: return <AlertTriangle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getSystemStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected': return 'bg-green-50 border-green-200';\n      case 'testing': return 'bg-blue-50 border-blue-200';\n      case 'error': return 'bg-red-50 border-red-200';\n      default: return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getSyncStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <RefreshCw className=\"w-4 h-4 animate-spin text-blue-600\" />;\n      case 'completed': return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'failed': return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default: return <Clock className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const formatDuration = (start: Date, end?: Date) => {\n    const endTime = end || new Date();\n    const duration = endTime.getTime() - start.getTime();\n    const seconds = Math.floor(duration / 1000);\n    const minutes = Math.floor(seconds / 60);\n    \n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n    return `${seconds}s`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Link2 className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">EHR Integration Dashboard</h1>\n              <p className=\"text-gray-600\">\n                Connect OncoSafeRx with your Electronic Health Record system\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {connectionStatus.connected && (\n              <button\n                onClick={performFullSync}\n                className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n                <span>Full Sync</span>\n              </button>\n            )}\n          </div>\n        </div>\n      </Card>\n\n      {/* Connection Status */}\n      {connectionStatus.connected && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <CheckCircle className=\"w-6 h-6 text-green-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Connected to {connectionStatus.system?.name}</h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{connectionStatus.syncedRecords?.patients || 0}</div>\n              <div className=\"text-sm text-gray-600\">Patients</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{connectionStatus.syncedRecords?.medications || 0}</div>\n              <div className=\"text-sm text-gray-600\">Medications</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{connectionStatus.syncedRecords?.labResults || 0}</div>\n              <div className=\"text-sm text-gray-600\">Lab Results</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{connectionStatus.syncedRecords?.allergies || 0}</div>\n              <div className=\"text-sm text-gray-600\">Allergies</div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-gray-600\">Last sync: {connectionStatus.lastSync?.toLocaleTimeString()}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isAutoSync}\n                    onChange={(e) => setIsAutoSync(e.target.checked)}\n                    className=\"rounded text-blue-600\"\n                  />\n                  <span className=\"text-sm text-gray-600\">Auto-sync</span>\n                </label>\n                {isAutoSync && (\n                  <select\n                    value={syncInterval}\n                    onChange={(e) => setSyncInterval(Number(e.target.value))}\n                    className=\"text-sm border border-gray-300 rounded px-2 py-1\"\n                  >\n                    <option value={60}>1 min</option>\n                    <option value={300}>5 min</option>\n                    <option value={900}>15 min</option>\n                    <option value={3600}>1 hour</option>\n                  </select>\n                )}\n              </div>\n            </div>\n            <button\n              onClick={handleDisconnect}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n            >\n              Disconnect\n            </button>\n          </div>\n        </Card>\n      )}\n\n      {/* Available EHR Systems */}\n      <Card>\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Database className=\"w-6 h-6 text-blue-500\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Available EHR Systems</h2>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {ehrSystems.map((system) => (\n            <div key={system.id} className={`border rounded-lg p-4 ${getSystemStatusColor(system.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  {getSystemStatusIcon(system.status)}\n                  <h3 className=\"font-semibold text-gray-900\">{system.name}</h3>\n                </div>\n                <div className=\"flex space-x-1\">\n                  <button\n                    onClick={() => handleTestConnection(system.id)}\n                    disabled={isTesting === system.id}\n                    className=\"p-1 text-gray-400 hover:text-gray-600\"\n                    title=\"Test Connection\"\n                  >\n                    {isTesting === system.id ? (\n                      <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <Activity className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                  <button\n                    onClick={() => setSelectedEHR(selectedEHR === system.id ? '' : system.id)}\n                    className=\"p-1 text-gray-400 hover:text-gray-600\"\n                    title=\"Configure\"\n                  >\n                    <Settings className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Version:</span>\n                  <span className=\"font-medium\">{system.version}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">FHIR:</span>\n                  <span className=\"font-medium\">{system.fhirVersion || 'N/A'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Auth:</span>\n                  <span className=\"font-medium capitalize\">{system.authType.replace('_', ' ')}</span>\n                </div>\n              </div>\n\n              <div className=\"mt-3\">\n                <div className=\"text-xs text-gray-600 mb-1\">Capabilities:</div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {system.capabilities.slice(0, 3).map((cap, idx) => (\n                    <span\n                      key={idx}\n                      className={`px-2 py-1 text-xs rounded ${\n                        cap.supported ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'\n                      }`}\n                    >\n                      {cap.feature.replace('_', ' ')}\n                    </span>\n                  ))}\n                  {system.capabilities.length > 3 && (\n                    <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                      +{system.capabilities.length - 3}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              {selectedEHR === system.id && (\n                <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                  <div className=\"space-y-3\">\n                    {system.authType === 'oauth2' && (\n                      <>\n                        <div>\n                          <label className=\"block text-xs font-medium text-gray-700 mb-1\">Client ID</label>\n                          <input\n                            type=\"text\"\n                            value={credentials.clientId}\n                            onChange={(e) => setCredentials(prev => ({ ...prev, clientId: e.target.value }))}\n                            className=\"w-full text-sm border border-gray-300 rounded px-2 py-1\"\n                            placeholder=\"Enter client ID\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-xs font-medium text-gray-700 mb-1\">Client Secret</label>\n                          <div className=\"relative\">\n                            <input\n                              type={showCredentials ? 'text' : 'password'}\n                              value={credentials.clientSecret}\n                              onChange={(e) => setCredentials(prev => ({ ...prev, clientSecret: e.target.value }))}\n                              className=\"w-full text-sm border border-gray-300 rounded px-2 py-1 pr-8\"\n                              placeholder=\"Enter client secret\"\n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowCredentials(!showCredentials)}\n                              className=\"absolute right-2 top-1 text-gray-400 hover:text-gray-600\"\n                            >\n                              {showCredentials ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                            </button>\n                          </div>\n                        </div>\n                      </>\n                    )}\n                    \n                    {system.authType === 'api_key' && (\n                      <div>\n                        <label className=\"block text-xs font-medium text-gray-700 mb-1\">API Key</label>\n                        <div className=\"relative\">\n                          <input\n                            type={showCredentials ? 'text' : 'password'}\n                            value={credentials.apiKey}\n                            onChange={(e) => setCredentials(prev => ({ ...prev, apiKey: e.target.value }))}\n                            className=\"w-full text-sm border border-gray-300 rounded px-2 py-1 pr-8\"\n                            placeholder=\"Enter API key\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowCredentials(!showCredentials)}\n                            className=\"absolute right-2 top-1 text-gray-400 hover:text-gray-600\"\n                          >\n                            {showCredentials ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          </button>\n                        </div>\n                      </div>\n                    )}\n\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Endpoint (Optional)</label>\n                      <input\n                        type=\"url\"\n                        value={credentials.endpoint}\n                        onChange={(e) => setCredentials(prev => ({ ...prev, endpoint: e.target.value }))}\n                        className=\"w-full text-sm border border-gray-300 rounded px-2 py-1\"\n                        placeholder={system.apiEndpoint || \"Enter custom endpoint\"}\n                      />\n                    </div>\n\n                    <button\n                      onClick={handleConnect}\n                      disabled={isConnecting || connectionStatus.connected}\n                      className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n                    >\n                      {isConnecting ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                          <span>Connecting...</span>\n                        </>\n                      ) : (\n                        <>\n                          <Link2 className=\"w-4 h-4\" />\n                          <span>Connect</span>\n                        </>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Sync Operations History */}\n      {syncOperations.length > 0 && (\n        <Card>\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <RefreshCw className=\"w-6 h-6 text-green-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Sync Operations</h2>\n          </div>\n\n          <div className=\"space-y-4\">\n            {syncOperations.map((operation) => (\n              <div key={operation.id} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getSyncStatusIcon(operation.status)}\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 capitalize\">{operation.type} Sync</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Started: {operation.startTime.toLocaleTimeString()}\n                        {operation.endTime && ` • Duration: ${formatDuration(operation.startTime, operation.endTime)}`}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">\n                      {operation.recordsProcessed} / {operation.recordsTotal} records\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {Math.round((operation.recordsProcessed / operation.recordsTotal) * 100)}% complete\n                    </div>\n                  </div>\n                </div>\n\n                {operation.status === 'running' && (\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${(operation.recordsProcessed / operation.recordsTotal) * 100}%` }}\n                    ></div>\n                  </div>\n                )}\n\n                {operation.errors.length > 0 && (\n                  <div className=\"mt-3 p-3 bg-red-50 border border-red-200 rounded\">\n                    <h4 className=\"text-sm font-medium text-red-800 mb-1\">Errors:</h4>\n                    <ul className=\"text-sm text-red-700 list-disc list-inside\">\n                      {operation.errors.map((error, idx) => (\n                        <li key={idx}>{error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Integration Documentation */}\n      <Card>\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <FileText className=\"w-6 h-6 text-gray-500\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Integration Documentation</h2>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">FHIR R4 Support</h3>\n            <p className=\"text-sm text-gray-600 mb-3\">\n              Full support for FHIR R4 resources including Patient, Medication, Observation, and more.\n            </p>\n            <a href=\"https://hl7.org/fhir/R4/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-700 text-sm flex items-center space-x-1\">\n              <ExternalLink className=\"w-4 h-4\" />\n              <span>View FHIR Documentation</span>\n            </a>\n          </div>\n\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">SMART on FHIR</h3>\n            <p className=\"text-sm text-gray-600 mb-3\">\n              Launch OncoSafeRx directly from your EHR with patient context using SMART on FHIR.\n            </p>\n            <a href=\"https://docs.smarthealthit.org/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-700 text-sm flex items-center space-x-1\">\n              <ExternalLink className=\"w-4 h-4\" />\n              <span>SMART Launch Guide</span>\n            </a>\n          </div>\n\n          <div className=\"border border-gray-200 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">CDS Hooks</h3>\n            <p className=\"text-sm text-gray-600 mb-3\">\n              Real-time clinical decision support integration with medication ordering workflows.\n            </p>\n            <a href=\"https://cds-hooks.hl7.org/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-700 text-sm flex items-center space-x-1\">\n              <ExternalLink className=\"w-4 h-4\" />\n              <span>CDS Hooks Setup</span>\n            </a>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default EHRIntegrationDashboard;"],"names":["EHRIntegrationService","define_process_env_default","ehrId","credentials","ehrSystem","error","authUrl","patientId","response","entry","categoryCode","url","medicationRequest","cap","launchContext","hookName","context","ehrIntegrationService","EHRIntegrationDashboard","ehrSystems","setEHRSystems","useState","connectionStatus","setConnectionStatus","selectedEHR","setSelectedEHR","showCredentials","setShowCredentials","setCredentials","isConnecting","setIsConnecting","isTesting","setIsTesting","syncOperations","setSyncOperations","isAutoSync","setIsAutoSync","syncInterval","setSyncInterval","useEffect","loadEHRSystems","loadConnectionStatus","interval","performIncrementalSync","systems","status","handleConnect","performFullSync","handleDisconnect","handleTestConnection","success","operation","prev","op","newProcessed","getSystemStatusIcon","jsx","CheckCircle","RefreshCw","XCircle","AlertTriangle","getSystemStatusColor","getSyncStatusIcon","Clock","formatDuration","start","end","duration","seconds","minutes","jsxs","Card","Link2","e","Database","system","Activity","Settings","idx","Fragment","EyeOff","Eye","FileText","ExternalLink"],"mappings":"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"}