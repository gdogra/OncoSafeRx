class h{constructor(){this.STORAGE_KEY="oncosaferx_patients",this.TREATMENT_HISTORY_KEY="oncosaferx_treatment_history"}getPatients(){try{const a=localStorage.getItem(this.STORAGE_KEY);return a?JSON.parse(a):[]}catch(a){return console.error("Error retrieving patients:",a),[]}}getPatient(a){return this.getPatients().find(t=>t.id===a)||null}savePatient(a){try{const i=this.getPatients(),t=i.findIndex(e=>e.id===a.id);t!==-1?i[t]=a:i.push(a),localStorage.setItem(this.STORAGE_KEY,JSON.stringify(i))}catch(i){throw console.error("Error saving patient:",i),new Error("Failed to save patient")}}deletePatient(a){try{const t=this.getPatients().filter(e=>e.id!==a);localStorage.setItem(this.STORAGE_KEY,JSON.stringify(t))}catch(i){throw console.error("Error deleting patient:",i),new Error("Failed to delete patient")}}searchPatients(a){const i=this.getPatients(),t=a.toLowerCase();return i.filter(e=>e.firstName.toLowerCase().includes(t)||e.lastName.toLowerCase().includes(t)||e.mrn?.toLowerCase().includes(t)||e.diagnosis.toLowerCase().includes(t))}addTreatmentCourse(a,i){const t=this.getPatient(a);if(!t)throw new Error("Patient not found");t.treatmentHistory=t.treatmentHistory||[],t.treatmentHistory.push(i),this.savePatient(t)}updateTreatmentCourse(a,i,t){const e=this.getPatient(a);if(!e)throw new Error("Patient not found");const n=e.treatmentHistory.findIndex(o=>o.id===i);if(n===-1)throw new Error("Treatment course not found");e.treatmentHistory[n]={...e.treatmentHistory[n],...t},this.savePatient(e)}addToxicity(a,i,t){const e=this.getPatient(a);if(!e)throw new Error("Patient not found");const n=e.treatmentHistory.find(o=>o.id===i);if(!n)throw new Error("Treatment course not found");n.toxicities=n.toxicities||[],n.toxicities.push(t),this.savePatient(e)}updateLabValues(a,i){const t=this.getPatient(a);if(!t)throw new Error("Patient not found");t.labValues=t.labValues||[],t.labValues.push(i),t.labValues=t.labValues.sort((e,n)=>new Date(n.date).getTime()-new Date(e.date).getTime()).slice(0,50),this.savePatient(t)}updateGenomicProfile(a,i){const t=this.getPatient(a);if(!t)throw new Error("Patient not found");t.genomicProfile=i,this.savePatient(t)}addBiomarker(a,i){const t=this.getPatient(a);if(!t)throw new Error("Patient not found");t.biomarkers=t.biomarkers||[],t.biomarkers.push(i),this.savePatient(t)}getTreatmentTimeline(a){const i=this.getPatient(a);if(!i)return[];const t=[];return i.treatmentHistory.forEach(e=>{if(t.push({date:e.startDate,type:"treatment",title:`Started ${e.regimenName}`,description:`Treatment course initiated (${e.cycles} cycles planned)`,severity:"medium"}),e.endDate&&t.push({date:e.endDate,type:"treatment",title:`Completed ${e.regimenName}`,description:`Treatment course completed (${e.cycles} cycles)`,severity:"low"}),e.response){const n=e.endDate||new Date().toISOString().split("T")[0];t.push({date:n,type:"response",title:`Response Assessment: ${e.response}`,description:"Treatment response evaluated",severity:e.response==="CR"||e.response==="PR"?"low":"medium"})}e.toxicities?.forEach(n=>{t.push({date:n.onset,type:"toxicity",title:`${n.name} (Grade ${n.grade})`,description:`Toxicity event - ${n.attribution} attribution`,severity:n.grade>=3?"high":"medium"})})}),i.labValues.forEach(e=>{e.anc<1&&t.push({date:e.date,type:"lab",title:"Neutropenia",description:`ANC: ${e.anc} x10³/μL`,severity:e.anc<.5?"high":"medium"}),e.platelets<100&&t.push({date:e.date,type:"lab",title:"Thrombocytopenia",description:`Platelets: ${e.platelets} x10³/μL`,severity:e.platelets<50?"high":"medium"})}),t.sort((e,n)=>new Date(n.date).getTime()-new Date(e.date).getTime())}getPatientStats(){const a=this.getPatients(),i=a.length,t=a.filter(s=>s.treatmentHistory.some(r=>!r.endDate)).length,e=a.filter(s=>s.treatmentHistory.some(r=>!r.endDate)).length,n=a.reduce((s,r)=>s+r.treatmentHistory.filter(m=>m.endDate).length,0),o=a.filter(s=>s.dateOfBirth).map(s=>this.calculateAge(s.dateOfBirth)),l=o.length>0?Math.round(o.reduce((s,r)=>s+r,0)/o.length):0,c={};a.forEach(s=>{s.diagnosis&&(c[s.diagnosis]=(c[s.diagnosis]||0)+1)});const d=Object.entries(c).map(([s,r])=>({diagnosis:s,count:r})).sort((s,r)=>r.count-s.count).slice(0,5);return{totalPatients:i,activePatients:t,patientsOnTreatment:e,completedTreatments:n,averageAge:l,commonDiagnoses:d}}calculateAge(a){const i=new Date,t=new Date(a);let e=i.getFullYear()-t.getFullYear();const n=i.getMonth()-t.getMonth();return(n<0||n===0&&i.getDate()<t.getDate())&&e--,e}generateSamplePatients(){const a=[{id:"patient_001",mrn:"MRN001234",firstName:"John",lastName:"Doe",dateOfBirth:"1965-03-15",gender:"male",height:175,weight:80,diagnosis:"Non-small cell lung cancer, stage IV",stage:"IV",ecogPerformanceStatus:1,renalFunction:{creatinine:1.1},hepaticFunction:{bilirubin:.8,alt:32,ast:28,albumin:4.2},labValues:[{date:"2024-09-15",hemoglobin:12.5,platelets:250,anc:3.2,wbc:6.8}],allergies:["penicillin"],contraindications:[],currentMedications:[{name:"Pembrolizumab",dose:"200mg",frequency:"Every 3 weeks",startDate:"2024-08-01"}],treatmentHistory:[{id:"tx_001",regimenName:"Pembrolizumab",startDate:"2024-08-01",cycles:4,response:"PR",toxicities:[],doseModifications:[]}],biomarkers:[{name:"PD-L1",value:"85%",date:"2024-07-15",method:"22C3 pharmDx"}]},{id:"patient_002",mrn:"MRN005678",firstName:"Jane",lastName:"Smith",dateOfBirth:"1958-11-22",gender:"female",height:162,weight:65,diagnosis:"Invasive ductal carcinoma, HER2+",stage:"IIIA",ecogPerformanceStatus:0,renalFunction:{creatinine:.9},hepaticFunction:{bilirubin:.6,alt:25,ast:22,albumin:4},labValues:[{date:"2024-09-15",hemoglobin:11.8,platelets:180,anc:2.8,wbc:5.4}],allergies:[],contraindications:[],currentMedications:[{name:"Trastuzumab",dose:"6mg/kg",frequency:"Every 3 weeks",startDate:"2024-07-15"}],treatmentHistory:[{id:"tx_002",regimenName:"AC-T + Trastuzumab",startDate:"2024-04-01",endDate:"2024-07-15",cycles:8,response:"CR",toxicities:[{name:"Neuropathy",grade:2,onset:"2024-06-15",attribution:"probable"}],doseModifications:[]}],biomarkers:[{name:"HER2",value:"3+",date:"2024-03-20",method:"IHC"}]}];this.getPatients().length===0&&a.forEach(t=>this.savePatient(t))}exportPatientData(a){const i=a?[this.getPatient(a)]:this.getPatients();return JSON.stringify({patients:i,exportDate:new Date().toISOString(),version:"1.0"},null,2)}importPatientData(a){try{const i=JSON.parse(a);i.patients&&Array.isArray(i.patients)&&i.patients.forEach(t=>this.savePatient(t))}catch{throw new Error("Invalid patient data format")}}}const u=new h;export{u as p};
//# sourceMappingURL=patientService-CIN-SwuH.js.map
