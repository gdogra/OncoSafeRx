# Docker Compose for OncoSafeRx Production Deployment
version: '3.8'

services:
  # Frontend Application
  oncosaferx-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: production
        REACT_APP_VERSION: 1.0.0
    image: oncosaferx/frontend:1.0.0
    container_name: oncosaferx-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs/nginx:/var/log/nginx
      # SSL certificates (uncomment when available)
      # - ./ssl:/etc/ssl:ro
    networks:
      - oncosaferx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oncosaferx.rule=Host(`oncosaferx.com`)"
      - "traefik.http.services.oncosaferx.loadbalancer.server.port=80"
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: oncosaferx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - oncosaferx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    container_name: oncosaferx-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # SSL configuration (uncomment when certificates are available)
      # - --certificatesresolvers.letsencrypt.acme.email=admin@oncosaferx.com
      # - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
    networks:
      - oncosaferx-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.oncosaferx.com`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: oncosaferx-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - oncosaferx-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: oncosaferx-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - oncosaferx-network
    depends_on:
      - prometheus

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: oncosaferx-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - oncosaferx-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: oncosaferx-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - oncosaferx-network
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: oncosaferx-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/var/log/app:ro
    networks:
      - oncosaferx-network
    depends_on:
      - elasticsearch

# Networks
networks:
  oncosaferx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local