{"version":3,"file":"AIInsights-DLW-dEjA.js","sources":["../../src/services/aiService.ts","../../src/components/AI/AIDashboard.tsx","../../src/pages/AIInsights.tsx"],"sourcesContent":["import { \n  AIRecommendation, \n  PredictiveModel, \n  RealWorldEvidence, \n  ClinicalDecisionSupportRule,\n  EvidenceSource,\n  TrainingDataInfo,\n  PerformanceMetric\n} from '../types/ai';\nimport { Patient } from '../types/clinical';\n\nexport class AIService {\n  private readonly AI_RECOMMENDATIONS_KEY = 'oncosaferx_ai_recommendations';\n  private readonly PREDICTIVE_MODELS_KEY = 'oncosaferx_predictive_models';\n  private readonly RWE_STUDIES_KEY = 'oncosaferx_rwe_studies';\n  private readonly CDS_RULES_KEY = 'oncosaferx_cds_rules';\n\n  // AI Recommendations\n  public getAIRecommendations(patientId?: string): AIRecommendation[] {\n    try {\n      const stored = localStorage.getItem(this.AI_RECOMMENDATIONS_KEY);\n      const recommendations = stored ? JSON.parse(stored) : [];\n      \n      if (patientId) {\n        return recommendations.filter((r: AIRecommendation) => r.patientId === patientId);\n      }\n      \n      return recommendations;\n    } catch (error) {\n      console.error('Error retrieving AI recommendations:', error);\n      return [];\n    }\n  }\n\n  public saveAIRecommendation(recommendation: AIRecommendation): void {\n    try {\n      const recommendations = this.getAIRecommendations();\n      const existingIndex = recommendations.findIndex(r => r.id === recommendation.id);\n      \n      if (existingIndex !== -1) {\n        recommendations[existingIndex] = recommendation;\n      } else {\n        recommendations.push(recommendation);\n      }\n      \n      localStorage.setItem(this.AI_RECOMMENDATIONS_KEY, JSON.stringify(recommendations));\n    } catch (error) {\n      console.error('Error saving AI recommendation:', error);\n      throw new Error('Failed to save AI recommendation');\n    }\n  }\n\n  public generateRecommendations(patient: Patient): Promise<AIRecommendation[]> {\n    return new Promise((resolve) => {\n      // Simulate AI processing delay\n      setTimeout(() => {\n        const recommendations: AIRecommendation[] = [];\n\n        // Treatment recommendations based on patient profile\n        if (patient.diagnosis.toLowerCase().includes('lung cancer')) {\n          recommendations.push(this.generateLungCancerRecommendations(patient));\n        }\n\n        if (patient.diagnosis.toLowerCase().includes('breast cancer')) {\n          recommendations.push(this.generateBreastCancerRecommendations(patient));\n        }\n\n        // Genomic-based recommendations\n        if (patient.genomicProfile) {\n          recommendations.push(...this.generateGenomicRecommendations(patient));\n        }\n\n        // Monitoring recommendations\n        recommendations.push(this.generateMonitoringRecommendations(patient));\n\n        // Clinical trial recommendations\n        recommendations.push(this.generateClinicalTrialRecommendations(patient));\n\n        // Save recommendations\n        recommendations.forEach(rec => this.saveAIRecommendation(rec));\n\n        resolve(recommendations);\n      }, 2000);\n    });\n  }\n\n  private generateLungCancerRecommendations(patient: Patient): AIRecommendation {\n    return {\n      id: `ai_rec_${Date.now()}_lung`,\n      patientId: patient.id,\n      type: 'treatment',\n      title: 'Personalized Lung Cancer Treatment Recommendation',\n      description: 'AI-powered treatment selection based on patient profile and current evidence',\n      rationale: 'Analysis of patient characteristics, stage, performance status, and genomic profile suggests optimal treatment approach',\n      confidenceScore: 85,\n      evidenceLevel: 'high',\n      evidenceSources: [\n        {\n          type: 'clinical_trial',\n          title: 'KEYNOTE-189: Pembrolizumab plus Chemotherapy in Metastatic NSCLC',\n          authors: ['Gandhi L', 'Rodriguez-Abreu D'],\n          journal: 'NEJM',\n          publicationDate: '2018-05-31',\n          pmid: '29658856',\n          evidenceGrade: 'A',\n          relevanceScore: 92,\n          summary: 'First-line pembrolizumab plus chemotherapy significantly improved overall survival',\n          keyFindings: [\n            'Median OS 22.0 months vs 10.7 months (HR 0.56)',\n            'Higher response rates in PD-L1 positive patients',\n            'Manageable safety profile'\n          ]\n        }\n      ],\n      indication: patient.diagnosis,\n      contraindications: [],\n      prerequisites: ['PD-L1 testing', 'Adequate organ function'],\n      modelVersion: '2024.1',\n      modelType: 'ensemble',\n      trainingData: {\n        datasetSize: 15000,\n        patientPopulation: 'Advanced NSCLC patients',\n        dateRange: {\n          start: '2018-01-01',\n          end: '2024-01-01'\n        },\n        institutions: ['MSKCC', 'Dana-Farber', 'MD Anderson'],\n        validationMethod: 'external_validation',\n        performanceMetrics: [\n          { metric: 'accuracy', value: 0.82 },\n          { metric: 'auc', value: 0.89 }\n        ]\n      },\n      priority: 'high',\n      urgency: 'routine',\n      timeFrame: '2-4 weeks',\n      validationStatus: 'pending',\n      implementation: {\n        status: 'not_implemented'\n      },\n      generatedDate: new Date().toISOString(),\n      tags: ['lung_cancer', 'immunotherapy', 'first_line']\n    };\n  }\n\n  private generateBreastCancerRecommendations(patient: Patient): AIRecommendation {\n    return {\n      id: `ai_rec_${Date.now()}_breast`,\n      patientId: patient.id,\n      type: 'treatment',\n      title: 'HER2-Targeted Therapy Recommendation',\n      description: 'Precision therapy selection based on HER2 status and patient characteristics',\n      rationale: 'HER2-positive breast cancer benefits from targeted anti-HER2 therapy combined with chemotherapy',\n      confidenceScore: 92,\n      evidenceLevel: 'high',\n      evidenceSources: [\n        {\n          type: 'meta_analysis',\n          title: 'Anti-HER2 therapy in HER2-positive breast cancer',\n          evidenceGrade: 'A',\n          relevanceScore: 95,\n          summary: 'Meta-analysis confirming significant benefit of anti-HER2 therapy',\n          keyFindings: [\n            'Improved disease-free survival',\n            'Reduced risk of recurrence',\n            'Overall survival benefit'\n          ]\n        }\n      ],\n      indication: patient.diagnosis,\n      contraindications: ['Severe cardiac dysfunction'],\n      prerequisites: ['HER2 testing', 'Cardiac function assessment'],\n      modelVersion: '2024.1',\n      modelType: 'machine_learning',\n      trainingData: {\n        datasetSize: 8500,\n        patientPopulation: 'HER2-positive breast cancer',\n        dateRange: {\n          start: '2015-01-01',\n          end: '2024-01-01'\n        },\n        institutions: ['Multiple international centers'],\n        validationMethod: 'cross_validation',\n        performanceMetrics: [\n          { metric: 'accuracy', value: 0.88 },\n          { metric: 'sensitivity', value: 0.91 }\n        ]\n      },\n      priority: 'high',\n      urgency: 'routine',\n      timeFrame: '1-2 weeks',\n      validationStatus: 'pending',\n      implementation: {\n        status: 'not_implemented'\n      },\n      generatedDate: new Date().toISOString(),\n      tags: ['breast_cancer', 'her2_positive', 'targeted_therapy']\n    };\n  }\n\n  private generateGenomicRecommendations(patient: Patient): AIRecommendation[] {\n    const recommendations: AIRecommendation[] = [];\n\n    if (patient.genomicProfile?.mutations) {\n      patient.genomicProfile.mutations.forEach(mutation => {\n        if (mutation.clinicalSignificance === 'pathogenic' || mutation.clinicalSignificance === 'likely_pathogenic') {\n          recommendations.push({\n            id: `ai_rec_${Date.now()}_genomic_${mutation.gene}`,\n            patientId: patient.id,\n            type: 'genomic',\n            title: `${mutation.gene} Mutation-Targeted Therapy`,\n            description: `Targeted therapy recommendation based on ${mutation.gene} ${mutation.variant} mutation`,\n            rationale: `Patient harbors ${mutation.gene} mutation which is associated with sensitivity to specific targeted agents`,\n            confidenceScore: 78,\n            evidenceLevel: 'moderate',\n            evidenceSources: [\n              {\n                type: 'guideline',\n                title: 'NCCN Guidelines for precision oncology',\n                evidenceGrade: 'B',\n                relevanceScore: 85,\n                summary: 'Guidelines recommend molecular testing and targeted therapy selection',\n                keyFindings: [\n                  'Improved outcomes with matched therapy',\n                  'Precision medicine approach'\n                ]\n              }\n            ],\n            indication: patient.diagnosis,\n            contraindications: [],\n            prerequisites: ['Molecular confirmation', 'Adequate performance status'],\n            modelVersion: '2024.1',\n            modelType: 'rule_based',\n            trainingData: {\n              datasetSize: 5000,\n              patientPopulation: 'Patients with actionable mutations',\n              dateRange: {\n                start: '2020-01-01',\n                end: '2024-01-01'\n              },\n              institutions: ['Genomics consortiums'],\n              validationMethod: 'external_validation',\n              performanceMetrics: [\n                { metric: 'accuracy', value: 0.75 }\n              ]\n            },\n            priority: 'medium',\n            urgency: 'routine',\n            timeFrame: '2-6 weeks',\n            validationStatus: 'pending',\n            implementation: {\n              status: 'not_implemented'\n            },\n            generatedDate: new Date().toISOString(),\n            tags: ['genomics', 'targeted_therapy', mutation.gene.toLowerCase()]\n          });\n        }\n      });\n    }\n\n    return recommendations;\n  }\n\n  private generateMonitoringRecommendations(patient: Patient): AIRecommendation {\n    return {\n      id: `ai_rec_${Date.now()}_monitoring`,\n      patientId: patient.id,\n      type: 'monitoring',\n      title: 'Personalized Monitoring Schedule',\n      description: 'AI-optimized monitoring plan based on risk stratification and treatment history',\n      rationale: 'Patient risk profile suggests personalized monitoring interval to optimize safety and efficacy',\n      confidenceScore: 70,\n      evidenceLevel: 'moderate',\n      evidenceSources: [\n        {\n          type: 'real_world_data',\n          title: 'Real-world monitoring patterns and outcomes',\n          evidenceGrade: 'C',\n          relevanceScore: 75,\n          summary: 'Real-world evidence supports risk-adapted monitoring',\n          keyFindings: [\n            'Reduced monitoring burden without compromising safety',\n            'Cost-effective approach'\n          ]\n        }\n      ],\n      indication: 'Treatment monitoring',\n      contraindications: [],\n      prerequisites: ['Baseline assessments complete'],\n      modelVersion: '2024.1',\n      modelType: 'machine_learning',\n      trainingData: {\n        datasetSize: 12000,\n        patientPopulation: 'Cancer patients on systemic therapy',\n        dateRange: {\n          start: '2019-01-01',\n          end: '2024-01-01'\n        },\n        institutions: ['Academic medical centers'],\n        validationMethod: 'temporal_validation',\n        performanceMetrics: [\n          { metric: 'accuracy', value: 0.72 }\n        ]\n      },\n      priority: 'medium',\n      urgency: 'routine',\n      timeFrame: 'Ongoing',\n      validationStatus: 'pending',\n      implementation: {\n        status: 'not_implemented'\n      },\n      generatedDate: new Date().toISOString(),\n      tags: ['monitoring', 'safety', 'personalized']\n    };\n  }\n\n  private generateClinicalTrialRecommendations(patient: Patient): AIRecommendation {\n    return {\n      id: `ai_rec_${Date.now()}_trial`,\n      patientId: patient.id,\n      type: 'clinical_trial',\n      title: 'Clinical Trial Matching',\n      description: 'AI-identified clinical trials matching patient profile and molecular characteristics',\n      rationale: 'Patient characteristics match eligibility criteria for available clinical trials testing novel therapies',\n      confidenceScore: 65,\n      evidenceLevel: 'moderate',\n      evidenceSources: [\n        {\n          type: 'clinical_trial',\n          title: 'Active clinical trials database matching',\n          evidenceGrade: 'B',\n          relevanceScore: 80,\n          summary: 'Multiple active trials available for patient population',\n          keyFindings: [\n            'Potential access to novel therapies',\n            'Contribution to research'\n          ]\n        }\n      ],\n      indication: patient.diagnosis,\n      contraindications: [],\n      prerequisites: ['Informed consent discussion', 'Eligibility screening'],\n      modelVersion: '2024.1',\n      modelType: 'rule_based',\n      trainingData: {\n        datasetSize: 3000,\n        patientPopulation: 'Clinical trial participants',\n        dateRange: {\n          start: '2020-01-01',\n          end: '2024-01-01'\n        },\n        institutions: ['Clinical trial networks'],\n        validationMethod: 'cross_validation',\n        performanceMetrics: [\n          { metric: 'accuracy', value: 0.68 }\n        ]\n      },\n      priority: 'low',\n      urgency: 'routine',\n      timeFrame: '4-8 weeks',\n      validationStatus: 'pending',\n      implementation: {\n        status: 'not_implemented'\n      },\n      generatedDate: new Date().toISOString(),\n      tags: ['clinical_trials', 'research', 'novel_therapy']\n    };\n  }\n\n  // Predictive Models\n  public getPredictiveModels(): PredictiveModel[] {\n    try {\n      const stored = localStorage.getItem(this.PREDICTIVE_MODELS_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error retrieving predictive models:', error);\n      return [];\n    }\n  }\n\n  public savePredictiveModel(model: PredictiveModel): void {\n    try {\n      const models = this.getPredictiveModels();\n      const existingIndex = models.findIndex(m => m.id === model.id);\n      \n      if (existingIndex !== -1) {\n        models[existingIndex] = model;\n      } else {\n        models.push(model);\n      }\n      \n      localStorage.setItem(this.PREDICTIVE_MODELS_KEY, JSON.stringify(models));\n    } catch (error) {\n      console.error('Error saving predictive model:', error);\n      throw new Error('Failed to save predictive model');\n    }\n  }\n\n  public runPrediction(modelId: string, patientData: any): Promise<any> {\n    return new Promise((resolve) => {\n      // Simulate model prediction\n      setTimeout(() => {\n        const prediction = {\n          modelId,\n          patientId: patientData.id,\n          prediction: Math.random() * 100,\n          confidence: 0.75 + Math.random() * 0.2,\n          timestamp: new Date().toISOString(),\n          features: Object.keys(patientData),\n          explanation: 'Model prediction based on clinical and molecular features'\n        };\n        resolve(prediction);\n      }, 1500);\n    });\n  }\n\n  // Real-World Evidence\n  public getRealWorldEvidence(): RealWorldEvidence[] {\n    try {\n      const stored = localStorage.getItem(this.RWE_STUDIES_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error retrieving RWE studies:', error);\n      return [];\n    }\n  }\n\n  public saveRealWorldEvidence(study: RealWorldEvidence): void {\n    try {\n      const studies = this.getRealWorldEvidence();\n      const existingIndex = studies.findIndex(s => s.id === study.id);\n      \n      if (existingIndex !== -1) {\n        studies[existingIndex] = study;\n      } else {\n        studies.push(study);\n      }\n      \n      localStorage.setItem(this.RWE_STUDIES_KEY, JSON.stringify(studies));\n    } catch (error) {\n      console.error('Error saving RWE study:', error);\n      throw new Error('Failed to save RWE study');\n    }\n  }\n\n  public searchRealWorldEvidence(query: string, filters?: any): RealWorldEvidence[] {\n    const studies = this.getRealWorldEvidence();\n    \n    return studies.filter(study => {\n      const matchesQuery = query === '' || \n        study.title.toLowerCase().includes(query.toLowerCase()) ||\n        study.objective.toLowerCase().includes(query.toLowerCase()) ||\n        study.intervention.name.toLowerCase().includes(query.toLowerCase());\n      \n      // Apply additional filters\n      if (filters?.studyType && study.studyType !== filters.studyType) {\n        return false;\n      }\n      \n      if (filters?.minPatients && study.totalPatients < filters.minPatients) {\n        return false;\n      }\n      \n      return matchesQuery;\n    });\n  }\n\n  // Clinical Decision Support Rules\n  public getCDSRules(): ClinicalDecisionSupportRule[] {\n    try {\n      const stored = localStorage.getItem(this.CDS_RULES_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error retrieving CDS rules:', error);\n      return [];\n    }\n  }\n\n  public evaluateRules(patientData: Patient): Promise<any[]> {\n    return new Promise((resolve) => {\n      const rules = this.getCDSRules();\n      const triggeredRules: any[] = [];\n\n      // Simulate rule evaluation\n      setTimeout(() => {\n        rules.forEach(rule => {\n          if (rule.implementationStatus === 'active') {\n            // Simple rule evaluation logic\n            const meetsConditions = rule.conditions.every(condition => {\n              // Simplified condition evaluation\n              return Math.random() > 0.7; // 30% chance to trigger\n            });\n\n            if (meetsConditions) {\n              triggeredRules.push({\n                ruleId: rule.id,\n                ruleName: rule.name,\n                category: rule.category,\n                priority: rule.priority,\n                actions: rule.actions,\n                timestamp: new Date().toISOString()\n              });\n            }\n          }\n        });\n\n        resolve(triggeredRules);\n      }, 1000);\n    });\n  }\n\n  // Analytics and Reporting\n  public getAIMetrics(): any {\n    const recommendations = this.getAIRecommendations();\n    const models = this.getPredictiveModels();\n    const studies = this.getRealWorldEvidence();\n\n    return {\n      totalRecommendations: recommendations.length,\n      acceptedRecommendations: recommendations.filter(r => r.validationStatus === 'approved').length,\n      pendingRecommendations: recommendations.filter(r => r.validationStatus === 'pending').length,\n      activeModels: models.filter(m => m.deploymentStatus === 'production').length,\n      totalModels: models.length,\n      rweStudies: studies.length,\n      averageConfidence: recommendations.reduce((sum, r) => sum + r.confidenceScore, 0) / recommendations.length || 0\n    };\n  }\n\n  // Sample data generation\n  public generateSampleData(): void {\n    const existingRecommendations = this.getAIRecommendations();\n    if (existingRecommendations.length > 0) return;\n\n    // Generate sample data would go here\n  }\n}\n\nexport const aiService = new AIService();","import React, { useState, useEffect } from 'react';\nimport { \n  Brain, \n  TrendingUp, \n  Target, \n  Database, \n  AlertCircle, \n  CheckCircle, \n  Clock, \n  BarChart3,\n  Lightbulb,\n  FileText,\n  Settings,\n  Play,\n  Pause,\n  Eye,\n  Download,\n  Filter,\n  Search,\n  Zap\n} from 'lucide-react';\nimport { \n  AIRecommendation, \n  PredictiveModel, \n  RealWorldEvidence \n} from '../../types/ai';\nimport { Patient } from '../../types/clinical';\nimport { aiService } from '../../services/aiService';\nimport { patientService } from '../../services/patientService';\n\ninterface TabInfo {\n  id: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  description: string;\n}\n\nconst AIDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [recommendations, setRecommendations] = useState<AIRecommendation[]>([]);\n  const [models, setModels] = useState<PredictiveModel[]>([]);\n  const [rweStudies, setRweStudies] = useState<RealWorldEvidence[]>([]);\n  const [patients, setPatients] = useState<Patient[]>([]);\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [generatingRecommendations, setGeneratingRecommendations] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    aiService.generateSampleData();\n    setRecommendations(aiService.getAIRecommendations());\n    setModels(aiService.getPredictiveModels());\n    setRweStudies(aiService.getRealWorldEvidence());\n    setPatients(patientService.getPatients());\n  };\n\n  const tabs: TabInfo[] = [\n    {\n      id: 'overview',\n      label: 'Overview',\n      icon: Brain,\n      description: 'AI platform overview and key metrics'\n    },\n    {\n      id: 'recommendations',\n      label: 'AI Recommendations',\n      icon: Lightbulb,\n      description: 'AI-generated clinical recommendations'\n    },\n    {\n      id: 'models',\n      label: 'Predictive Models',\n      icon: Target,\n      description: 'Machine learning models and predictions'\n    },\n    {\n      id: 'evidence',\n      label: 'Real-World Evidence',\n      icon: Database,\n      description: 'Real-world data studies and outcomes'\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      icon: BarChart3,\n      description: 'Performance metrics and insights'\n    }\n  ];\n\n  const handleGenerateRecommendations = async () => {\n    if (!selectedPatient) return;\n\n    setGeneratingRecommendations(true);\n    try {\n      const newRecommendations = await aiService.generateRecommendations(selectedPatient);\n      setRecommendations(prev => [...prev, ...newRecommendations]);\n    } catch (error) {\n      console.error('Error generating recommendations:', error);\n    } finally {\n      setGeneratingRecommendations(false);\n    }\n  };\n\n  const getMetrics = () => {\n    return aiService.getAIMetrics();\n  };\n\n  const renderOverviewTab = () => {\n    const metrics = getMetrics();\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-600\">AI Recommendations</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{metrics.totalRecommendations}</p>\n              </div>\n              <Lightbulb className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"flex items-center text-sm\">\n                <span className=\"text-green-600\">{metrics.acceptedRecommendations} accepted</span>\n                <span className=\"text-gray-500 ml-2\">• {metrics.pendingRecommendations} pending</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Models</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{metrics.activeModels}</p>\n              </div>\n              <Target className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"text-sm text-gray-500\">\n                {metrics.totalModels} total models\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-600\">RWE Studies</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{metrics.rweStudies}</p>\n              </div>\n              <Database className=\"w-8 h-8 text-purple-600\" />\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"text-sm text-gray-500\">\n                Real-world evidence base\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-600\">Avg Confidence</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {metrics.averageConfidence ? Math.round(metrics.averageConfidence) : 0}%\n                </p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-orange-600\" />\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"text-sm text-gray-500\">\n                Model confidence score\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Generate AI Recommendations</h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Patient\n              </label>\n              <select\n                value={selectedPatient?.id || ''}\n                onChange={(e) => {\n                  const patient = patients.find(p => p.id === e.target.value);\n                  setSelectedPatient(patient || null);\n                }}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"\">Choose a patient...</option>\n                {patients.map(patient => (\n                  <option key={patient.id} value={patient.id}>\n                    {patient.firstName} {patient.lastName} - {patient.diagnosis}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {selectedPatient && (\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-gray-900 mb-2\">\n                  {selectedPatient.firstName} {selectedPatient.lastName}\n                </h4>\n                <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600\">\n                  <div>\n                    <span className=\"font-medium\">Diagnosis:</span> {selectedPatient.diagnosis}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Stage:</span> {selectedPatient.stage || 'Not specified'}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Performance Status:</span> ECOG {selectedPatient.ecogPerformanceStatus}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Treatment History:</span> {selectedPatient.treatmentHistory.length} courses\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <button\n              onClick={handleGenerateRecommendations}\n              disabled={!selectedPatient || generatingRecommendations}\n              className=\"inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {generatingRecommendations ? (\n                <>\n                  <Clock className=\"w-5 h-5 mr-2 animate-spin\" />\n                  Generating Recommendations...\n                </>\n              ) : (\n                <>\n                  <Brain className=\"w-5 h-5 mr-2\" />\n                  Generate AI Recommendations\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent AI Activity</h3>\n          <div className=\"space-y-3\">\n            {recommendations.slice(0, 5).map(rec => (\n              <div key={rec.id} className=\"flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg\">\n                <div className={`w-2 h-2 rounded-full ${\n                  rec.priority === 'high' ? 'bg-red-500' :\n                  rec.priority === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\n                }`} />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900\">{rec.title}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {rec.type} • {rec.confidenceScore}% confidence • {new Date(rec.generatedDate).toLocaleDateString()}\n                  </p>\n                </div>\n                <span className={`px-2 py-1 text-xs rounded-full ${\n                  rec.validationStatus === 'approved' \n                    ? 'bg-green-100 text-green-800'\n                    : rec.validationStatus === 'pending'\n                    ? 'bg-yellow-100 text-yellow-800'\n                    : 'bg-gray-100 text-gray-800'\n                }`}>\n                  {rec.validationStatus}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderRecommendationsTab = () => (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search recommendations...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n          <button className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filters\n          </button>\n        </div>\n      </div>\n\n      {/* Recommendations List */}\n      <div className=\"space-y-4\">\n        {recommendations\n          .filter(rec => \n            searchQuery === '' || \n            rec.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            rec.type.toLowerCase().includes(searchQuery.toLowerCase())\n          )\n          .map(rec => (\n          <div key={rec.id} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">{rec.title}</h3>\n                  <span className={`px-2 py-1 text-xs rounded-full ${\n                    rec.type === 'treatment' ? 'bg-blue-100 text-blue-800' :\n                    rec.type === 'diagnostic' ? 'bg-green-100 text-green-800' :\n                    rec.type === 'monitoring' ? 'bg-yellow-100 text-yellow-800' :\n                    rec.type === 'genomic' ? 'bg-purple-100 text-purple-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {rec.type.replace('_', ' ')}\n                  </span>\n                </div>\n                <p className=\"text-gray-700 mb-3\">{rec.description}</p>\n                <p className=\"text-sm text-gray-600 mb-3\">{rec.rationale}</p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-gray-900\">{rec.confidenceScore}%</div>\n                  <div className=\"text-xs text-gray-500\">confidence</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              <div>\n                <div className=\"text-sm font-medium text-gray-500\">Priority</div>\n                <div className={`inline-flex items-center px-2 py-1 rounded-full text-sm ${\n                  rec.priority === 'high' ? 'bg-red-100 text-red-800' :\n                  rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                  'bg-green-100 text-green-800'\n                }`}>\n                  {rec.priority}\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"text-sm font-medium text-gray-500\">Evidence Level</div>\n                <div className=\"text-sm text-gray-900\">{rec.evidenceLevel}</div>\n              </div>\n              \n              <div>\n                <div className=\"text-sm font-medium text-gray-500\">Model Type</div>\n                <div className=\"text-sm text-gray-900\">{rec.modelType.replace('_', ' ')}</div>\n              </div>\n            </div>\n\n            {rec.evidenceSources.length > 0 && (\n              <div className=\"mb-4\">\n                <div className=\"text-sm font-medium text-gray-500 mb-2\">Evidence Sources</div>\n                <div className=\"space-y-2\">\n                  {rec.evidenceSources.slice(0, 2).map((source, index) => (\n                    <div key={index} className=\"bg-gray-50 p-3 rounded-lg\">\n                      <div className=\"font-medium text-sm text-gray-900\">{source.title}</div>\n                      <div className=\"text-xs text-gray-600 mt-1\">{source.summary}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n              <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                <span>Generated: {new Date(rec.generatedDate).toLocaleDateString()}</span>\n                <span>Model v{rec.modelVersion}</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <span className={`px-2 py-1 text-xs rounded-full ${\n                  rec.validationStatus === 'approved' \n                    ? 'bg-green-100 text-green-800'\n                    : rec.validationStatus === 'pending'\n                    ? 'bg-yellow-100 text-yellow-800'\n                    : rec.validationStatus === 'rejected'\n                    ? 'bg-red-100 text-red-800'\n                    : 'bg-gray-100 text-gray-800'\n                }`}>\n                  {rec.validationStatus}\n                </span>\n                \n                <button className=\"inline-flex items-center px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50\">\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  Review\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n        \n        {recommendations.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Lightbulb className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No AI Recommendations</h3>\n            <p className=\"text-gray-500\">Generate AI recommendations for patients to see intelligent insights</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderModelsTab = () => (\n    <div className=\"space-y-6\">\n      {/* Model Performance Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Production Models</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {models.filter(m => m.deploymentStatus === 'production').length}\n              </p>\n            </div>\n            <Target className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Average Accuracy</p>\n              <p className=\"text-2xl font-bold text-gray-900\">87%</p>\n            </div>\n            <TrendingUp className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Predictions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">1,247</p>\n            </div>\n            <Zap className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Models List */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Predictive Models</h3>\n        </div>\n        \n        <div className=\"divide-y divide-gray-200\">\n          {/* Sample model entries since we don't have real models yet */}\n          {[\n            {\n              name: 'Treatment Response Predictor',\n              type: 'predictive',\n              algorithm: 'ensemble',\n              accuracy: 0.89,\n              status: 'production'\n            },\n            {\n              name: 'Toxicity Risk Model',\n              type: 'risk_stratification',\n              algorithm: 'random_forest',\n              accuracy: 0.82,\n              status: 'production'\n            },\n            {\n              name: 'Survival Prediction Model',\n              type: 'prognostic',\n              algorithm: 'neural_network',\n              accuracy: 0.76,\n              status: 'testing'\n            }\n          ].map((model, index) => (\n            <div key={index} className=\"p-6 hover:bg-gray-50\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h4 className=\"text-lg font-medium text-gray-900\">{model.name}</h4>\n                  <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n                    <span>{model.type.replace('_', ' ')}</span>\n                    <span>{model.algorithm.replace('_', ' ')}</span>\n                    <span>Accuracy: {(model.accuracy * 100).toFixed(1)}%</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <span className={`px-2 py-1 text-xs rounded-full ${\n                    model.status === 'production' \n                      ? 'bg-green-100 text-green-800'\n                      : model.status === 'testing'\n                      ? 'bg-yellow-100 text-yellow-800'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    {model.status}\n                  </span>\n                  \n                  <button className=\"p-2 text-gray-400 hover:text-gray-600\">\n                    <Settings className=\"w-4 h-4\" />\n                  </button>\n                  \n                  <button className=\"p-2 text-gray-400 hover:text-gray-600\">\n                    <Play className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderEvidenceTab = () => (\n    <div className=\"space-y-6\">\n      {/* Evidence Summary */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Real-World Evidence Library</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{rweStudies.length}</div>\n            <div className=\"text-sm text-gray-600\">Total Studies</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">156K</div>\n            <div className=\"text-sm text-gray-600\">Total Patients</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">23</div>\n            <div className=\"text-sm text-gray-600\">Cancer Types</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">89%</div>\n            <div className=\"text-sm text-gray-600\">Quality Score</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Sample RWE Studies */}\n      <div className=\"space-y-4\">\n        {[\n          {\n            title: 'Real-world effectiveness of immunotherapy in NSCLC',\n            studyType: 'retrospective',\n            patients: 3247,\n            duration: '24 months',\n            keyFinding: 'Similar outcomes to clinical trials in real-world setting'\n          },\n          {\n            title: 'Toxicity patterns in elderly cancer patients',\n            studyType: 'prospective',\n            patients: 1856,\n            duration: '36 months',\n            keyFinding: 'Age-specific dosing reduces severe toxicities by 35%'\n          },\n          {\n            title: 'Biomarker-guided therapy outcomes',\n            studyType: 'longitudinal',\n            patients: 2134,\n            duration: '18 months',\n            keyFinding: 'Improved response rates with molecular matching'\n          }\n        ].map((study, index) => (\n          <div key={index} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <h4 className=\"text-lg font-medium text-gray-900 mb-2\">{study.title}</h4>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n                  <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded\">{study.studyType}</span>\n                  <span>{study.patients} patients</span>\n                  <span>{study.duration}</span>\n                </div>\n                <p className=\"text-gray-700\">{study.keyFinding}</p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <button className=\"inline-flex items-center px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50\">\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  View\n                </button>\n                <button className=\"inline-flex items-center px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50\">\n                  <Download className=\"w-4 h-4 mr-1\" />\n                  Export\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderAnalyticsTab = () => {\n    const metrics = getMetrics();\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Performance Dashboard */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">AI Platform Performance</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"text-sm font-medium text-gray-500 mb-2\">Recommendation Accuracy</div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-2\">92%</div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '92%' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"text-sm font-medium text-gray-500 mb-2\">Model Uptime</div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-2\">99.8%</div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '99.8%' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"text-sm font-medium text-gray-500 mb-2\">User Satisfaction</div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-2\">4.7/5</div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-purple-600 h-2 rounded-full\" style={{ width: '94%' }}></div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Usage Trends */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Usage Trends</h3>\n          <div className=\"h-64 flex items-center justify-center border border-gray-200 rounded-lg\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-gray-500\">Analytics charts would be displayed here</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Impact Metrics */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Clinical Impact</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Cost Savings</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Reduced readmissions</span>\n                  <span className=\"text-sm font-medium\">$1.2M</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Optimized treatments</span>\n                  <span className=\"text-sm font-medium\">$890K</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Early detection</span>\n                  <span className=\"text-sm font-medium\">$650K</span>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Quality Improvements</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Adherence to guidelines</span>\n                  <span className=\"text-sm font-medium\">+15%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Treatment response</span>\n                  <span className=\"text-sm font-medium\">+12%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Safety events</span>\n                  <span className=\"text-sm font-medium\">-28%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">AI & Real-World Evidence Platform</h1>\n        <p className=\"text-gray-600\">\n          Advanced artificial intelligence and machine learning for precision oncology\n        </p>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200 mb-6\">\n        <nav className=\"-mb-px flex space-x-8 overflow-x-auto\">\n          {tabs.map(({ id, label, icon: Icon, description }) => (\n            <button\n              key={id}\n              onClick={() => setActiveTab(id)}\n              className={`group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                activeTab === id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Icon className={`w-5 h-5 mr-2 ${\n                activeTab === id ? 'text-blue-500' : 'text-gray-400 group-hover:text-gray-500'\n              }`} />\n              <div className=\"text-left\">\n                <div>{label}</div>\n                <div className=\"text-xs text-gray-400\">{description}</div>\n              </div>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"min-h-96\">\n        {activeTab === 'overview' && renderOverviewTab()}\n        {activeTab === 'recommendations' && renderRecommendationsTab()}\n        {activeTab === 'models' && renderModelsTab()}\n        {activeTab === 'evidence' && renderEvidenceTab()}\n        {activeTab === 'analytics' && renderAnalyticsTab()}\n      </div>\n    </div>\n  );\n};\n\nexport default AIDashboard;","import React from 'react';\nimport AIDashboard from '../components/AI/AIDashboard';\nimport FeatureErrorBoundary from '../components/ErrorBoundary/FeatureErrorBoundary';\n\nconst AIInsights: React.FC = () => {\n  return (\n    <FeatureErrorBoundary \n      featureName=\"AI Insights Dashboard\"\n      fallbackMessage=\"The AI insights feature is temporarily unavailable. This may be due to AI service connectivity or processing issues.\"\n    >\n      <AIDashboard />\n    </FeatureErrorBoundary>\n  );\n};\n\nexport default AIInsights;"],"names":["AIService","patientId","stored","recommendations","error","recommendation","existingIndex","patient","resolve","rec","mutation","model","models","m","modelId","patientData","prediction","study","studies","s","query","filters","matchesQuery","rules","triggeredRules","rule","condition","sum","r","aiService","AIDashboard","activeTab","setActiveTab","useState","setRecommendations","setModels","rweStudies","setRweStudies","patients","setPatients","selectedPatient","setSelectedPatient","loading","setLoading","generatingRecommendations","setGeneratingRecommendations","searchQuery","setSearchQuery","useEffect","loadData","patientService","tabs","Brain","Lightbulb","Target","Database","BarChart3","handleGenerateRecommendations","newRecommendations","prev","getMetrics","renderOverviewTab","metrics","jsxs","jsx","TrendingUp","e","p","Fragment","Clock","renderRecommendationsTab","Search","Filter","source","index","Eye","renderModelsTab","Zap","Settings","Play","renderEvidenceTab","Download","renderAnalyticsTab","id","label","Icon","description","AIInsights","FeatureErrorBoundary"],"mappings":"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"}