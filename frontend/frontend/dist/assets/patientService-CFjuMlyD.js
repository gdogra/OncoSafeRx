class h{constructor(){this.STORAGE_KEY="oncosaferx_patients",this.TREATMENT_HISTORY_KEY="oncosaferx_treatment_history"}getPatients(){try{const t=localStorage.getItem(this.STORAGE_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error retrieving patients:",t),[]}}getPatient(t){return this.getPatients().find(n=>n.id===t)||null}savePatient(t){try{const e=this.getPatients(),n=e.findIndex(a=>a.id===t.id);n!==-1?e[n]=t:e.push(t),localStorage.setItem(this.STORAGE_KEY,JSON.stringify(e))}catch(e){throw console.error("Error saving patient:",e),new Error("Failed to save patient")}}deletePatient(t){try{const n=this.getPatients().filter(a=>a.id!==t);localStorage.setItem(this.STORAGE_KEY,JSON.stringify(n))}catch(e){throw console.error("Error deleting patient:",e),new Error("Failed to delete patient")}}searchPatients(t){const e=this.getPatients(),n=t.toLowerCase();return e.filter(a=>a.firstName.toLowerCase().includes(n)||a.lastName.toLowerCase().includes(n)||a.mrn?.toLowerCase().includes(n)||a.diagnosis.toLowerCase().includes(n))}addTreatmentCourse(t,e){const n=this.getPatient(t);if(!n)throw new Error("Patient not found");n.treatmentHistory=n.treatmentHistory||[],n.treatmentHistory.push(e),this.savePatient(n)}updateTreatmentCourse(t,e,n){const a=this.getPatient(t);if(!a)throw new Error("Patient not found");const i=a.treatmentHistory.findIndex(o=>o.id===e);if(i===-1)throw new Error("Treatment course not found");a.treatmentHistory[i]={...a.treatmentHistory[i],...n},this.savePatient(a)}addToxicity(t,e,n){const a=this.getPatient(t);if(!a)throw new Error("Patient not found");const i=a.treatmentHistory.find(o=>o.id===e);if(!i)throw new Error("Treatment course not found");i.toxicities=i.toxicities||[],i.toxicities.push(n),this.savePatient(a)}updateLabValues(t,e){const n=this.getPatient(t);if(!n)throw new Error("Patient not found");n.labValues=n.labValues||[],n.labValues.push(e),n.labValues=n.labValues.sort((a,i)=>new Date(i.date).getTime()-new Date(a.date).getTime()).slice(0,50),this.savePatient(n)}updateGenomicProfile(t,e){const n=this.getPatient(t);if(!n)throw new Error("Patient not found");n.genomicProfile=e,this.savePatient(n)}addBiomarker(t,e){const n=this.getPatient(t);if(!n)throw new Error("Patient not found");n.biomarkers=n.biomarkers||[],n.biomarkers.push(e),this.savePatient(n)}getTreatmentTimeline(t){const e=this.getPatient(t);if(!e)return[];const n=[];return e.treatmentHistory.forEach(a=>{if(n.push({date:a.startDate,type:"treatment",title:`Started ${a.regimenName}`,description:`Treatment course initiated (${a.cycles} cycles planned)`,severity:"medium"}),a.endDate&&n.push({date:a.endDate,type:"treatment",title:`Completed ${a.regimenName}`,description:`Treatment course completed (${a.cycles} cycles)`,severity:"low"}),a.response){const i=a.endDate||new Date().toISOString().split("T")[0];n.push({date:i,type:"response",title:`Response Assessment: ${a.response}`,description:"Treatment response evaluated",severity:a.response==="CR"||a.response==="PR"?"low":"medium"})}a.toxicities?.forEach(i=>{n.push({date:i.onset,type:"toxicity",title:`${i.name} (Grade ${i.grade})`,description:`Toxicity event - ${i.attribution} attribution`,severity:i.grade>=3?"high":"medium"})})}),e.labValues.forEach(a=>{a.anc<1&&n.push({date:a.date,type:"lab",title:"Neutropenia",description:`ANC: ${a.anc} x10³/μL`,severity:a.anc<.5?"high":"medium"}),a.platelets<100&&n.push({date:a.date,type:"lab",title:"Thrombocytopenia",description:`Platelets: ${a.platelets} x10³/μL`,severity:a.platelets<50?"high":"medium"})}),n.sort((a,i)=>new Date(i.date).getTime()-new Date(a.date).getTime())}getPatientStats(){const t=this.getPatients(),e=t.length,n=t.filter(s=>s.treatmentHistory.some(r=>!r.endDate)).length,a=t.filter(s=>s.treatmentHistory.some(r=>!r.endDate)).length,i=t.reduce((s,r)=>s+r.treatmentHistory.filter(m=>m.endDate).length,0),o=t.filter(s=>s.dateOfBirth).map(s=>this.calculateAge(s.dateOfBirth)),l=o.length>0?Math.round(o.reduce((s,r)=>s+r,0)/o.length):0,c={};t.forEach(s=>{s.diagnosis&&(c[s.diagnosis]=(c[s.diagnosis]||0)+1)});const d=Object.entries(c).map(([s,r])=>({diagnosis:s,count:r})).sort((s,r)=>r.count-s.count).slice(0,5);return{totalPatients:e,activePatients:n,patientsOnTreatment:a,completedTreatments:i,averageAge:l,commonDiagnoses:d}}calculateAge(t){const e=new Date,n=new Date(t);let a=e.getFullYear()-n.getFullYear();const i=e.getMonth()-n.getMonth();return(i<0||i===0&&e.getDate()<n.getDate())&&a--,a}async fetchPatients(){try{const e=await fetch("https://oncosaferx-backend.onrender.com/api/patients");if(!e.ok)throw new Error(`Failed to fetch patients: ${e.status}`);return((await e.json()).patients||[]).map(this.transformApiPatient)}catch(t){return console.error("Error fetching patients:",t),this.generateSamplePatients(),this.patients}}transformApiPatient(t){return{id:t.id,mrn:t.demographics?.mrn||`MRN${Math.random().toString().slice(2,8)}`,firstName:t.demographics?.firstName||"Unknown",lastName:t.demographics?.lastName||"Patient",dateOfBirth:t.demographics?.dateOfBirth||"1980-01-01",gender:t.demographics?.sex||t.demographics?.gender||"unknown",height:t.demographics?.heightCm||170,weight:t.demographics?.weightKg||70,diagnosis:t.conditions?.[0]?.name||"Unknown diagnosis",stage:t.conditions?.[0]?.stage||"Unknown",ecogPerformanceStatus:t.vitals?.[0]?.performanceStatus||1,renalFunction:{creatinine:t.labValues?.find(e=>e.labType==="creatinine")?.value||1},hepaticFunction:{alt:t.labValues?.find(e=>e.labType==="alt")?.value||25,ast:t.labValues?.find(e=>e.labType==="ast")?.value||25,bilirubin:t.labValues?.find(e=>e.labType==="bilirubin")?.value||1},allergies:(t.allergies||[]).map(e=>e.allergen),currentMedications:(t.medications||[]).filter(e=>e.isActive).map(e=>e.drugName||e.drug),genomicProfile:{variants:t.genetics||[],testDate:t.genetics?.[0]?.testDate||new Date().toISOString(),testingLab:"Unknown Lab"}}}generateSamplePatients(){const t=[{id:"patient_001",mrn:"MRN001234",firstName:"John",lastName:"Doe",dateOfBirth:"1965-03-15",gender:"male",height:175,weight:80,diagnosis:"Non-small cell lung cancer, stage IV",stage:"IV",ecogPerformanceStatus:1,renalFunction:{creatinine:1.1},hepaticFunction:{bilirubin:.8,alt:32,ast:28,albumin:4.2},labValues:[{date:"2024-09-15",hemoglobin:12.5,platelets:250,anc:3.2,wbc:6.8}],allergies:["penicillin"],contraindications:[],currentMedications:[{name:"Pembrolizumab",dose:"200mg",frequency:"Every 3 weeks",startDate:"2024-08-01"}],treatmentHistory:[{id:"tx_001",regimenName:"Pembrolizumab",startDate:"2024-08-01",cycles:4,response:"PR",toxicities:[],doseModifications:[]}],biomarkers:[{name:"PD-L1",value:"85%",date:"2024-07-15",method:"22C3 pharmDx"}]},{id:"patient_002",mrn:"MRN005678",firstName:"Jane",lastName:"Smith",dateOfBirth:"1958-11-22",gender:"female",height:162,weight:65,diagnosis:"Invasive ductal carcinoma, HER2+",stage:"IIIA",ecogPerformanceStatus:0,renalFunction:{creatinine:.9},hepaticFunction:{bilirubin:.6,alt:25,ast:22,albumin:4},labValues:[{date:"2024-09-15",hemoglobin:11.8,platelets:180,anc:2.8,wbc:5.4}],allergies:[],contraindications:[],currentMedications:[{name:"Trastuzumab",dose:"6mg/kg",frequency:"Every 3 weeks",startDate:"2024-07-15"}],treatmentHistory:[{id:"tx_002",regimenName:"AC-T + Trastuzumab",startDate:"2024-04-01",endDate:"2024-07-15",cycles:8,response:"CR",toxicities:[{name:"Neuropathy",grade:2,onset:"2024-06-15",attribution:"probable"}],doseModifications:[]}],biomarkers:[{name:"HER2",value:"3+",date:"2024-03-20",method:"IHC"}]}];this.getPatients().length===0&&t.forEach(n=>this.savePatient(n))}exportPatientData(t){const e=t?[this.getPatient(t)]:this.getPatients();return JSON.stringify({patients:e,exportDate:new Date().toISOString(),version:"1.0"},null,2)}importPatientData(t){try{const e=JSON.parse(t);e.patients&&Array.isArray(e.patients)&&e.patients.forEach(n=>this.savePatient(n))}catch{throw new Error("Invalid patient data format")}}}const u=new h;export{u as p};
//# sourceMappingURL=patientService-CFjuMlyD.js.map
