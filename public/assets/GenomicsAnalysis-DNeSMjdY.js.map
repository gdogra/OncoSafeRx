{"version":3,"file":"GenomicsAnalysis-DNeSMjdY.js","sources":["../../src/services/genomicAnalysisService.ts","../../src/components/Genomics/EnhancedGenomicsAnalysis.tsx","../../src/components/Genomics/GenomicsAnalysis.tsx"],"sourcesContent":["import { \n  NGSReport, \n  GenomicVariant, \n  GenomicAnalysisResult, \n  TreatmentOption, \n  ClinicalTrial, \n  TherapeuticImplication,\n  BiomarkerPanel,\n  HereditaryRisk,\n  PharmacogenomicResult\n} from '../types/genomics';\nimport { Patient } from '../types/clinical';\n\nexport class GenomicAnalysisService {\n  private static readonly ONCOKB_API_BASE = 'https://www.oncokb.org/api/v1';\n  private static readonly CIVIC_API_BASE = 'https://civicdb.org/api';\n  \n  // Process uploaded NGS report\n  public static async processNGSReport(file: File, patientId: string): Promise<NGSReport> {\n    try {\n      const fileContent = await this.readFileContent(file);\n      const parsedData = await this.parseNGSFile(fileContent, file.name);\n      \n      const report: NGSReport = {\n        id: `ngs_${Date.now()}`,\n        patientId,\n        reportDate: new Date().toISOString().split('T')[0],\n        testType: this.detectTestType(parsedData),\n        platform: parsedData.platform || 'Unknown',\n        laboratoryName: parsedData.laboratory || 'Unknown',\n        sampleInfo: {\n          type: parsedData.sampleType || 'tissue',\n          site: parsedData.sampleSite || 'Unknown',\n          collectionDate: parsedData.collectionDate || new Date().toISOString().split('T')[0],\n          tumorCellularity: parsedData.tumorCellularity\n        },\n        variants: await this.annotateVariants(parsedData.variants || []),\n        copyNumberVariants: parsedData.copyNumberVariants || [],\n        structuralVariants: parsedData.structuralVariants || [],\n        microsatelliteStatus: parsedData.microsatelliteStatus || 'unknown',\n        tumorMutationalBurden: parsedData.tumorMutationalBurden || 0,\n        homologousRecombinationDeficiency: parsedData.hrdScore,\n        qualityMetrics: {\n          averageCoverage: parsedData.averageCoverage || 0,\n          percentCovered: parsedData.percentCovered || 0,\n          contamination: parsedData.contamination || 0\n        },\n        clinicalInterpretation: await this.generateClinicalInterpretation(parsedData),\n        recommendedActions: await this.generateRecommendedActions(parsedData)\n      };\n      \n      return report;\n    } catch (error) {\n      console.error('Error processing NGS report:', error);\n      throw new Error('Failed to process NGS report');\n    }\n  }\n  \n  // Generate comprehensive AI-powered genomic analysis\n  public static async analyzeGenomicProfile(\n    patient: Patient, \n    ngsReport: NGSReport\n  ): Promise<GenomicAnalysisResult> {\n    try {\n      // AI-powered variant interpretation\n      const interpretedVariants = await this.aiInterpretVariants(ngsReport.variants, patient);\n      \n      // Identify actionable variants with personalized scoring\n      const actionableVariants = await this.identifyActionableVariants(interpretedVariants);\n      \n      // Find personalized treatment options with AI scoring\n      const treatmentOptions = await this.findPersonalizedTreatments(\n        actionableVariants, \n        patient\n      );\n      \n      // AI-powered clinical trial matching\n      const clinicalTrials = await this.aiMatchClinicalTrials(\n        patient, \n        actionableVariants\n      );\n      \n      // Enhanced hereditary risk assessment\n      const hereditaryRisks = await this.assessHereditaryRisks(ngsReport.variants);\n      \n      // Advanced pharmacogenomic analysis\n      const pharmacogenomics = await this.analyzeAdvancedPharmacogenomics(\n        ngsReport.variants, \n        patient\n      );\n      \n      // Resistance prediction\n      const resistancePredictions = await this.predictResistance(\n        actionableVariants,\n        treatmentOptions\n      );\n      \n      const analysis: GenomicAnalysisResult = {\n        patientId: patient.id,\n        analysisDate: new Date().toISOString().split('T')[0],\n        actionableVariants,\n        treatmentOptions,\n        clinicalTrials,\n        hereditaryRisks,\n        pharmacogenomics,\n        resistancePredictions,\n        executiveSummary: this.generateAIExecutiveSummary(\n          actionableVariants,\n          treatmentOptions,\n          clinicalTrials,\n          patient\n        ),\n        keyRecommendations: this.generatePersonalizedRecommendations(\n          treatmentOptions,\n          clinicalTrials,\n          hereditaryRisks,\n          patient\n        )\n      };\n      \n      return analysis;\n    } catch (error) {\n      console.error('Error analyzing genomic profile:', error);\n      throw new Error('Failed to analyze genomic profile');\n    }\n  }\n  \n  // Get available biomarker panels\n  public static getBiomarkerPanels(): BiomarkerPanel[] {\n    return [\n      {\n        id: 'foundation_one_cdx',\n        name: 'FoundationOne CDx',\n        cancerTypes: ['Solid tumors'],\n        biomarkers: [\n          {\n            name: 'BRCA1/2 mutations',\n            gene: 'BRCA1',\n            type: 'mutation',\n            methodology: 'NGS',\n            therapeuticRelevance: [\n              {\n                drug: 'Olaparib',\n                indication: 'Ovarian cancer',\n                evidenceLevel: 'FDA_approved',\n                response: 'responsive',\n                description: 'PARP inhibitor for BRCA-mutated cancers'\n              }\n            ]\n          },\n          {\n            name: 'EGFR mutations',\n            gene: 'EGFR',\n            type: 'mutation',\n            methodology: 'NGS',\n            therapeuticRelevance: [\n              {\n                drug: 'Erlotinib',\n                indication: 'NSCLC',\n                evidenceLevel: 'FDA_approved',\n                response: 'responsive',\n                description: 'EGFR TKI for sensitizing mutations'\n              }\n            ]\n          }\n        ],\n        methodology: 'Next-generation sequencing',\n        turnaroundTime: 14,\n        cost: 5800\n      },\n      {\n        id: 'guardant360',\n        name: 'Guardant360',\n        cancerTypes: ['Solid tumors'],\n        biomarkers: [\n          {\n            name: 'Circulating tumor DNA',\n            type: 'mutation',\n            methodology: 'NGS',\n            therapeuticRelevance: [\n              {\n                drug: 'Various targeted therapies',\n                indication: 'Multiple cancers',\n                evidenceLevel: 'FDA_approved',\n                response: 'responsive',\n                description: 'Liquid biopsy for actionable mutations'\n              }\n            ]\n          }\n        ],\n        methodology: 'Liquid biopsy NGS',\n        turnaroundTime: 7,\n        cost: 4200\n      }\n    ];\n  }\n  \n  // AI-powered variant interpretation with patient context\n  private static async aiInterpretVariants(\n    variants: GenomicVariant[], \n    patient: Patient\n  ): Promise<GenomicVariant[]> {\n    return variants.map(variant => ({\n      ...variant,\n      aiConfidence: this.calculateAIConfidence(variant),\n      patientSpecificScore: this.calculatePatientSpecificScore(variant, patient),\n      actionabilityScore: this.calculateActionabilityScore(variant),\n      aiInterpretation: this.generateAIInterpretation(variant, patient)\n    }));\n  }\n  \n  // Find personalized treatment options with AI scoring\n  private static async findPersonalizedTreatments(\n    variants: GenomicVariant[], \n    patient: Patient\n  ): Promise<TreatmentOption[]> {\n    const treatmentOptions: TreatmentOption[] = [];\n    \n    for (const variant of variants) {\n      for (const implication of variant.therapeuticImplications) {\n        if (implication.implication === 'responsive') {\n          const personalizedScore = this.calculatePersonalizedTreatmentScore(\n            implication.drug,\n            patient,\n            variant\n          );\n          \n          treatmentOptions.push({\n            drug: implication.drug,\n            drugClass: implication.drugClass,\n            mechanism: this.getDrugMechanism(implication.drug),\n            fdaApproval: this.getFDAApprovalStatus(implication.drug, patient.diagnosis),\n            evidenceLevel: this.mapEvidenceLevel(implication.evidenceLevel),\n            supportingVariants: [`${variant.gene} ${variant.variant}`],\n            contraindications: this.getPersonalizedContraindications(implication.drug, patient),\n            expectedResponse: this.getPersonalizedResponse(implication.evidenceLevel, patient),\n            references: implication.references,\n            personalizedScore,\n            aiRecommendation: this.generateAITreatmentRecommendation(\n              implication.drug,\n              patient,\n              variant\n            )\n          });\n        }\n      }\n    }\n    \n    // Sort by personalized score\n    const sortedOptions = this.deduplicateTreatmentOptions(treatmentOptions)\n      .sort((a, b) => (b.personalizedScore || 0) - (a.personalizedScore || 0));\n    \n    return sortedOptions;\n  }\n  \n  // AI-powered clinical trial matching\n  private static async aiMatchClinicalTrials(\n    patient: Patient, \n    variants: GenomicVariant[]\n  ): Promise<ClinicalTrial[]> {\n    // Simulate clinical trial matching\n    const mockTrials: ClinicalTrial[] = [\n      {\n        nctId: 'NCT04526899',\n        title: 'Study of Targeted Therapy in Advanced Solid Tumors',\n        phase: 'II',\n        status: 'recruiting',\n        eligibilityCriteria: {\n          cancerTypes: ['Non-small cell lung cancer', 'Colorectal cancer'],\n          biomarkers: ['KRAS G12C', 'EGFR exon 19 deletion'],\n          priorTreatments: ['Platinum-based chemotherapy'],\n          ecogStatus: [0, 1],\n          ageRange: { min: 18, max: 75 }\n        },\n        primaryEndpoint: 'Objective response rate',\n        secondaryEndpoints: ['Progression-free survival', 'Overall survival'],\n        estimatedEnrollment: 120,\n        locations: [\n          {\n            facility: 'Memorial Sloan Kettering Cancer Center',\n            city: 'New York',\n            state: 'NY',\n            country: 'USA',\n            status: 'recruiting',\n            contactInfo: 'clinicaltrials@mskcc.org'\n          }\n        ],\n        interventions: [\n          {\n            type: 'drug',\n            name: 'AMG 510',\n            description: 'KRAS G12C inhibitor',\n            armLabel: 'Treatment Arm A'\n          }\n        ],\n        matchScore: 85,\n        matchReasons: ['KRAS G12C mutation detected', 'Cancer type match']\n      }\n    ];\n    \n    // Filter trials based on patient criteria\n    return mockTrials.filter(trial => {\n      const age = this.calculateAge(patient.dateOfBirth);\n      const matchesAge = age >= trial.eligibilityCriteria.ageRange.min && \n                        age <= trial.eligibilityCriteria.ageRange.max;\n      const matchesCancer = trial.eligibilityCriteria.cancerTypes.some(type =>\n        patient.diagnosis.toLowerCase().includes(type.toLowerCase())\n      );\n      const matchesECOG = trial.eligibilityCriteria.ecogStatus.includes(\n        patient.ecogPerformanceStatus || 1\n      );\n      \n      return matchesAge && matchesCancer && matchesECOG;\n    });\n  }\n  \n  // Assess hereditary cancer risks\n  private static async assessHereditaryRisks(variants: GenomicVariant[]): Promise<HereditaryRisk[]> {\n    const hereditaryRisks: HereditaryRisk[] = [];\n    \n    const hereditaryGenes = ['BRCA1', 'BRCA2', 'TP53', 'MLH1', 'MSH2', 'MSH6', 'PMS2', 'APC'];\n    \n    for (const variant of variants) {\n      if (hereditaryGenes.includes(variant.gene) && \n          variant.clinicalSignificance === 'pathogenic') {\n        hereditaryRisks.push({\n          syndrome: this.getAssociatedSyndrome(variant.gene),\n          gene: variant.gene,\n          variant: variant.variant,\n          penetrance: this.getGenePenetrance(variant.gene),\n          recommendations: this.getHereditaryRecommendations(variant.gene),\n          familyScreening: true\n        });\n      }\n    }\n    \n    return hereditaryRisks;\n  }\n  \n  // Advanced pharmacogenomic analysis with patient context\n  private static async analyzeAdvancedPharmacogenomics(\n    variants: GenomicVariant[],\n    patient: Patient\n  ): Promise<PharmacogenomicResult[]> {\n    const pgxResults: PharmacogenomicResult[] = [];\n    \n    const pgxGenes = ['CYP2D6', 'CYP2C19', 'CYP3A4', 'DPYD', 'UGT1A1', 'TPMT', 'SLCO1B1'];\n    \n    for (const variant of variants) {\n      if (pgxGenes.includes(variant.gene)) {\n        const result = {\n          drug: this.getPGxDrug(variant.gene),\n          gene: variant.gene,\n          variant: variant.variant,\n          phenotype: this.getPGxPhenotype(variant.gene, variant.variant),\n          recommendation: this.getPersonalizedPGxRecommendation(\n            variant.gene, \n            variant.variant, \n            patient\n          ),\n          dosageAdjustment: this.getPersonalizedDosageAdjustment(\n            variant.gene, \n            patient\n          ),\n          warningLevel: this.getPGxWarningLevel(variant.gene, variant.variant),\n          interactionRisk: this.assessDrugInteractionRisk(variant.gene, patient),\n          clinicalGuidelines: this.getClinicalGuidelines(variant.gene),\n          aiInsight: this.generatePGxAIInsight(variant, patient)\n        };\n        \n        pgxResults.push(result);\n      }\n    }\n    \n    return pgxResults;\n  }\n  \n  // Helper methods\n  private static async readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = (e) => reject(e);\n      reader.readAsText(file);\n    });\n  }\n  \n  private static async parseNGSFile(content: string, filename: string): Promise<any> {\n    // Simplified parser - in reality would handle VCF, JSON, etc.\n    try {\n      if (filename.endsWith('.json')) {\n        return JSON.parse(content);\n      } else if (filename.endsWith('.vcf')) {\n        return this.parseVCF(content);\n      } else {\n        throw new Error('Unsupported file format');\n      }\n    } catch (error) {\n      throw new Error('Failed to parse NGS file');\n    }\n  }\n  \n  private static parseVCF(content: string): any {\n    // Simplified VCF parser\n    const lines = content.split('\\n');\n    const variants = [];\n    \n    for (const line of lines) {\n      if (line.startsWith('#')) continue;\n      const fields = line.split('\\t');\n      if (fields.length >= 8) {\n        variants.push({\n          chromosome: fields[0],\n          position: parseInt(fields[1]),\n          ref: fields[3],\n          alt: fields[4],\n          quality: parseFloat(fields[5]) || 0\n        });\n      }\n    }\n    \n    return { variants };\n  }\n  \n  private static detectTestType(data: any): 'tumor' | 'germline' | 'liquid_biopsy' | 'rna_seq' {\n    if (data.testType) return data.testType;\n    if (data.sampleType === 'blood') return 'liquid_biopsy';\n    if (data.methodology?.includes('RNA')) return 'rna_seq';\n    return 'tumor';\n  }\n  \n  private static async annotateVariants(variants: any[]): Promise<GenomicVariant[]> {\n    // Simplified annotation - would integrate with real annotation services\n    return variants.map((v, index) => ({\n      id: `var_${index}`,\n      gene: v.gene || 'Unknown',\n      variant: v.variant || `${v.ref}>${v.alt}`,\n      chromosome: v.chromosome || '',\n      position: v.position || 0,\n      ref: v.ref || '',\n      alt: v.alt || '',\n      variantType: v.variantType || 'SNV',\n      clinicalSignificance: v.clinicalSignificance || 'uncertain',\n      therapeuticImplications: v.therapeuticImplications || [],\n      coverage: v.coverage || 0,\n      alleleFrequency: v.alleleFrequency || 0,\n      quality: v.quality || 0,\n      consequence: v.consequence || '',\n      impact: v.impact || 'modifier',\n      annotations: v.annotations || []\n    }));\n  }\n  \n  private static async identifyActionableVariants(variants: GenomicVariant[]): Promise<GenomicVariant[]> {\n    return variants.filter(variant => \n      variant.therapeuticImplications.length > 0 &&\n      variant.clinicalSignificance !== 'benign'\n    );\n  }\n  \n  private static getDrugMechanism(drug: string): string {\n    const mechanisms: Record<string, string> = {\n      'Olaparib': 'PARP inhibitor',\n      'Erlotinib': 'EGFR tyrosine kinase inhibitor',\n      'Trastuzumab': 'HER2-targeted monoclonal antibody',\n      'Pembrolizumab': 'PD-1 checkpoint inhibitor'\n    };\n    return mechanisms[drug] || 'Unknown mechanism';\n  }\n  \n  private static getFDAApprovalStatus(drug: string, diagnosis: string): 'approved' | 'investigational' | 'off_label' {\n    // Simplified approval status\n    const approvedCombos = [\n      'Olaparib-Ovarian cancer',\n      'Erlotinib-NSCLC',\n      'Trastuzumab-Breast cancer'\n    ];\n    \n    const combo = `${drug}-${diagnosis}`;\n    return approvedCombos.some(approved => combo.includes(approved.split('-')[0])) \n      ? 'approved' : 'off_label';\n  }\n  \n  private static mapEvidenceLevel(level: string): 'high' | 'moderate' | 'low' {\n    if (level === 'A' || level === 'B') return 'high';\n    if (level === 'C') return 'moderate';\n    return 'low';\n  }\n  \n  private static getExpectedResponse(evidenceLevel: string): string {\n    if (evidenceLevel === 'A') return 'High likelihood of response (>70%)';\n    if (evidenceLevel === 'B') return 'Moderate likelihood of response (40-70%)';\n    return 'Lower likelihood of response (<40%)';\n  }\n  \n  private static deduplicateTreatmentOptions(options: TreatmentOption[]): TreatmentOption[] {\n    const seen = new Set();\n    return options.filter(option => {\n      const key = `${option.drug}-${option.drugClass}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n  \n  private static calculateAge(dateOfBirth: string): number {\n    const today = new Date();\n    const birth = new Date(dateOfBirth);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      age--;\n    }\n    \n    return age;\n  }\n  \n  private static getAssociatedSyndrome(gene: string): string {\n    const syndromes: Record<string, string> = {\n      'BRCA1': 'Hereditary Breast and Ovarian Cancer Syndrome',\n      'BRCA2': 'Hereditary Breast and Ovarian Cancer Syndrome',\n      'TP53': 'Li-Fraumeni Syndrome',\n      'MLH1': 'Lynch Syndrome',\n      'MSH2': 'Lynch Syndrome',\n      'MSH6': 'Lynch Syndrome',\n      'PMS2': 'Lynch Syndrome',\n      'APC': 'Familial Adenomatous Polyposis'\n    };\n    return syndromes[gene] || 'Unknown syndrome';\n  }\n  \n  private static getGenePenetrance(gene: string): number {\n    const penetrance: Record<string, number> = {\n      'BRCA1': 0.72,\n      'BRCA2': 0.69,\n      'TP53': 0.90,\n      'MLH1': 0.80,\n      'MSH2': 0.80,\n      'MSH6': 0.44,\n      'PMS2': 0.20\n    };\n    return penetrance[gene] || 0.5;\n  }\n  \n  private static getHereditaryRecommendations(gene: string): string[] {\n    const recommendations: Record<string, string[]> = {\n      'BRCA1': [\n        'Annual breast MRI starting at age 25',\n        'Consider risk-reducing mastectomy',\n        'Consider risk-reducing salpingo-oophorectomy'\n      ],\n      'BRCA2': [\n        'Annual breast MRI starting at age 25',\n        'Consider risk-reducing mastectomy',\n        'Consider risk-reducing salpingo-oophorectomy'\n      ],\n      'TP53': [\n        'Comprehensive cancer screening protocol',\n        'Avoid radiation exposure when possible',\n        'Annual whole-body MRI'\n      ]\n    };\n    return recommendations[gene] || ['Genetic counseling recommended'];\n  }\n  \n  private static getPGxDrug(gene: string): string {\n    const drugs: Record<string, string> = {\n      'CYP2D6': 'Tamoxifen, Codeine',\n      'CYP2C19': 'Clopidogrel, Omeprazole',\n      'DPYD': '5-Fluorouracil, Capecitabine',\n      'UGT1A1': 'Irinotecan',\n      'TPMT': '6-Mercaptopurine, Azathioprine'\n    };\n    return drugs[gene] || 'Unknown';\n  }\n  \n  private static getPGxPhenotype(gene: string, variant: string): string {\n    // Simplified phenotype mapping\n    if (variant.includes('*1/*1')) return 'Normal metabolizer';\n    if (variant.includes('*2') || variant.includes('*3')) return 'Poor metabolizer';\n    return 'Intermediate metabolizer';\n  }\n  \n  private static getPGxRecommendation(gene: string, variant: string): string {\n    const phenotype = this.getPGxPhenotype(gene, variant);\n    if (phenotype === 'Poor metabolizer') {\n      return 'Consider alternative therapy or dose reduction';\n    }\n    return 'Standard dosing recommended';\n  }\n  \n  private static getPGxDosageAdjustment(gene: string): string {\n    return 'Consult pharmacogenomics guidelines';\n  }\n  \n  private static getPGxWarningLevel(gene: string, variant: string): 'high' | 'moderate' | 'low' {\n    const phenotype = this.getPGxPhenotype(gene, variant);\n    if (phenotype === 'Poor metabolizer') return 'high';\n    if (phenotype === 'Intermediate metabolizer') return 'moderate';\n    return 'low';\n  }\n  \n  private static async generateClinicalInterpretation(data: any): Promise<string> {\n    return 'Clinical interpretation based on genomic findings and current evidence.';\n  }\n  \n  private static async generateRecommendedActions(data: any): Promise<any[]> {\n    return [];\n  }\n  \n  private static generateExecutiveSummary(\n    variants: GenomicVariant[],\n    treatments: TreatmentOption[],\n    trials: ClinicalTrial[]\n  ): string {\n    return `Analysis identified ${variants.length} actionable variants with ${treatments.length} treatment options and ${trials.length} matching clinical trials.`;\n  }\n  \n  // AI-powered helper methods\n  private static calculateAIConfidence(variant: GenomicVariant): number {\n    let confidence = 0.5;\n    \n    if (variant.clinicalSignificance === 'pathogenic') confidence += 0.3;\n    if (variant.therapeuticImplications.length > 0) confidence += 0.2;\n    if (variant.quality > 30) confidence += 0.1;\n    if (variant.coverage > 100) confidence += 0.1;\n    \n    return Math.min(confidence, 1.0);\n  }\n  \n  private static calculatePatientSpecificScore(variant: GenomicVariant, patient: Patient): number {\n    let score = 0.5;\n    \n    // Age considerations\n    const age = this.calculateAge(patient.dateOfBirth);\n    if (age > 65 && variant.gene === 'TP53') score += 0.2;\n    \n    // Cancer type relevance\n    if (patient.diagnosis.toLowerCase().includes('breast') && variant.gene === 'BRCA1') score += 0.3;\n    if (patient.diagnosis.toLowerCase().includes('lung') && variant.gene === 'EGFR') score += 0.3;\n    \n    // Performance status\n    if (patient.ecogPerformanceStatus <= 1) score += 0.1;\n    \n    return Math.min(score, 1.0);\n  }\n  \n  private static calculateActionabilityScore(variant: GenomicVariant): number {\n    let score = 0.3;\n    \n    if (variant.therapeuticImplications.length > 0) score += 0.4;\n    if (variant.clinicalSignificance === 'pathogenic') score += 0.3;\n    if (variant.alleleFrequency > 0.1) score += 0.2;\n    \n    return Math.min(score, 1.0);\n  }\n  \n  private static generateAIInterpretation(variant: GenomicVariant, patient: Patient): string {\n    const age = this.calculateAge(patient.dateOfBirth);\n    const cancerType = patient.diagnosis.toLowerCase();\n    \n    if (variant.gene === 'BRCA1' && cancerType.includes('breast')) {\n      return `High-impact BRCA1 variant detected. Strong indication for PARP inhibitor therapy. Consider hereditary cancer syndrome evaluation.`;\n    }\n    \n    if (variant.gene === 'EGFR' && cancerType.includes('lung')) {\n      return `Actionable EGFR variant identified. First-line EGFR TKI therapy recommended. Monitor for resistance mutations.`;\n    }\n    \n    return `${variant.gene} variant with ${variant.clinicalSignificance} significance. Clinical correlation recommended.`;\n  }\n  \n  private static calculatePersonalizedTreatmentScore(\n    drug: string,\n    patient: Patient,\n    variant: GenomicVariant\n  ): number {\n    let score = 0.5;\n    \n    // Evidence strength\n    if (variant.therapeuticImplications.some(ti => ti.evidenceLevel === 'A')) score += 0.3;\n    \n    // Patient age considerations\n    const age = this.calculateAge(patient.dateOfBirth);\n    if (age > 70 && drug === 'Chemotherapy') score -= 0.2;\n    if (age < 50 && drug === 'Immunotherapy') score += 0.1;\n    \n    // Performance status\n    if (patient.ecogPerformanceStatus <= 1) score += 0.2;\n    \n    // Comorbidities\n    if (patient.comorbidities?.includes('Heart disease') && drug.includes('Trastuzumab')) {\n      score -= 0.3;\n    }\n    \n    return Math.max(0, Math.min(score, 1.0));\n  }\n  \n  private static getPersonalizedContraindications(drug: string, patient: Patient): string[] {\n    const contraindications: string[] = [];\n    \n    if (patient.comorbidities?.includes('Heart disease') && drug === 'Trastuzumab') {\n      contraindications.push('Cardiac dysfunction - monitor LVEF');\n    }\n    \n    if (patient.comorbidities?.includes('Kidney disease') && drug === 'Cisplatin') {\n      contraindications.push('Renal impairment - dose adjustment required');\n    }\n    \n    const age = this.calculateAge(patient.dateOfBirth);\n    if (age > 75) {\n      contraindications.push('Advanced age - consider dose reduction');\n    }\n    \n    return contraindications;\n  }\n  \n  private static getPersonalizedResponse(evidenceLevel: string, patient: Patient): string {\n    const baseResponse = this.getExpectedResponse(evidenceLevel);\n    const age = this.calculateAge(patient.dateOfBirth);\n    \n    if (patient.ecogPerformanceStatus <= 1 && age < 65) {\n      return `${baseResponse} Enhanced response expected due to excellent performance status.`;\n    }\n    \n    if (age > 75 || patient.ecogPerformanceStatus > 2) {\n      return `${baseResponse} Response may be attenuated due to patient factors.`;\n    }\n    \n    return baseResponse;\n  }\n  \n  private static generateAITreatmentRecommendation(\n    drug: string,\n    patient: Patient,\n    variant: GenomicVariant\n  ): string {\n    const score = this.calculatePersonalizedTreatmentScore(drug, patient, variant);\n    \n    if (score > 0.8) {\n      return `Highly recommended: Strong evidence and excellent patient fit for ${drug}.`;\n    } else if (score > 0.6) {\n      return `Recommended: Good evidence supporting ${drug} therapy.`;\n    } else if (score > 0.4) {\n      return `Consider: Moderate evidence for ${drug}. Evaluate benefits vs risks.`;\n    } else {\n      return `Caution: Limited evidence or patient factors may affect ${drug} efficacy.`;\n    }\n  }\n  \n  // Resistance prediction\n  private static async predictResistance(\n    variants: GenomicVariant[],\n    treatments: TreatmentOption[]\n  ): Promise<any[]> {\n    const predictions = [];\n    \n    for (const treatment of treatments) {\n      const resistanceRisk = this.calculateResistanceRisk(treatment.drug, variants);\n      const resistanceMechanisms = this.identifyResistanceMechanisms(treatment.drug, variants);\n      \n      predictions.push({\n        drug: treatment.drug,\n        resistanceRisk,\n        mechanisms: resistanceMechanisms,\n        monitoringStrategy: this.getMonitoringStrategy(treatment.drug)\n      });\n    }\n    \n    return predictions;\n  }\n  \n  private static calculateResistanceRisk(drug: string, variants: GenomicVariant[]): 'low' | 'moderate' | 'high' {\n    // Simplified resistance prediction\n    const resistanceVariants = variants.filter(v => \n      v.therapeuticImplications.some(ti => ti.implication === 'resistant')\n    );\n    \n    if (resistanceVariants.length > 2) return 'high';\n    if (resistanceVariants.length > 0) return 'moderate';\n    return 'low';\n  }\n  \n  private static identifyResistanceMechanisms(drug: string, variants: GenomicVariant[]): string[] {\n    const mechanisms = [];\n    \n    if (drug === 'Erlotinib') {\n      const t790m = variants.find(v => v.gene === 'EGFR' && v.variant.includes('T790M'));\n      if (t790m) mechanisms.push('T790M gatekeeper mutation');\n    }\n    \n    return mechanisms;\n  }\n  \n  private static getMonitoringStrategy(drug: string): string {\n    const strategies: Record<string, string> = {\n      'Erlotinib': 'Monitor for T790M emergence via liquid biopsy every 3 months',\n      'Trastuzumab': 'Monitor LVEF every 3 months, assess for HER2 loss',\n      'Olaparib': 'Monitor for BRCA reversion mutations'\n    };\n    return strategies[drug] || 'Standard oncology monitoring';\n  }\n  \n  // Enhanced PGx methods\n  private static getPersonalizedPGxRecommendation(\n    gene: string,\n    variant: string,\n    patient: Patient\n  ): string {\n    const baseRecommendation = this.getPGxRecommendation(gene, variant);\n    const age = this.calculateAge(patient.dateOfBirth);\n    \n    if (age > 65 && gene === 'CYP2D6') {\n      return `${baseRecommendation} Additional caution in elderly patients.`;\n    }\n    \n    return baseRecommendation;\n  }\n  \n  private static getPersonalizedDosageAdjustment(gene: string, patient: Patient): string {\n    const age = this.calculateAge(patient.dateOfBirth);\n    \n    if (age > 75) {\n      return 'Consider 25% dose reduction due to advanced age';\n    }\n    \n    if (patient.comorbidities?.includes('Kidney disease')) {\n      return 'Dose adjustment required for renal impairment';\n    }\n    \n    return this.getPGxDosageAdjustment(gene);\n  }\n  \n  private static assessDrugInteractionRisk(gene: string, patient: Patient): 'low' | 'moderate' | 'high' {\n    // Simplified interaction risk assessment\n    const medications = patient.currentMedications || [];\n    \n    if (gene === 'CYP2D6' && medications.some(med => med.includes('Paroxetine'))) {\n      return 'high';\n    }\n    \n    return 'low';\n  }\n  \n  private static getClinicalGuidelines(gene: string): string[] {\n    const guidelines: Record<string, string[]> = {\n      'CYP2D6': ['CPIC Guideline for CYP2D6', 'FDA Table of Pharmacogenomic Biomarkers'],\n      'DPYD': ['CPIC Guideline for DPYD', 'EMA Recommendations for DPYD Testing']\n    };\n    return guidelines[gene] || ['Consult pharmacogenomics guidelines'];\n  }\n  \n  private static generatePGxAIInsight(variant: GenomicVariant, patient: Patient): string {\n    const age = this.calculateAge(patient.dateOfBirth);\n    \n    if (variant.gene === 'DPYD' && variant.clinicalSignificance === 'pathogenic') {\n      return 'Critical finding: High risk for 5-FU toxicity. Alternative chemotherapy strongly recommended.';\n    }\n    \n    return `${variant.gene} variant may affect drug metabolism. Clinical correlation recommended.`;\n  }\n  \n  // Enhanced summary generation\n  private static generateAIExecutiveSummary(\n    variants: GenomicVariant[],\n    treatments: TreatmentOption[],\n    trials: ClinicalTrial[],\n    patient: Patient\n  ): string {\n    const age = this.calculateAge(patient.dateOfBirth);\n    const highConfidenceVariants = variants.filter(v => (v as any).aiConfidence > 0.8);\n    const personalizedTreatments = treatments.filter(t => (t as any).personalizedScore > 0.7);\n    \n    return `AI analysis of ${patient.firstName} ${patient.lastName} (age ${age}) identified ${highConfidenceVariants.length} high-confidence actionable variants. ${personalizedTreatments.length} personalized treatment options and ${trials.length} matching clinical trials available. Personalized recommendations prioritize patient-specific factors including age, performance status, and comorbidities.`;\n  }\n  \n  private static generatePersonalizedRecommendations(\n    treatments: TreatmentOption[],\n    trials: ClinicalTrial[],\n    hereditary: HereditaryRisk[],\n    patient: Patient\n  ): string[] {\n    const recommendations = [];\n    const age = this.calculateAge(patient.dateOfBirth);\n    \n    // Prioritize treatments by personalized score\n    const topTreatment = treatments\n      .sort((a, b) => ((b as any).personalizedScore || 0) - ((a as any).personalizedScore || 0))[0];\n    \n    if (topTreatment) {\n      recommendations.push(\n        `Primary recommendation: ${topTreatment.drug} (${((topTreatment as any).personalizedScore * 100).toFixed(0)}% patient match)`\n      );\n    }\n    \n    if (trials.length > 0) {\n      recommendations.push(`Evaluate clinical trial eligibility: ${trials[0].title}`);\n    }\n    \n    if (hereditary.length > 0) {\n      recommendations.push(`Genetic counseling recommended for ${hereditary[0].syndrome}`);\n    }\n    \n    // Age-specific recommendations\n    if (age > 70) {\n      recommendations.push('Consider geriatric oncology consultation for treatment optimization');\n    }\n    \n    if (patient.ecogPerformanceStatus > 2) {\n      recommendations.push('Focus on supportive care and quality of life measures');\n    }\n    \n    return recommendations;\n  }\n}\n\nexport const genomicAnalysisService = new GenomicAnalysisService();","import React, { useState, useEffect } from 'react';\nimport { \n  Upload, \n  Download, \n  FileText, \n  Dna, \n  Target, \n  AlertTriangle,\n  TrendingUp,\n  Users,\n  Calendar,\n  ExternalLink,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Activity\n} from 'lucide-react';\nimport { \n  NGSReport, \n  GenomicAnalysisResult, \n  GenomicVariant, \n  TreatmentOption, \n  ClinicalTrial,\n  BiomarkerPanel \n} from '../../types/genomics';\nimport { Patient } from '../../types/clinical';\nimport { GenomicAnalysisService } from '../../services/genomicAnalysisService';\nimport { patientService } from '../../services/patientService';\n\ninterface TabInfo {\n  id: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  description: string;\n}\n\nconst EnhancedGenomicsAnalysis: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('upload');\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [patients, setPatients] = useState<Patient[]>([]);\n  const [ngsReports, setNgsReports] = useState<NGSReport[]>([]);\n  const [selectedReport, setSelectedReport] = useState<NGSReport | null>(null);\n  const [analysisResults, setAnalysisResults] = useState<GenomicAnalysisResult | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [biomarkerPanels] = useState<BiomarkerPanel[]>(\n    GenomicAnalysisService.getBiomarkerPanels()\n  );\n\n  // Panel/Versions drawer state\n  const [showMetaDrawer, setShowMetaDrawer] = useState(false);\n  const [panelInfo, setPanelInfo] = useState<any | null>(null);\n  const [versionsInfo, setVersionsInfo] = useState<any | null>(null);\n  const [loadingMeta, setLoadingMeta] = useState(false);\n\n  const openMetaDrawer = async () => {\n    setShowMetaDrawer(true);\n    if (panelInfo && versionsInfo) return;\n    setLoadingMeta(true);\n    try {\n      const [p, v] = await Promise.all([\n        fetch('/api/genomics/panel').then(r => r.json()),\n        fetch('/api/genomics/versions').then(r => r.json())\n      ]);\n      setPanelInfo(p);\n      setVersionsInfo(v);\n    } catch (e) {\n      console.error('Failed to load panel/versions', e);\n    } finally {\n      setLoadingMeta(false);\n    }\n  };\n\n  const gotoPgxReport = async (rxcui: string) => {\n    setReportRxcui(rxcui);\n    setActiveTab('pgx-report');\n    // allow state to update before fetching\n    setTimeout(() => fetchPgxReport(), 0);\n  };\n\n  const downloadPanelCsv = async () => {\n    try {\n      const res = await fetch('/api/genomics/panel.csv');\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'pgx_panel.csv';\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (e) {\n      console.error('Failed to download panel CSV', e);\n    }\n  };\n\n  const downloadVersionsCsv = async () => {\n    try {\n      const res = await fetch('/api/genomics/versions.csv');\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'pgx_versions.csv';\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (e) {\n      console.error('Failed to download versions CSV', e);\n    }\n  };\n\n  const downloadBundleJson = async () => {\n    try {\n      const res = await fetch('/api/genomics/panel.bundle');\n      const data = await res.json();\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'pgx_panel_bundle.json';\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (e) {\n      console.error('Failed to download bundle JSON', e);\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      if (navigator?.clipboard?.writeText) {\n        await navigator.clipboard.writeText(text);\n      } else {\n        const ta = document.createElement('textarea');\n        ta.value = text;\n        document.body.appendChild(ta);\n        ta.select();\n        document.execCommand('copy');\n        ta.remove();\n      }\n    } catch (e) {\n      console.error('Failed to copy text', e);\n    }\n  };\n\n  const copyCurlPanelCsv = () => {\n    const origin = window.location.origin;\n    copyToClipboard(`curl -sSL ${origin}/api/genomics/panel.csv -o pgx_panel.csv`);\n  };\n\n  const copyCurlVersionsCsv = () => {\n    const origin = window.location.origin;\n    copyToClipboard(`curl -sSL ${origin}/api/genomics/versions.csv -o pgx_versions.csv`);\n  };\n\n  const copyCurlBundleJson = () => {\n    const origin = window.location.origin;\n    copyToClipboard(`curl -sSL ${origin}/api/genomics/panel.bundle -o pgx_panel_bundle.json`);\n  };\n\n  useEffect(() => {\n    setPatients(patientService.getPatients());\n  }, []);\n\n  const tabs: TabInfo[] = [\n    {\n      id: 'upload',\n      label: 'NGS Upload',\n      icon: Upload,\n      description: 'Upload and process NGS reports'\n    },\n    {\n      id: 'analysis',\n      label: 'Genomic Analysis',\n      icon: Dna,\n      description: 'Comprehensive genomic interpretation'\n    },\n    {\n      id: 'treatments',\n      label: 'Targeted Therapy',\n      icon: Target,\n      description: 'Treatment recommendations'\n    },\n    {\n      id: 'trials',\n      label: 'Clinical Trials',\n      icon: Users,\n      description: 'Matching clinical trials'\n    },\n    {\n      id: 'biomarkers',\n      label: 'Biomarker Panels',\n      icon: Activity,\n      description: 'Available testing panels'\n    },\n    {\n      id: 'hereditary',\n      label: 'Hereditary Risk',\n      icon: AlertTriangle,\n      description: 'Germline risk assessment'\n    },\n    {\n      id: 'pgx-report',\n      label: 'PGx Report',\n      icon: FileText,\n      description: 'Dynamic gene–drug report'\n    },\n    {\n      id: 'pgx-roi',\n      label: 'PGx ROI',\n      icon: TrendingUp,\n      description: 'Program ROI calculator'\n    }\n  ];\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !selectedPatient) return;\n\n    setUploading(true);\n    try {\n      const report = await GenomicAnalysisService.processNGSReport(file, selectedPatient.id);\n      setNgsReports(prev => [...prev, report]);\n      setSelectedReport(report);\n      setActiveTab('analysis');\n    } catch (error) {\n      console.error('Upload failed:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!selectedPatient || !selectedReport) return;\n\n    setAnalyzing(true);\n    try {\n      const results = await GenomicAnalysisService.analyzeGenomicProfile(\n        selectedPatient,\n        selectedReport\n      );\n      setAnalysisResults(results);\n    } catch (error) {\n      console.error('Analysis failed:', error);\n    } finally {\n      setAnalyzing(false);\n    }\n  };\n\n  // PGx Dynamic Report state\n  const [reportRxcui, setReportRxcui] = useState<string>('11289');\n  const [pgxReport, setPgxReport] = useState<any | null>(null);\n  const [loadingReport, setLoadingReport] = useState(false);\n\n  const fetchPgxReport = async () => {\n    if (!reportRxcui) return;\n    setLoadingReport(true);\n    try {\n      const res = await fetch(`/api/genomics/report/${encodeURIComponent(reportRxcui)}`);\n      const data = await res.json();\n      setPgxReport(data);\n    } catch (e) {\n      console.error('Failed to load PGx report', e);\n    } finally {\n      setLoadingReport(false);\n    }\n  };\n\n  const copyCurlPgxReport = () => {\n    if (!reportRxcui) return;\n    const origin = window.location.origin;\n    const cmd = `curl -sSL ${origin}/api/genomics/report/${encodeURIComponent(reportRxcui)}`;\n    copyToClipboard(cmd);\n  };\n\n  // PGx ROI state\n  const [roiInputs, setRoiInputs] = useState({\n    annualADECost: 10000000,\n    testCost: 300,\n    targetPopulation: 5000,\n    expectedTestingRate: 0.4,\n    expectedADEreductionPct: 0.25,\n  });\n  const [roiResult, setRoiResult] = useState<any | null>(null);\n  const [loadingRoi, setLoadingRoi] = useState(false);\n\n  const calculateRoi = async () => {\n    setLoadingRoi(true);\n    try {\n      const res = await fetch('/api/roi/pgx', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(roiInputs)\n      });\n      const data = await res.json();\n      setRoiResult(data);\n    } catch (e) {\n      console.error('Failed to calculate ROI', e);\n    } finally {\n      setLoadingRoi(false);\n    }\n  };\n\n  const renderUploadTab = () => (\n    <div className=\"space-y-6\">\n      {/* Patient Selection */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Select Patient</h3>\n        <select\n          value={selectedPatient?.id || ''}\n          onChange={(e) => {\n            const patient = patients.find(p => p.id === e.target.value);\n            setSelectedPatient(patient || null);\n          }}\n          className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        >\n          <option value=\"\">Choose a patient...</option>\n          {patients.map(patient => (\n            <option key={patient.id} value={patient.id}>\n              {patient.firstName} {patient.lastName} - {patient.mrn}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* File Upload */}\n      {selectedPatient && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Upload NGS Report</h3>\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n            <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-lg font-medium text-gray-900 mb-2\">\n              Drop your NGS report here, or click to browse\n            </p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Supports VCF, JSON, and proprietary formats\n            </p>\n            <input\n              type=\"file\"\n              onChange={handleFileUpload}\n              accept=\".vcf,.json,.txt,.csv\"\n              className=\"hidden\"\n              id=\"ngs-upload\"\n              disabled={uploading}\n            />\n            <label\n              htmlFor=\"ngs-upload\"\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer disabled:opacity-50\"\n            >\n              {uploading ? (\n                <>\n                  <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Choose File\n                </>\n              )}\n            </label>\n          </div>\n        </div>\n      )}\n\n      {/* Recent Reports */}\n      {ngsReports.length > 0 && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Reports</h3>\n          <div className=\"space-y-3\">\n            {ngsReports.map(report => (\n              <div\n                key={report.id}\n                className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n                onClick={() => {\n                  setSelectedReport(report);\n                  setActiveTab('analysis');\n                }}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">\n                      {report.testType} - {report.platform}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      {report.reportDate} • {report.laboratoryName}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\">\n                    {report.variants.length} variants\n                  </span>\n                  <ExternalLink className=\"w-4 h-4 text-gray-400\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderAnalysisTab = () => {\n    if (!selectedReport) {\n      return (\n        <div className=\"text-center py-12\">\n          <Dna className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Report Selected</h3>\n          <p className=\"text-gray-500\">Upload an NGS report to begin analysis</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Report Summary */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Report Summary</h3>\n            <button\n              onClick={handleAnalyze}\n              disabled={analyzing}\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {analyzing ? (\n                <>\n                  <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Analyzing...\n                </>\n              ) : (\n                <>\n                  <Dna className=\"w-4 h-4 mr-2\" />\n                  Run Analysis\n                </>\n              )}\n            </button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex items-center\">\n                <Dna className=\"w-5 h-5 text-blue-600 mr-2\" />\n                <span className=\"text-sm font-medium text-blue-900\">Variants</span>\n              </div>\n              <p className=\"text-2xl font-bold text-blue-900 mt-2\">\n                {selectedReport.variants.length}\n              </p>\n            </div>\n\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"w-5 h-5 text-green-600 mr-2\" />\n                <span className=\"text-sm font-medium text-green-900\">TMB</span>\n              </div>\n              <p className=\"text-2xl font-bold text-green-900 mt-2\">\n                {selectedReport.tumorMutationalBurden}\n              </p>\n            </div>\n\n            <div className=\"bg-purple-50 p-4 rounded-lg\">\n              <div className=\"flex items-center\">\n                <Activity className=\"w-5 h-5 text-purple-600 mr-2\" />\n                <span className=\"text-sm font-medium text-purple-900\">MSI Status</span>\n              </div>\n              <p className=\"text-lg font-bold text-purple-900 mt-2\">\n                {selectedReport.microsatelliteStatus}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Variants Table */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Detected Variants</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Gene\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Variant\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Significance\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    VAF\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {selectedReport.variants.map((variant) => (\n                  <tr key={variant.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {variant.gene}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {variant.variant}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {variant.variantType}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        variant.clinicalSignificance === 'pathogenic' \n                          ? 'bg-red-100 text-red-800'\n                          : variant.clinicalSignificance === 'likely_pathogenic'\n                          ? 'bg-orange-100 text-orange-800'\n                          : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {variant.clinicalSignificance}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {(variant.alleleFrequency * 100).toFixed(1)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Analysis Results */}\n        {analysisResults && (\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Analysis Results</h3>\n            \n            <div className=\"mb-6\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Executive Summary</h4>\n              <p className=\"text-gray-700\">{analysisResults.executiveSummary}</p>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Key Recommendations</h4>\n              <ul className=\"space-y-2\">\n                {analysisResults.keyRecommendations.map((rec, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{rec}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderTreatmentsTab = () => {\n    if (!analysisResults?.treatmentOptions.length) {\n      return (\n        <div className=\"text-center py-12\">\n          <Target className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Treatment Options</h3>\n          <p className=\"text-gray-500\">Complete genomic analysis to see treatment recommendations</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {analysisResults.treatmentOptions.map((treatment, index) => (\n          <div key={index} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{treatment.drug}</h3>\n                <p className=\"text-sm text-gray-600\">{treatment.drugClass}</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                  treatment.fdaApproval === 'approved'\n                    ? 'bg-green-100 text-green-800'\n                    : treatment.fdaApproval === 'investigational'\n                    ? 'bg-yellow-100 text-yellow-800'\n                    : 'bg-blue-100 text-blue-800'\n                }`}>\n                  {treatment.fdaApproval.replace('_', ' ')}\n                </span>\n                <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                  treatment.evidenceLevel === 'high'\n                    ? 'bg-green-100 text-green-800'\n                    : treatment.evidenceLevel === 'moderate'\n                    ? 'bg-yellow-100 text-yellow-800'\n                    : 'bg-red-100 text-red-800'\n                }`}>\n                  {treatment.evidenceLevel} evidence\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Mechanism of Action</h4>\n                <p className=\"text-gray-700\">{treatment.mechanism}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Supporting Variants</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {treatment.supportingVariants.map((variant, i) => (\n                    <span key={i} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded\">\n                      {variant}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Expected Response</h4>\n                <p className=\"text-gray-700\">{treatment.expectedResponse}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderTrialsTab = () => {\n    if (!analysisResults?.clinicalTrials.length) {\n      return (\n        <div className=\"text-center py-12\">\n          <Users className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Matching Trials</h3>\n          <p className=\"text-gray-500\">Complete genomic analysis to find matching clinical trials</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {analysisResults.clinicalTrials.map((trial, index) => (\n          <div key={index} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{trial.title}</h3>\n                <p className=\"text-sm text-gray-600\">NCT ID: {trial.nctId}</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\">\n                  Phase {trial.phase}\n                </span>\n                <span className={`px-3 py-1 text-sm rounded-full ${\n                  trial.status === 'recruiting'\n                    ? 'bg-green-100 text-green-800'\n                    : 'bg-yellow-100 text-yellow-800'\n                }`}>\n                  {trial.status}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Primary Endpoint</h4>\n                <p className=\"text-gray-700\">{trial.primaryEndpoint}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Match Score</h4>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full\" \n                      style={{ width: `${trial.matchScore}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {trial.matchScore}%\n                  </span>\n                </div>\n              </div>\n\n              {trial.matchReasons && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Match Reasons</h4>\n                  <ul className=\"space-y-1\">\n                    {trial.matchReasons.map((reason, i) => (\n                      <li key={i} className=\"flex items-center text-sm text-gray-700\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500 mr-2\" />\n                        {reason}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Locations</h4>\n                <div className=\"space-y-2\">\n                  {trial.locations.slice(0, 3).map((location, i) => (\n                    <div key={i} className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-700\">\n                        {location.facility}, {location.city}, {location.state}\n                      </span>\n                      <span className={`px-2 py-1 rounded text-xs ${\n                        location.status === 'recruiting'\n                          ? 'bg-green-100 text-green-800'\n                          : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {location.status}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderBiomarkersTab = () => (\n    <div className=\"space-y-6\">\n      {biomarkerPanels.map((panel, index) => (\n        <div key={index} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">{panel.name}</h3>\n              <p className=\"text-sm text-gray-600\">{panel.methodology}</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-600\">Turnaround</p>\n              <p className=\"font-semibold text-gray-900\">{panel.turnaroundTime} days</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Cancer Types</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {panel.cancerTypes.map((type, i) => (\n                  <span key={i} className=\"px-2 py-1 bg-purple-100 text-purple-800 text-sm rounded\">\n                    {type}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Key Biomarkers</h4>\n              <div className=\"space-y-2\">\n                {panel.biomarkers.slice(0, 5).map((biomarker, i) => (\n                  <div key={i} className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-700\">{biomarker.name}</span>\n                    <span className=\"text-gray-500\">{biomarker.methodology}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {panel.cost && (\n              <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                <span className=\"font-medium text-gray-900\">Estimated Cost</span>\n                <span className=\"text-lg font-semibold text-gray-900\">${panel.cost}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderHereditaryTab = () => {\n    if (!analysisResults?.hereditaryRisks.length) {\n      return (\n        <div className=\"text-center py-12\">\n          <AlertTriangle className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Hereditary Risks</h3>\n          <p className=\"text-gray-500\">Complete genomic analysis to assess hereditary cancer risks</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {analysisResults.hereditaryRisks.map((risk, index) => (\n          <div key={index} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{risk.syndrome}</h3>\n                <p className=\"text-sm text-gray-600\">{risk.gene} - {risk.variant}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-600\">Penetrance</p>\n                <p className=\"text-lg font-semibold text-gray-900\">\n                  {(risk.penetrance * 100).toFixed(0)}%\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Recommendations</h4>\n                <ul className=\"space-y-2\">\n                  {risk.recommendations.map((rec, i) => (\n                    <li key={i} className=\"flex items-start\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">{rec}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {risk.familyScreening && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <div className=\"flex items-start\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 mr-2 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-yellow-800\">Family Screening Recommended</h4>\n                      <p className=\"text-sm text-yellow-700 mt-1\">\n                        Consider genetic counseling and testing for family members\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderPgxReportTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-end gap-3\">\n        <div>\n          <label className=\"block text-sm text-gray-600 mb-1\">Drug RXCUI</label>\n          <input\n            value={reportRxcui}\n            onChange={(e) => setReportRxcui(e.target.value)}\n            placeholder=\"e.g., 11289 (warfarin)\"\n            className=\"border border-gray-300 rounded px-3 py-2 w-64\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={fetchPgxReport}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            disabled={loadingReport}\n          >\n            {loadingReport ? 'Loading…' : 'Load Report'}\n          </button>\n          <button\n            onClick={copyCurlPgxReport}\n            className=\"px-3 py-2 text-sm bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n            title=\"Copy cURL\"\n          >\n            Copy cURL\n          </button>\n        </div>\n      </div>\n\n      {pgxReport && (\n        <div className=\"bg-white border border-gray-200 rounded p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">PGx Report</h3>\n              <p className=\"text-sm text-gray-600\">Version {pgxReport.version} • {pgxReport.count} recommendations</p>\n            </div>\n            <div className=\"text-right text-sm text-gray-500\">\n              Last updated: {pgxReport.lastUpdated}\n            </div>\n          </div>\n          <div className=\"divide-y divide-gray-200\">\n            {(pgxReport.recommendations || []).map((rec: any, idx: number) => (\n              <div key={idx} className=\"py-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"font-medium text-gray-900\">{rec.gene}</div>\n                  <span className=\"text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded\">Level {rec.evidenceLevel}</span>\n                </div>\n                <div className=\"text-sm text-gray-700\">Phenotype: {rec.phenotype}</div>\n                <div className=\"text-sm text-gray-700\">Recommendation: {rec.recommendation}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderPgxRoiTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {(\n          [\n            { key: 'annualADECost', label: 'Annual ADE Cost ($)' },\n            { key: 'testCost', label: 'Test Cost ($)' },\n            { key: 'targetPopulation', label: 'Target Population' },\n            { key: 'expectedTestingRate', label: 'Testing Rate (0-1)' },\n            { key: 'expectedADEreductionPct', label: 'ADE Reduction Among Tested (0-1)' }\n          ] as const\n        ).map((f) => (\n          <div key={f.key}>\n            <label className=\"block text-sm text-gray-600 mb-1\">{f.label}</label>\n            <input\n              type=\"number\"\n              step=\"any\"\n              value={(roiInputs as any)[f.key]}\n              onChange={(e) => setRoiInputs((s) => ({ ...s, [f.key]: Number(e.target.value) }))}\n              className=\"border border-gray-300 rounded px-3 py-2 w-full\"\n            />\n          </div>\n        ))}\n      </div>\n      <button\n        onClick={calculateRoi}\n        className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n        disabled={loadingRoi}\n      >\n        {loadingRoi ? 'Calculating…' : 'Calculate ROI'}\n      </button>\n\n      {roiResult && (\n        <div className=\"bg-white border border-gray-200 rounded p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">ROI Results</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <div className=\"text-gray-500\">Tests</div>\n              <div className=\"text-gray-900 font-medium\">{roiResult.outputs.tests}</div>\n            </div>\n            <div>\n              <div className=\"text-gray-500\">Program Cost</div>\n              <div className=\"text-gray-900 font-medium\">${roiResult.outputs.programCost.toLocaleString()}</div>\n            </div>\n            <div>\n              <div className=\"text-gray-500\">Savings</div>\n              <div className=\"text-gray-900 font-medium\">${roiResult.outputs.savings.toLocaleString()}</div>\n            </div>\n            <div>\n              <div className=\"text-gray-500\">Net</div>\n              <div className={`font-medium ${roiResult.outputs.net >= 0 ? 'text-green-700' : 'text-red-700'}`}>\n                ${roiResult.outputs.net.toLocaleString()}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-gray-500\">ROI</div>\n              <div className=\"text-gray-900 font-medium\">{roiResult.outputs.roi !== null ? (roiResult.outputs.roi * 100).toFixed(1) + '%' : '—'}</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <div className=\"mb-8 flex items-start justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Enhanced Genomics Analysis</h1>\n          <p className=\"text-gray-600\">\n            Comprehensive NGS report processing and genomic analysis platform\n          </p>\n        </div>\n        <div className=\"pt-1\">\n          <button\n            onClick={openMetaDrawer}\n            className=\"px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded\"\n          >\n            Panel & Versions\n          </button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200 mb-6\">\n        <nav className=\"-mb-px flex space-x-8 overflow-x-auto\">\n          {tabs.map(({ id, label, icon: Icon, description }) => (\n            <button\n              key={id}\n              onClick={() => setActiveTab(id)}\n              className={`group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${\n                activeTab === id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <Icon className={`w-5 h-5 mr-2 ${\n                activeTab === id ? 'text-blue-500' : 'text-gray-400 group-hover:text-gray-500'\n              }`} />\n              <div className=\"text-left\">\n                <div>{label}</div>\n                <div className=\"text-xs text-gray-400\">{description}</div>\n              </div>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"min-h-96\">\n        {activeTab === 'upload' && renderUploadTab()}\n        {activeTab === 'analysis' && renderAnalysisTab()}\n        {activeTab === 'treatments' && renderTreatmentsTab()}\n        {activeTab === 'trials' && renderTrialsTab()}\n        {activeTab === 'biomarkers' && renderBiomarkersTab()}\n        {activeTab === 'hereditary' && renderHereditaryTab()}\n        {activeTab === 'pgx-report' && renderPgxReportTab()}\n        {activeTab === 'pgx-roi' && renderPgxRoiTab()}\n      </div>\n\n      {/* Panel/Versions Drawer */}\n      {showMetaDrawer && (\n        <>\n          <div\n            className=\"fixed inset-0 bg-black/30 z-40\"\n            onClick={() => setShowMetaDrawer(false)}\n          />\n          <aside className=\"fixed top-0 right-0 h-full w-full sm:w-[28rem] bg-white shadow-xl z-50 flex flex-col\">\n            <div className=\"p-4 border-b border-gray-200 flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-lg font-semibold text-gray-900\">PGx Panel & Versions</h2>\n                <p className=\"text-xs text-gray-500\">Evidence-driven, multi-specialty panel overview</p>\n              </div>\n              <button\n                onClick={() => setShowMetaDrawer(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n                aria-label=\"Close\"\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"p-4 overflow-y-auto\">\n              {loadingMeta && (\n                <div className=\"text-sm text-gray-500\">Loading…</div>\n              )}\n\n              {!loadingMeta && panelInfo && (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-2\">Panel</h3>\n                  <div className=\"text-xs text-gray-500 mb-2\">Version {panelInfo.version}</div>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">Genes</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {(panelInfo.genes || []).map((g: any, i: number) => (\n                          <span key={i} className={`px-2 py-1 rounded text-xs border ${g.implemented ? 'bg-green-50 text-green-800 border-green-200' : 'bg-gray-50 text-gray-700 border-gray-200'}`}>\n                            {g.symbol}{g.implemented ? '' : ' (planned)'}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-medium text-gray-600 mb-1\">HLA Alleles</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {(panelInfo.hla || []).map((h: any, i: number) => (\n                          <span key={i} className={`px-2 py-1 rounded text-xs border ${h.implemented ? 'bg-green-50 text-green-800 border-green-200' : 'bg-gray-50 text-gray-700 border-gray-200'}`}>\n                            {h.symbol}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {!loadingMeta && versionsInfo && (\n                <div>\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-2\">Version Log</h3>\n                  <div className=\"text-xs text-gray-500 mb-2\">Current {versionsInfo.currentVersion}</div>\n                  <div className=\"space-y-3\">\n                    {(versionsInfo.changes || []).map((chg: any, i: number) => (\n                      <div key={i} className=\"border border-gray-200 rounded p-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-sm font-medium text-gray-900\">{chg.version}</div>\n                          <div className=\"text-xs text-gray-500\">{chg.date}</div>\n                        </div>\n                        <ul className=\"mt-2 list-disc list-inside text-sm text-gray-700 space-y-1\">\n                          {(chg.notes || []).map((n: string, j: number) => (\n                            <li key={j}>{n}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Quick Actions */}\n              <div className=\"mt-6 border-t border-gray-200 pt-4\">\n                <h3 className=\"text-sm font-semibold text-gray-800 mb-2\">Actions</h3>\n                <div className=\"flex flex-wrap items-end gap-3 mb-3\">\n                  <div>\n                    <label className=\"block text-xs text-gray-600 mb-1\">Open PGx Report by RXCUI</label>\n                    <div className=\"flex gap-2\">\n                      <input\n                        className=\"border border-gray-300 rounded px-2 py-1 w-40\"\n                        placeholder=\"e.g., 11289\"\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            const v = (e.target as HTMLInputElement).value.trim();\n                            if (v) gotoPgxReport(v);\n                          }\n                        }}\n                      />\n                      <button\n                        onClick={() => gotoPgxReport('11289')}\n                        className=\"px-2 py-1 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Warfarin\"\n                      >11289</button>\n                      <button\n                        onClick={() => gotoPgxReport('42463')}\n                        className=\"px-2 py-1 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Clopidogrel\"\n                      >42463</button>\n                      <button\n                        onClick={() => gotoPgxReport('39998')}\n                        className=\"px-2 py-1 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Irinotecan\"\n                      >39998</button>\n                    </div>\n                  </div>\n\n                  <div className=\"ml-auto flex flex-wrap gap-2 items-center\">\n                    <div className=\"flex gap-1\">\n                      <button\n                        onClick={downloadPanelCsv}\n                        className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50\"\n                      >\n                        Export Panel CSV\n                      </button>\n                      <button\n                        onClick={copyCurlPanelCsv}\n                        className=\"px-2 py-2 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Copy cURL\"\n                      >\n                        Copy cURL\n                      </button>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <button\n                        onClick={downloadVersionsCsv}\n                        className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50\"\n                      >\n                        Export Versions CSV\n                      </button>\n                      <button\n                        onClick={copyCurlVersionsCsv}\n                        className=\"px-2 py-2 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Copy cURL\"\n                      >\n                        Copy cURL\n                      </button>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <button\n                        onClick={downloadBundleJson}\n                        className=\"px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50\"\n                      >\n                        Export Bundle JSON\n                      </button>\n                      <button\n                        onClick={copyCurlBundleJson}\n                        className=\"px-2 py-2 text-xs bg-gray-100 border border-gray-300 rounded hover:bg-gray-200\"\n                        title=\"Copy cURL\"\n                      >\n                        Copy cURL\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aside>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedGenomicsAnalysis;\n","import React from 'react';\nimport EnhancedGenomicsAnalysis from './EnhancedGenomicsAnalysis';\nimport FeatureErrorBoundary from '../ErrorBoundary/FeatureErrorBoundary';\n\nconst GenomicsAnalysis: React.FC = () => {\n  return (\n    <FeatureErrorBoundary \n      featureName=\"Pharmacogenomics Analysis\"\n      fallbackMessage=\"The genomics analysis feature is temporarily unavailable. This may be due to data processing issues or connectivity problems.\"\n    >\n      <EnhancedGenomicsAnalysis />\n    </FeatureErrorBoundary>\n  );\n};\n\nexport default GenomicsAnalysis;\n"],"names":["_GenomicAnalysisService","file","patientId","fileContent","parsedData","error","patient","ngsReport","interpretedVariants","actionableVariants","treatmentOptions","clinicalTrials","hereditaryRisks","pharmacogenomics","resistancePredictions","variants","variant","implication","personalizedScore","a","b","trial","age","matchesAge","matchesCancer","type","matchesECOG","hereditaryGenes","pgxResults","pgxGenes","result","resolve","reject","reader","e","content","filename","lines","line","fields","data","v","index","drug","diagnosis","approvedCombos","combo","approved","level","evidenceLevel","options","seen","option","key","dateOfBirth","today","birth","monthDiff","gene","phenotype","treatments","trials","confidence","score","cancerType","ti","contraindications","baseResponse","predictions","treatment","resistanceRisk","resistanceMechanisms","resistanceVariants","mechanisms","baseRecommendation","medications","med","highConfidenceVariants","personalizedTreatments","t","hereditary","recommendations","topTreatment","GenomicAnalysisService","EnhancedGenomicsAnalysis","activeTab","setActiveTab","useState","selectedPatient","setSelectedPatient","patients","setPatients","ngsReports","setNgsReports","selectedReport","setSelectedReport","analysisResults","setAnalysisResults","uploading","setUploading","analyzing","setAnalyzing","biomarkerPanels","showMetaDrawer","setShowMetaDrawer","panelInfo","setPanelInfo","versionsInfo","setVersionsInfo","loadingMeta","setLoadingMeta","openMetaDrawer","p","r","gotoPgxReport","rxcui","setReportRxcui","fetchPgxReport","downloadPanelCsv","blob","url","downloadVersionsCsv","downloadBundleJson","copyToClipboard","text","ta","copyCurlPanelCsv","origin","copyCurlVersionsCsv","copyCurlBundleJson","useEffect","patientService","tabs","Upload","Dna","Target","Users","Activity","AlertTriangle","FileText","TrendingUp","handleFileUpload","event","report","prev","handleAnalyze","results","reportRxcui","pgxReport","setPgxReport","loadingReport","setLoadingReport","copyCurlPgxReport","cmd","roiInputs","setRoiInputs","roiResult","setRoiResult","loadingRoi","setLoadingRoi","calculateRoi","renderUploadTab","jsxs","jsx","Fragment","Clock","ExternalLink","renderAnalysisTab","rec","CheckCircle","renderTreatmentsTab","i","renderTrialsTab","reason","location","renderBiomarkersTab","panel","biomarker","renderHereditaryTab","risk","renderPgxReportTab","idx","renderPgxRoiTab","f","s","id","label","Icon","description","g","h","chg","n","j","GenomicsAnalysis","FeatureErrorBoundary"],"mappings":"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"}